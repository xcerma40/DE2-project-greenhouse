
GreenhouseSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000466  000004fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800160  00800160  0000055a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001089  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000987  00000000  00000000  0000172d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a6  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  0000285c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e0  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000831  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000038d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_18>
  4c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e6       	ldi	r26, 0x60	; 96
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3a       	cpi	r26, 0xAA	; 170
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 31 02 	jmp	0x462	; 0x462 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
        break;
    }
}
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <main+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <main+0x8>
  ae:	00 d0       	rcall	.+0      	; 0xb0 <main+0xa>
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	0e 94 23 01 	call	0x246	; 0x246 <twi_init>
  b8:	87 e6       	ldi	r24, 0x67	; 103
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 bf 01 	call	0x37e	; 0x37e <uart_init>
  c0:	e1 e8       	ldi	r30, 0x81	; 129
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8a 7f       	andi	r24, 0xFA	; 250
  c8:	80 83       	st	Z, r24
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	80 83       	st	Z, r24
  d0:	ef e6       	ldi	r30, 0x6F	; 111
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	80 83       	st	Z, r24
  da:	78 94       	sei
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	0e 94 ef 01 	call	0x3de	; 0x3de <uart_puts>
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	ec e2       	ldi	r30, 0x2C	; 44
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	de 01       	movw	r26, r28
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	01 90       	ld	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	8a 95       	dec	r24
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x48>
  f6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
  fa:	88 23       	and	r24, r24
  fc:	e1 f3       	breq	.-8      	; 0xf6 <main+0x50>
  fe:	83 e1       	ldi	r24, 0x13	; 19
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	0e 94 ef 01 	call	0x3de	; 0x3de <uart_puts>
 106:	4a e0       	ldi	r20, 0x0A	; 10
 108:	be 01       	movw	r22, r28
 10a:	6f 5f       	subi	r22, 0xFF	; 255
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <humidity>
 112:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <humidity+0x1>
 116:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__itoa_ncheck>
 11a:	ce 01       	movw	r24, r28
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	0e 94 ef 01 	call	0x3de	; 0x3de <uart_puts>
 122:	8e e1       	ldi	r24, 0x1E	; 30
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 ef 01 	call	0x3de	; 0x3de <uart_puts>
 12a:	4a e0       	ldi	r20, 0x0A	; 10
 12c:	be 01       	movw	r22, r28
 12e:	6f 5f       	subi	r22, 0xFF	; 255
 130:	7f 4f       	sbci	r23, 0xFF	; 255
 132:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <temperature>
 136:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <temperature+0x1>
 13a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__itoa_ncheck>
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 ef 01 	call	0x3de	; 0x3de <uart_puts>
 146:	d7 cf       	rjmp	.-82     	; 0xf6 <main+0x50>

00000148 <read_and_send_tmp_hum>:
/*uint8_t dht12_get_byte(){
	
}*/

void read_and_send_tmp_hum()
{
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
	uart_puts("reading data from DHT12\r\n");
 152:	8a e3       	ldi	r24, 0x3A	; 58
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 ef 01 	call	0x3de	; 0x3de <uart_puts>
	uint8_t humid_integral = 0;
	uint8_t humid_scale = 0;
	uint8_t temperature_integral = 0;
	uint8_t temperature_scale = 0;
	
	humid_temp_flag = 0;
 15a:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
	
	/*itoa(result, uart_string, 10);
	uart_puts(uart_string);
	uart_puts("\n\r");*/
		
	twi_start((addr<<1) + TWI_READ);
 15e:	89 eb       	ldi	r24, 0xB9	; 185
 160:	0e 94 32 01 	call	0x264	; 0x264 <twi_start>
	//twi_write(0x00);                    // request for fraction part
		
	//twi_start((addr<<1) + TWI_READ);    
	humid_integral = twi_read_ack();    // get fraction part
 164:	0e 94 4f 01 	call	0x29e	; 0x29e <twi_read_ack>
 168:	c8 2f       	mov	r28, r24
		
	//twi_start((addr<<1) + TWI_WRITE);   
	//twi_write(0x01);                    // request for scale part
		
	//twi_start((addr<<1) + TWI_READ);   
	humid_scale = twi_read_ack();			// get scale part
 16a:	0e 94 4f 01 	call	0x29e	; 0x29e <twi_read_ack>
 16e:	18 2f       	mov	r17, r24
	
	//twi_start((addr<<1) + TWI_WRITE);
	//twi_write(0x02);                    // request for fraction part
	
	//twi_start((addr<<1) + TWI_READ);
	temperature_integral = twi_read_ack();    // get fraction part
 170:	0e 94 4f 01 	call	0x29e	; 0x29e <twi_read_ack>
 174:	d8 2f       	mov	r29, r24
	
	//twi_start((addr<<1) + TWI_WRITE);
	//twi_write(0x03);                    // request for scale part
	
	//twi_start((addr<<1) + TWI_READ);
	temperature_scale = twi_read_ack();			// get scale part
 176:	0e 94 4f 01 	call	0x29e	; 0x29e <twi_read_ack>
 17a:	08 2f       	mov	r16, r24
	
	//twi_start((addr<<1) + TWI_WRITE);
	//twi_write(0x04);                    // request for scale part
	
	//twi_start((addr<<1) + TWI_READ);
	checksum = twi_read_nack();			// get scale part
 17c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <twi_read_nack>
 180:	f8 2e       	mov	r15, r24
	
	twi_stop();
 182:	0e 94 63 01 	call	0x2c6	; 0x2c6 <twi_stop>
	
	if (checksum == (humid_integral | humid_scale | temperature_integral | temperature_scale)) {
 186:	8c 2f       	mov	r24, r28
 188:	81 2b       	or	r24, r17
 18a:	8d 2b       	or	r24, r29
 18c:	80 2b       	or	r24, r16
 18e:	f8 12       	cpse	r15, r24
 190:	17 c0       	rjmp	.+46     	; 0x1c0 <read_and_send_tmp_hum+0x78>
		humid_temp_flag = 1;	
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
		temperature = temperature_integral * 10 + temperature_scale;
 198:	8d 2f       	mov	r24, r29
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	9c 01       	movw	r18, r24
 19e:	22 0f       	add	r18, r18
 1a0:	33 1f       	adc	r19, r19
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	82 0f       	add	r24, r18
 1b0:	93 1f       	adc	r25, r19
 1b2:	80 0f       	add	r24, r16
 1b4:	91 1d       	adc	r25, r1
 1b6:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <temperature+0x1>
 1ba:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <temperature>
 1be:	15 c0       	rjmp	.+42     	; 0x1ea <read_and_send_tmp_hum+0xa2>
	}
	else {
		humid_temp_flag = 0;
 1c0:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
		humidity = humid_integral * 10 + humid_scale;
 1c4:	8c 2f       	mov	r24, r28
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	9c 01       	movw	r18, r24
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	82 0f       	add	r24, r18
 1dc:	93 1f       	adc	r25, r19
 1de:	81 0f       	add	r24, r17
 1e0:	91 1d       	adc	r25, r1
 1e2:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <humidity+0x1>
 1e6:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <humidity>
	}
	
	
	//double humidity = get_humidity(humid_integral, humid_scale);
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	08 95       	ret

000001f6 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	uart_puts("overflow\r\n");
 218:	84 e5       	ldi	r24, 0x54	; 84
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 ef 01 	call	0x3de	; 0x3de <uart_puts>
	read_and_send_tmp_hum();
 220:	0e 94 a4 00 	call	0x148	; 0x148 <read_and_send_tmp_hum>
	//scanDevices();
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <twi_init>:
{
    TWDR = data;
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
}
 246:	87 b1       	in	r24, 0x07	; 7
 248:	8f 7c       	andi	r24, 0xCF	; 207
 24a:	87 b9       	out	0x07, r24	; 7
 24c:	88 b1       	in	r24, 0x08	; 8
 24e:	80 63       	ori	r24, 0x30	; 48
 250:	88 b9       	out	0x08, r24	; 8
 252:	e9 eb       	ldi	r30, 0xB9	; 185
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	8c 7f       	andi	r24, 0xFC	; 252
 25a:	80 83       	st	Z, r24
 25c:	88 e9       	ldi	r24, 0x98	; 152
 25e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 262:	08 95       	ret

00000264 <twi_start>:
 264:	94 ea       	ldi	r25, 0xA4	; 164
 266:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 26a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 26e:	99 23       	and	r25, r25
 270:	e4 f7       	brge	.-8      	; 0x26a <twi_start+0x6>
 272:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 276:	84 e8       	ldi	r24, 0x84	; 132
 278:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 27c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 280:	88 23       	and	r24, r24
 282:	e4 f7       	brge	.-8      	; 0x27c <twi_start+0x18>
 284:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 288:	88 7f       	andi	r24, 0xF8	; 248
 28a:	88 31       	cpi	r24, 0x18	; 24
 28c:	21 f0       	breq	.+8      	; 0x296 <twi_start+0x32>
 28e:	80 34       	cpi	r24, 0x40	; 64
 290:	21 f4       	brne	.+8      	; 0x29a <twi_start+0x36>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	08 95       	ret

0000029e <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 29e:	84 ec       	ldi	r24, 0xC4	; 196
 2a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 2a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2a8:	88 23       	and	r24, r24
 2aa:	e4 f7       	brge	.-8      	; 0x2a4 <twi_read_ack+0x6>
    return (TWDR);
 2ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 2b0:	08 95       	ret

000002b2 <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 2b2:	84 e8       	ldi	r24, 0x84	; 132
 2b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 2b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2bc:	88 23       	and	r24, r24
 2be:	e4 f7       	brge	.-8      	; 0x2b8 <twi_read_nack+0x6>
    return (TWDR);
 2c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 2c4:	08 95       	ret

000002c6 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 2c6:	84 e9       	ldi	r24, 0x94	; 148
 2c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2cc:	08 95       	ret

000002ce <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
 2e2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2e6:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2ea:	8c 71       	andi	r24, 0x1C	; 28
 2ec:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <UART_RxHead>
 2f0:	ef 5f       	subi	r30, 0xFF	; 255
 2f2:	ef 71       	andi	r30, 0x1F	; 31
 2f4:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <UART_RxTail>
 2f8:	e9 17       	cp	r30, r25
 2fa:	39 f0       	breq	.+14     	; 0x30a <__vector_18+0x3c>
 2fc:	e0 93 67 01 	sts	0x0167, r30	; 0x800167 <UART_RxHead>
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	e6 59       	subi	r30, 0x96	; 150
 304:	fe 4f       	sbci	r31, 0xFE	; 254
 306:	20 83       	st	Z, r18
 308:	01 c0       	rjmp	.+2      	; 0x30c <__vector_18+0x3e>
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <UART_LastRxError>
 310:	89 2b       	or	r24, r25
 312:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <UART_LastRxError>
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <__vector_19>:
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	ef 93       	push	r30
 33a:	ff 93       	push	r31
 33c:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <UART_TxHead>
 340:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <UART_TxTail>
 344:	98 17       	cp	r25, r24
 346:	69 f0       	breq	.+26     	; 0x362 <__vector_19+0x38>
 348:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <UART_TxTail>
 34c:	ef 5f       	subi	r30, 0xFF	; 255
 34e:	ef 71       	andi	r30, 0x1F	; 31
 350:	e0 93 68 01 	sts	0x0168, r30	; 0x800168 <UART_TxTail>
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	e6 57       	subi	r30, 0x76	; 118
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	80 81       	ld	r24, Z
 35c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 360:	05 c0       	rjmp	.+10     	; 0x36c <__vector_19+0x42>
 362:	e1 ec       	ldi	r30, 0xC1	; 193
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	8f 7d       	andi	r24, 0xDF	; 223
 36a:	80 83       	st	Z, r24
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <uart_init>:
 37e:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <UART_TxHead>
 382:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <UART_TxTail>
 386:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <UART_RxHead>
 38a:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <UART_RxTail>
 38e:	28 2f       	mov	r18, r24
 390:	39 2f       	mov	r19, r25
 392:	33 23       	and	r19, r19
 394:	1c f4       	brge	.+6      	; 0x39c <uart_init+0x1e>
 396:	22 e0       	ldi	r18, 0x02	; 2
 398:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 39c:	90 78       	andi	r25, 0x80	; 128
 39e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3a6:	88 e9       	ldi	r24, 0x98	; 152
 3a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 3ac:	86 e0       	ldi	r24, 0x06	; 6
 3ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 3b2:	08 95       	ret

000003b4 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 3b4:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <UART_TxHead>
 3b8:	2f 5f       	subi	r18, 0xFF	; 255
 3ba:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 3bc:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <UART_TxTail>
 3c0:	29 17       	cp	r18, r25
 3c2:	e1 f3       	breq	.-8      	; 0x3bc <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 3c4:	e2 2f       	mov	r30, r18
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	e6 57       	subi	r30, 0x76	; 118
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 3ce:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 3d2:	e1 ec       	ldi	r30, 0xC1	; 193
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	80 62       	ori	r24, 0x20	; 32
 3da:	80 83       	st	Z, r24
 3dc:	08 95       	ret

000003de <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	ec 01       	movw	r28, r24
    while (*s)
 3e4:	03 c0       	rjmp	.+6      	; 0x3ec <uart_puts+0xe>
        uart_putc(*s++);
 3e6:	21 96       	adiw	r28, 0x01	; 1
 3e8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 3ec:	88 81       	ld	r24, Y
 3ee:	81 11       	cpse	r24, r1
 3f0:	fa cf       	rjmp	.-12     	; 0x3e6 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <__itoa_ncheck>:
 3f8:	bb 27       	eor	r27, r27
 3fa:	4a 30       	cpi	r20, 0x0A	; 10
 3fc:	31 f4       	brne	.+12     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3fe:	99 23       	and	r25, r25
 400:	22 f4       	brpl	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 402:	bd e2       	ldi	r27, 0x2D	; 45
 404:	90 95       	com	r25
 406:	81 95       	neg	r24
 408:	9f 4f       	sbci	r25, 0xFF	; 255
 40a:	0c 94 08 02 	jmp	0x410	; 0x410 <__utoa_common>

0000040e <__utoa_ncheck>:
 40e:	bb 27       	eor	r27, r27

00000410 <__utoa_common>:
 410:	fb 01       	movw	r30, r22
 412:	55 27       	eor	r21, r21
 414:	aa 27       	eor	r26, r26
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	aa 1f       	adc	r26, r26
 41c:	a4 17       	cp	r26, r20
 41e:	10 f0       	brcs	.+4      	; 0x424 <__utoa_common+0x14>
 420:	a4 1b       	sub	r26, r20
 422:	83 95       	inc	r24
 424:	50 51       	subi	r21, 0x10	; 16
 426:	b9 f7       	brne	.-18     	; 0x416 <__utoa_common+0x6>
 428:	a0 5d       	subi	r26, 0xD0	; 208
 42a:	aa 33       	cpi	r26, 0x3A	; 58
 42c:	08 f0       	brcs	.+2      	; 0x430 <__utoa_common+0x20>
 42e:	a9 5d       	subi	r26, 0xD9	; 217
 430:	a1 93       	st	Z+, r26
 432:	00 97       	sbiw	r24, 0x00	; 0
 434:	79 f7       	brne	.-34     	; 0x414 <__utoa_common+0x4>
 436:	b1 11       	cpse	r27, r1
 438:	b1 93       	st	Z+, r27
 43a:	11 92       	st	Z+, r1
 43c:	cb 01       	movw	r24, r22
 43e:	0c 94 21 02 	jmp	0x442	; 0x442 <strrev>

00000442 <strrev>:
 442:	dc 01       	movw	r26, r24
 444:	fc 01       	movw	r30, r24
 446:	67 2f       	mov	r22, r23
 448:	71 91       	ld	r23, Z+
 44a:	77 23       	and	r23, r23
 44c:	e1 f7       	brne	.-8      	; 0x446 <strrev+0x4>
 44e:	32 97       	sbiw	r30, 0x02	; 2
 450:	04 c0       	rjmp	.+8      	; 0x45a <strrev+0x18>
 452:	7c 91       	ld	r23, X
 454:	6d 93       	st	X+, r22
 456:	70 83       	st	Z, r23
 458:	62 91       	ld	r22, -Z
 45a:	ae 17       	cp	r26, r30
 45c:	bf 07       	cpc	r27, r31
 45e:	c8 f3       	brcs	.-14     	; 0x452 <strrev+0x10>
 460:	08 95       	ret

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
