
GreenhouseSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000e02  00000e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  0080011e  0080011e  00000eb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026e0  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c2  00000000  00000000  0000388c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001541  00000000  00000000  0000494e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005dc  00000000  00000000  00005e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091d  00000000  00000000  0000646c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001719  00000000  00000000  00006d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  000084a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_18>
  4c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 36       	cpi	r26, 0x6D	; 109
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <main>
  9e:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register -> DDRx
    reg_name++;                     // Change pointer to Data Register -> PORTx  (DDR a PORT jsou v pamìti hned u sebe)
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <toggle_e+0x8>
  fc:	00 00       	nop
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	85 b9       	out	0x05, r24	; 5
 104:	08 95       	ret

00000106 <lcd_write>:
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
 10a:	66 23       	and	r22, r22
 10c:	21 f0       	breq	.+8      	; 0x116 <lcd_write+0x10>
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	81 60       	ori	r24, 0x01	; 1
 112:	85 b9       	out	0x05, r24	; 5
 114:	03 c0       	rjmp	.+6      	; 0x11c <lcd_write+0x16>
 116:	85 b1       	in	r24, 0x05	; 5
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	8a b1       	in	r24, 0x0a	; 10
 11e:	80 61       	ori	r24, 0x10	; 16
 120:	8a b9       	out	0x0a, r24	; 10
 122:	8a b1       	in	r24, 0x0a	; 10
 124:	80 62       	ori	r24, 0x20	; 32
 126:	8a b9       	out	0x0a, r24	; 10
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	8a b9       	out	0x0a, r24	; 10
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	80 68       	ori	r24, 0x80	; 128
 132:	8a b9       	out	0x0a, r24	; 10
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 77       	andi	r24, 0x7F	; 127
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7b       	andi	r24, 0xBF	; 191
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7d       	andi	r24, 0xDF	; 223
 144:	8b b9       	out	0x0b, r24	; 11
 146:	8b b1       	in	r24, 0x0b	; 11
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	8b b9       	out	0x0b, r24	; 11
 14c:	cc 23       	and	r28, r28
 14e:	1c f4       	brge	.+6      	; 0x156 <lcd_write+0x50>
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	80 68       	ori	r24, 0x80	; 128
 154:	8b b9       	out	0x0b, r24	; 11
 156:	c6 ff       	sbrs	r28, 6
 158:	03 c0       	rjmp	.+6      	; 0x160 <lcd_write+0x5a>
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	c5 ff       	sbrs	r28, 5
 162:	03 c0       	rjmp	.+6      	; 0x16a <lcd_write+0x64>
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	80 62       	ori	r24, 0x20	; 32
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	c4 ff       	sbrs	r28, 4
 16c:	03 c0       	rjmp	.+6      	; 0x174 <lcd_write+0x6e>
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	80 61       	ori	r24, 0x10	; 16
 172:	8b b9       	out	0x0b, r24	; 11
 174:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	8f 77       	andi	r24, 0x7F	; 127
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	8f 7b       	andi	r24, 0xBF	; 191
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8f 7d       	andi	r24, 0xDF	; 223
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	c3 ff       	sbrs	r28, 3
 192:	03 c0       	rjmp	.+6      	; 0x19a <lcd_write+0x94>
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	80 68       	ori	r24, 0x80	; 128
 198:	8b b9       	out	0x0b, r24	; 11
 19a:	c2 ff       	sbrs	r28, 2
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <lcd_write+0x9e>
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	c1 ff       	sbrs	r28, 1
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <lcd_write+0xa8>
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	80 62       	ori	r24, 0x20	; 32
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	c0 ff       	sbrs	r28, 0
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_write+0xb2>
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	80 61       	ori	r24, 0x10	; 16
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	8b b9       	out	0x0b, r24	; 11
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	87 eb       	ldi	r24, 0xB7	; 183
 1d6:	9b e0       	ldi	r25, 0x0B	; 11
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_write+0xd2>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_write+0xd8>
 1de:	00 00       	nop
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_command>:
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 1ea:	08 95       	ret

000001ec <lcd_gotoxy>:
 1ec:	61 11       	cpse	r22, r1
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <lcd_gotoxy+0xc>
 1f0:	80 58       	subi	r24, 0x80	; 128
 1f2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 1f6:	08 95       	ret
 1f8:	80 54       	subi	r24, 0x40	; 64
 1fa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 1fe:	08 95       	ret

00000200 <lcd_clrscr>:
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 206:	08 95       	ret

00000208 <lcd_putc>:
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 20e:	08 95       	ret

00000210 <lcd_puts>:
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	fc 01       	movw	r30, r24
 216:	03 c0       	rjmp	.+6      	; 0x21e <lcd_puts+0xe>
 218:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
 21c:	fe 01       	movw	r30, r28
 21e:	ef 01       	movw	r28, r30
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	80 81       	ld	r24, Z
 224:	81 11       	cpse	r24, r1
 226:	f8 cf       	rjmp	.-16     	; 0x218 <lcd_puts+0x8>
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 22e:	cf 93       	push	r28
 230:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 232:	84 b1       	in	r24, 0x04	; 4
 234:	81 60       	ori	r24, 0x01	; 1
 236:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 238:	8a b1       	in	r24, 0x0a	; 10
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 23e:	84 b1       	in	r24, 0x04	; 4
 240:	82 60       	ori	r24, 0x02	; 2
 242:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 244:	8a b1       	in	r24, 0x0a	; 10
 246:	80 61       	ori	r24, 0x10	; 16
 248:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 24a:	8a b1       	in	r24, 0x0a	; 10
 24c:	80 62       	ori	r24, 0x20	; 32
 24e:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 250:	8a b1       	in	r24, 0x0a	; 10
 252:	80 64       	ori	r24, 0x40	; 64
 254:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 256:	8a b1       	in	r24, 0x0a	; 10
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	99 ef       	ldi	r25, 0xF9	; 249
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_init+0x32>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_init+0x38>
 266:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 268:	8b b1       	in	r24, 0x0b	; 11
 26a:	80 62       	ori	r24, 0x20	; 32
 26c:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	80 61       	ori	r24, 0x10	; 16
 272:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 274:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 278:	8f e1       	ldi	r24, 0x1F	; 31
 27a:	9e e4       	ldi	r25, 0x4E	; 78
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_init+0x4e>
 280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_init+0x54>
 282:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 284:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_init+0x5e>
 290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_init+0x64>
 292:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 294:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x6e>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <lcd_init+0x74>
 2a2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2a4:	8b b1       	in	r24, 0x0b	; 11
 2a6:	8f 7e       	andi	r24, 0xEF	; 239
 2a8:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2aa:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_init+0x84>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_init+0x8a>
 2b8:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2ba:	88 e2       	ldi	r24, 0x28	; 40
 2bc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2c0:	88 e0       	ldi	r24, 0x08	; 8
 2c2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2c6:	0e 94 00 01 	call	0x200	; 0x200 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2d0:	8c 2f       	mov	r24, r28
 2d2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
}/* lcd_init */
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 2da:	87 b1       	in	r24, 0x07	; 7
 2dc:	8f 7c       	andi	r24, 0xCF	; 207
 2de:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 2e0:	88 b1       	in	r24, 0x08	; 8
 2e2:	80 63       	ori	r24, 0x30	; 48
 2e4:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 2e6:	e9 eb       	ldi	r30, 0xB9	; 185
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	8c 7f       	andi	r24, 0xFC	; 252
 2ee:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 2f0:	88 e9       	ldi	r24, 0x98	; 152
 2f2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 2f6:	08 95       	ret

000002f8 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 2f8:	94 ea       	ldi	r25, 0xA4	; 164
 2fa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 2fe:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 302:	99 23       	and	r25, r25
 304:	e4 f7       	brge	.-8      	; 0x2fe <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 306:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 30a:	84 e8       	ldi	r24, 0x84	; 132
 30c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 310:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 314:	88 23       	and	r24, r24
 316:	e4 f7       	brge	.-8      	; 0x310 <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 318:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 31c:	88 7f       	andi	r24, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 31e:	88 31       	cpi	r24, 0x18	; 24
 320:	21 f0       	breq	.+8      	; 0x32a <twi_start+0x32>
 322:	80 34       	cpi	r24, 0x40	; 64
 324:	21 f4       	brne	.+8      	; 0x32e <twi_start+0x36>
    {
        return 0;   /* Slave device accessible */
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	08 95       	ret
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	08 95       	ret
    }
    else
    {
        return 1;   /* Failed to access slave device */
 32e:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 330:	08 95       	ret

00000332 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 332:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 336:	84 e8       	ldi	r24, 0x84	; 132
 338:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 33c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 340:	88 23       	and	r24, r24
 342:	e4 f7       	brge	.-8      	; 0x33c <twi_write+0xa>
}
 344:	08 95       	ret

00000346 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 346:	84 ec       	ldi	r24, 0xC4	; 196
 348:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 34c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 350:	88 23       	and	r24, r24
 352:	e4 f7       	brge	.-8      	; 0x34c <twi_read_ack+0x6>
    return (TWDR);
 354:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 358:	08 95       	ret

0000035a <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 35a:	84 e8       	ldi	r24, 0x84	; 132
 35c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 360:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 364:	88 23       	and	r24, r24
 366:	e4 f7       	brge	.-8      	; 0x360 <twi_read_nack+0x6>
    return (TWDR);
 368:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 36c:	08 95       	ret

0000036e <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 36e:	84 e9       	ldi	r24, 0x94	; 148
 370:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 374:	08 95       	ret

00000376 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	2f 93       	push	r18
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	ef 93       	push	r30
 388:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 38a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
 38e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 392:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 394:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <UART_RxHead>
 398:	ef 5f       	subi	r30, 0xFF	; 255
 39a:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 39c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <UART_RxTail>
 3a0:	e9 17       	cp	r30, r25
 3a2:	39 f0       	breq	.+14     	; 0x3b2 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 3a4:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	ed 5d       	subi	r30, 0xDD	; 221
 3ac:	fe 4f       	sbci	r31, 0xFE	; 254
 3ae:	20 83       	st	Z, r18
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 3b2:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 3b4:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <__data_end>
 3b8:	89 2b       	or	r24, r25
 3ba:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
}
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	2f 91       	pop	r18
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	8f 93       	push	r24
 3de:	9f 93       	push	r25
 3e0:	ef 93       	push	r30
 3e2:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 3e4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <UART_TxHead>
 3e8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <UART_TxTail>
 3ec:	98 17       	cp	r25, r24
 3ee:	69 f0       	breq	.+26     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 3f0:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <UART_TxTail>
 3f4:	ef 5f       	subi	r30, 0xFF	; 255
 3f6:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 3f8:	e0 93 21 01 	sts	0x0121, r30	; 0x800121 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	ed 5b       	subi	r30, 0xBD	; 189
 400:	fe 4f       	sbci	r31, 0xFE	; 254
 402:	80 81       	ld	r24, Z
 404:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 408:	05 c0       	rjmp	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 40a:	e1 ec       	ldi	r30, 0xC1	; 193
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	8f 7d       	andi	r24, 0xDF	; 223
 412:	80 83       	st	Z, r24
    }
}
 414:	ff 91       	pop	r31
 416:	ef 91       	pop	r30
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 426:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <UART_TxHead>
    UART_TxTail = 0;
 42a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <UART_TxTail>
    UART_RxHead = 0;
 42e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <UART_RxHead>
    UART_RxTail = 0;
 432:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 436:	28 2f       	mov	r18, r24
 438:	39 2f       	mov	r19, r25
 43a:	33 23       	and	r19, r19
 43c:	1c f4       	brge	.+6      	; 0x444 <uart_init+0x1e>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 43e:	22 e0       	ldi	r18, 0x02	; 2
 440:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 444:	90 78       	andi	r25, 0x80	; 128
 446:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 44a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 44e:	88 e9       	ldi	r24, 0x98	; 152
 450:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 454:	86 e0       	ldi	r24, 0x06	; 6
 456:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 45a:	08 95       	ret

0000045c <init_leds>:




void init_leds(){
	GPIO_config_output(&DDRB, LIGHT_LED);
 45c:	64 e0       	ldi	r22, 0x04	; 4
 45e:	84 e2       	ldi	r24, 0x24	; 36
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC, PUMP_LED);
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	87 e2       	ldi	r24, 0x27	; 39
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC, TEMPERATURE_LED);
 470:	63 e0       	ldi	r22, 0x03	; 3
 472:	87 e2       	ldi	r24, 0x27	; 39
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
		
	GPIO_write_high(&PORTB, LIGHT_LED);
 47a:	64 e0       	ldi	r22, 0x04	; 4
 47c:	85 e2       	ldi	r24, 0x25	; 37
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
	GPIO_write_high(&PORTC, PUMP_LED);
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	88 e2       	ldi	r24, 0x28	; 40
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
	GPIO_write_high(&PORTC, TEMPERATURE_LED);
 48e:	63 e0       	ldi	r22, 0x03	; 3
 490:	88 e2       	ldi	r24, 0x28	; 40
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 498:	08 95       	ret

0000049a <green_house_setup>:
    // Will never reach this
    return 0;
}

void green_house_setup(){
	 twi_init();
 49a:	0e 94 6d 01 	call	0x2da	; 0x2da <twi_init>

	 // Initialize UART to asynchronous, 8N1, 9600
	 uart_init(UART_BAUD_SELECT(9600, F_CPU));
 49e:	87 e6       	ldi	r24, 0x67	; 103
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 13 02 	call	0x426	; 0x426 <uart_init>
	 
	 init_leds();
 4a6:	0e 94 2e 02 	call	0x45c	; 0x45c <init_leds>
	 init_soil_sensor(&ADMUX, &ADCSRA);
 4aa:	6a e7       	ldi	r22, 0x7A	; 122
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	8c e7       	ldi	r24, 0x7C	; 124
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 76 03 	call	0x6ec	; 0x6ec <init_soil_sensor>
	 init_lcd();
 4b6:	0e 94 5b 05 	call	0xab6	; 0xab6 <init_lcd>
	 
	 servo_init(&DDRB, SERVO_PIN);
 4ba:	62 e0       	ldi	r22, 0x02	; 2
 4bc:	84 e2       	ldi	r24, 0x24	; 36
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 89 05 	call	0xb12	; 0xb12 <servo_init>
	 
	 // Enables interrupts by setting the global interrupt mask
	 sei();
 4c4:	78 94       	sei
 4c6:	08 95       	ret

000004c8 <updateLED>:
	GPIO_write_high(&PORTC, TEMPERATURE_LED);
}

void updateLED(uint16_t intensity, uint8_t treshold, uint8_t led){

	if (intensity < treshold){ // luminescence < 10.0
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	86 17       	cp	r24, r22
 4cc:	97 07       	cpc	r25, r23
 4ce:	58 f4       	brcc	.+22     	; 0x4e6 <updateLED+0x1e>
		PORTC = PORTC | (1<<led);
 4d0:	28 b1       	in	r18, 0x08	; 8
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <updateLED+0x14>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	4a 95       	dec	r20
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <updateLED+0x10>
 4e0:	82 2b       	or	r24, r18
 4e2:	88 b9       	out	0x08, r24	; 8
 4e4:	08 95       	ret
	}
	else {
		PORTC = PORTC & ~(1<<led);
 4e6:	28 b1       	in	r18, 0x08	; 8
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <updateLED+0x2a>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	4a 95       	dec	r20
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <updateLED+0x26>
 4f6:	80 95       	com	r24
 4f8:	82 23       	and	r24, r18
 4fa:	88 b9       	out	0x08, r24	; 8
 4fc:	08 95       	ret

000004fe <main>:
 * Returns:  none
 **********************************************************************/

int main(void)
{
	green_house_setup();
 4fe:	0e 94 4d 02 	call	0x49a	; 0x49a <green_house_setup>
	
	uint16_t previous_humidity = UINT16_MAX;
	uint16_t previous_temperature = UINT16_MAX;
	uint16_t previous_luminescence = UINT16_MAX;
 502:	0f ef       	ldi	r16, 0xFF	; 255
 504:	1f ef       	ldi	r17, 0xFF	; 255
int main(void)
{
	green_house_setup();
	
	uint16_t previous_humidity = UINT16_MAX;
	uint16_t previous_temperature = UINT16_MAX;
 506:	cc 24       	eor	r12, r12
 508:	ca 94       	dec	r12
 50a:	dc 2c       	mov	r13, r12

int main(void)
{
	green_house_setup();
	
	uint16_t previous_humidity = UINT16_MAX;
 50c:	ee 24       	eor	r14, r14
 50e:	ea 94       	dec	r14
 510:	fe 2c       	mov	r15, r14
	uint16_t previous_temperature = UINT16_MAX;
	uint16_t previous_luminescence = UINT16_MAX;
    // Infinite loop
    while (1)
    {
		if (humid_flag){
 512:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <humid_flag>
 516:	88 23       	and	r24, r24
 518:	91 f0       	breq	.+36     	; 0x53e <main+0x40>
			if (humidity != previous_humidity){
 51a:	c0 91 6a 01 	lds	r28, 0x016A	; 0x80016a <humidity>
 51e:	d0 91 6b 01 	lds	r29, 0x016B	; 0x80016b <humidity+0x1>
 522:	ec 16       	cp	r14, r28
 524:	fd 06       	cpc	r15, r29
 526:	49 f0       	breq	.+18     	; 0x53a <main+0x3c>
				previous_humidity = humidity;
				updateLED(luminescence, 400, PUMP_LED);
 528:	42 e0       	ldi	r20, 0x02	; 2
 52a:	60 e9       	ldi	r22, 0x90	; 144
 52c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <luminescence>
 530:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <luminescence+0x1>
 534:	0e 94 64 02 	call	0x4c8	; 0x4c8 <updateLED>
    // Infinite loop
    while (1)
    {
		if (humid_flag){
			if (humidity != previous_humidity){
				previous_humidity = humidity;
 538:	7e 01       	movw	r14, r28
				updateLED(luminescence, 400, PUMP_LED);
			}
			humid_flag = 0;
 53a:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <humid_flag>
		}
		if (temp_flag){
 53e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <temp_flag>
 542:	88 23       	and	r24, r24
 544:	91 f0       	breq	.+36     	; 0x56a <main+0x6c>
			if (temperature != previous_temperature){
 546:	c0 91 68 01 	lds	r28, 0x0168	; 0x800168 <temperature>
 54a:	d0 91 69 01 	lds	r29, 0x0169	; 0x800169 <temperature+0x1>
 54e:	cc 16       	cp	r12, r28
 550:	dd 06       	cpc	r13, r29
 552:	49 f0       	breq	.+18     	; 0x566 <main+0x68>
				previous_temperature = temperature;
				updateLED(luminescence, 200, TEMPERATURE_LED);
 554:	43 e0       	ldi	r20, 0x03	; 3
 556:	68 ec       	ldi	r22, 0xC8	; 200
 558:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <luminescence>
 55c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <luminescence+0x1>
 560:	0e 94 64 02 	call	0x4c8	; 0x4c8 <updateLED>
			}
			humid_flag = 0;
		}
		if (temp_flag){
			if (temperature != previous_temperature){
				previous_temperature = temperature;
 564:	6e 01       	movw	r12, r28
				updateLED(luminescence, 200, TEMPERATURE_LED);
			}
			temp_flag = 0;
 566:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <temp_flag>
		}
		if (luminescence_flag){
 56a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <luminescence_flag>
 56e:	88 23       	and	r24, r24
 570:	81 f2       	breq	.-96     	; 0x512 <main+0x14>
			if (luminescence != previous_luminescence){
 572:	c0 91 66 01 	lds	r28, 0x0166	; 0x800166 <luminescence>
 576:	d0 91 67 01 	lds	r29, 0x0167	; 0x800167 <luminescence+0x1>
 57a:	0c 17       	cp	r16, r28
 57c:	1d 07       	cpc	r17, r29
 57e:	a1 f0       	breq	.+40     	; 0x5a8 <main+0xaa>
				previous_luminescence = luminescence;
				if (luminescence < 300){
 580:	cc 32       	cpi	r28, 0x2C	; 44
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	d8 07       	cpc	r29, r24
 586:	30 f4       	brcc	.+12     	; 0x594 <main+0x96>
					updateLED(luminescence, 300, LIGHT_LED);	
 588:	44 e0       	ldi	r20, 0x04	; 4
 58a:	6c e2       	ldi	r22, 0x2C	; 44
 58c:	ce 01       	movw	r24, r28
 58e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <updateLED>
 592:	0b c0       	rjmp	.+22     	; 0x5aa <main+0xac>
				}
				else if (luminescence > 800){
 594:	c1 32       	cpi	r28, 0x21	; 33
 596:	83 e0       	ldi	r24, 0x03	; 3
 598:	d8 07       	cpc	r29, r24
 59a:	38 f0       	brcs	.+14     	; 0x5aa <main+0xac>
					servo_right(&PORTB, SERVO_PIN);
 59c:	62 e0       	ldi	r22, 0x02	; 2
 59e:	85 e2       	ldi	r24, 0x25	; 37
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 6d 05 	call	0xada	; 0xada <servo_right>
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <main+0xac>
 5a8:	e8 01       	movw	r28, r16
				}
			}
			luminescence_flag = 0;
 5aa:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <luminescence_flag>
 5ae:	8e 01       	movw	r16, r28
 5b0:	b0 cf       	rjmp	.-160    	; 0x512 <main+0x14>

000005b2 <__vector_13>:
 * Purpose:  Service routine for slow actions as sensors and ADC conversion.
 *           ADC conversion is performed every 262ms and every second
 *           temperature is being read from DHT12 and luminescence from BH1750.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 5b2:	1f 92       	push	r1
 5b4:	0f 92       	push	r0
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	0f 92       	push	r0
 5ba:	11 24       	eor	r1, r1
 5bc:	2f 93       	push	r18
 5be:	3f 93       	push	r19
 5c0:	4f 93       	push	r20
 5c2:	5f 93       	push	r21
 5c4:	6f 93       	push	r22
 5c6:	7f 93       	push	r23
 5c8:	8f 93       	push	r24
 5ca:	9f 93       	push	r25
 5cc:	af 93       	push	r26
 5ce:	bf 93       	push	r27
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31
	static iteration = 1;
	uint16_t result = 0;
	
	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 5d4:	ea e7       	ldi	r30, 0x7A	; 122
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	80 64       	ori	r24, 0x40	; 64
 5dc:	80 83       	st	Z, r24
	
	if (iteration == 4) {
 5de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5e6:	04 97       	sbiw	r24, 0x04	; 4
 5e8:	f1 f4       	brne	.+60     	; 0x626 <__vector_13+0x74>
		result = read_luminescence(&luminescence_flag);
 5ea:	83 e6       	ldi	r24, 0x63	; 99
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	0e 94 11 04 	call	0x822	; 0x822 <read_luminescence>
 5f2:	90 e0       	ldi	r25, 0x00	; 0
		
		if (luminescence_flag) {
 5f4:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <luminescence_flag>
 5f8:	22 23       	and	r18, r18
 5fa:	21 f0       	breq	.+8      	; 0x604 <__vector_13+0x52>
			luminescence = result;
 5fc:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <luminescence+0x1>
 600:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <luminescence>
		}
		
		//read DHT12
		result = read_temperature(&temp_flag);
 604:	85 e6       	ldi	r24, 0x65	; 101
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	0e 94 8b 03 	call	0x716	; 0x716 <read_temperature>
 60c:	90 e0       	ldi	r25, 0x00	; 0
		
		if (temp_flag) {
 60e:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <temp_flag>
 612:	22 23       	and	r18, r18
 614:	21 f0       	breq	.+8      	; 0x61e <__vector_13+0x6c>
			temperature = result;
 616:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <temperature+0x1>
 61a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <temperature>
		}
		
		iteration = 0;
 61e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 622:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	iteration++;
 626:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 62a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 634:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 638:	ff 91       	pop	r31
 63a:	ef 91       	pop	r30
 63c:	bf 91       	pop	r27
 63e:	af 91       	pop	r26
 640:	9f 91       	pop	r25
 642:	8f 91       	pop	r24
 644:	7f 91       	pop	r23
 646:	6f 91       	pop	r22
 648:	5f 91       	pop	r21
 64a:	4f 91       	pop	r20
 64c:	3f 91       	pop	r19
 64e:	2f 91       	pop	r18
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <__vector_16>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Service routine for fast actions. In this routine LCD display
 *           is refreshed and updated with new data from sensors every 16 ms
 **********************************************************************/
ISR(TIMER0_OVF_vect)
{
 65a:	1f 92       	push	r1
 65c:	0f 92       	push	r0
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	0f 92       	push	r0
 662:	11 24       	eor	r1, r1
 664:	2f 93       	push	r18
 666:	3f 93       	push	r19
 668:	4f 93       	push	r20
 66a:	5f 93       	push	r21
 66c:	6f 93       	push	r22
 66e:	7f 93       	push	r23
 670:	8f 93       	push	r24
 672:	9f 93       	push	r25
 674:	af 93       	push	r26
 676:	bf 93       	push	r27
 678:	ef 93       	push	r30
 67a:	ff 93       	push	r31
	lcd_update_menu(humidity, temperature, luminescence);
 67c:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <luminescence>
 680:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <luminescence+0x1>
 684:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <temperature>
 688:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <temperature+0x1>
 68c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <humidity>
 690:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <humidity+0x1>
 694:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_update_menu>
}
 698:	ff 91       	pop	r31
 69a:	ef 91       	pop	r30
 69c:	bf 91       	pop	r27
 69e:	af 91       	pop	r26
 6a0:	9f 91       	pop	r25
 6a2:	8f 91       	pop	r24
 6a4:	7f 91       	pop	r23
 6a6:	6f 91       	pop	r22
 6a8:	5f 91       	pop	r21
 6aa:	4f 91       	pop	r20
 6ac:	3f 91       	pop	r19
 6ae:	2f 91       	pop	r18
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <__vector_21>:
 *           Reads soil moisture and stores it to global variable.
 *           Humidity change flag is set.
 *           High adc value corresponds to dry soil and low value wet soil
 **********************************************************************/
ISR(ADC_vect)
{
 6ba:	1f 92       	push	r1
 6bc:	0f 92       	push	r0
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	0f 92       	push	r0
 6c2:	11 24       	eor	r1, r1
 6c4:	8f 93       	push	r24
 6c6:	9f 93       	push	r25
	humidity = ADCW;    // Copy ADC result to 16-bit variable	
 6c8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 6cc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 6d0:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <humidity+0x1>
 6d4:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <humidity>
	humid_flag = 1;
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <humid_flag>
 6de:	9f 91       	pop	r25
 6e0:	8f 91       	pop	r24
 6e2:	0f 90       	pop	r0
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	0f 90       	pop	r0
 6e8:	1f 90       	pop	r1
 6ea:	18 95       	reti

000006ec <init_soil_sensor>:
 *  Author: cerma
 */ 

#include "adc_sensors.h"

void init_soil_sensor(volatile uint8_t *admux_register, volatile uint8_t *adcsra_register){
 6ec:	dc 01       	movw	r26, r24
 6ee:	fb 01       	movw	r30, r22
	// Configure ADC to convert PC0[A0] analog value
	// Set ADC reference to AVcc
	*admux_register |= (1 << REFS0);
 6f0:	8c 91       	ld	r24, X
 6f2:	80 64       	ori	r24, 0x40	; 64
 6f4:	8c 93       	st	X, r24
	*admux_register &= ~(1 << REFS1);
 6f6:	8c 91       	ld	r24, X
 6f8:	8f 77       	andi	r24, 0x7F	; 127
 6fa:	8c 93       	st	X, r24
	// Set input channel to ADC0
	*admux_register &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3));
 6fc:	8c 91       	ld	r24, X
 6fe:	80 7f       	andi	r24, 0xF0	; 240
 700:	8c 93       	st	X, r24
	// Enable ADC module
	*adcsra_register |= (1 << ADEN);
 702:	80 81       	ld	r24, Z
 704:	80 68       	ori	r24, 0x80	; 128
 706:	80 83       	st	Z, r24
	// Enable conversion complete interrupt
	*adcsra_register |= (1 << ADIE);
 708:	80 81       	ld	r24, Z
 70a:	88 60       	ori	r24, 0x08	; 8
 70c:	80 83       	st	Z, r24
	// Set clock prescaler to 128
	*adcsra_register |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 70e:	80 81       	ld	r24, Z
 710:	87 60       	ori	r24, 0x07	; 7
 712:	80 83       	st	Z, r24
 714:	08 95       	ret

00000716 <read_temperature>:
 *  Author: cerma
 */ 
#include "i2c_sensors.h"

uint8_t read_temperature(volatile uint8_t *temp_flag)
{
 716:	df 92       	push	r13
 718:	ef 92       	push	r14
 71a:	ff 92       	push	r15
 71c:	0f 93       	push	r16
 71e:	1f 93       	push	r17
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
 724:	8c 01       	movw	r16, r24
	*temp_flag = 0;
 726:	fc 01       	movw	r30, r24
 728:	10 82       	st	Z, r1
	uint8_t temperature_integral = 0;
	uint8_t temperature_scale = 0;
	
	uint8_t checksum = 0;
	
	uint8_t res = twi_start((addr << 1) + TWI_WRITE);
 72a:	88 eb       	ldi	r24, 0xB8	; 184
 72c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
	
	if (res == 1){
 730:	81 30       	cpi	r24, 0x01	; 1
 732:	21 f4       	brne	.+8      	; 0x73c <read_temperature+0x26>
		twi_stop();
 734:	0e 94 b7 01 	call	0x36e	; 0x36e <twi_stop>
		return 0;
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	31 c0       	rjmp	.+98     	; 0x79e <read_temperature+0x88>
	}
	
	twi_write(0x00);
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	0e 94 99 01 	call	0x332	; 0x332 <twi_write>
	
	twi_start((addr << 1) + TWI_READ);
 742:	89 eb       	ldi	r24, 0xB9	; 185
 744:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
	
	//tohle zahazuju
	humid_integral = twi_read_ack();    // get fraction part
 748:	0e 94 a3 01 	call	0x346	; 0x346 <twi_read_ack>
 74c:	d8 2e       	mov	r13, r24
	humid_scale = twi_read_ack();			// get scale part
 74e:	0e 94 a3 01 	call	0x346	; 0x346 <twi_read_ack>
 752:	c8 2f       	mov	r28, r24
	
	temperature_integral = twi_read_ack();    // get fraction part
 754:	0e 94 a3 01 	call	0x346	; 0x346 <twi_read_ack>
 758:	d8 2f       	mov	r29, r24
	temperature_scale = twi_read_ack();			// get scale part
 75a:	0e 94 a3 01 	call	0x346	; 0x346 <twi_read_ack>
 75e:	f8 2e       	mov	r15, r24

	checksum = twi_read_nack();			// get scale part
 760:	0e 94 ad 01 	call	0x35a	; 0x35a <twi_read_nack>
 764:	e8 2e       	mov	r14, r24
	twi_stop();
 766:	0e 94 b7 01 	call	0x36e	; 0x36e <twi_stop>
	
	if (checksum == (humid_integral + humid_scale + temperature_integral + temperature_scale)) {
 76a:	8e 2d       	mov	r24, r14
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	2c 2f       	mov	r18, r28
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	2d 0d       	add	r18, r13
 774:	31 1d       	adc	r19, r1
 776:	2d 0f       	add	r18, r29
 778:	31 1d       	adc	r19, r1
 77a:	2f 0d       	add	r18, r15
 77c:	31 1d       	adc	r19, r1
 77e:	82 17       	cp	r24, r18
 780:	93 07       	cpc	r25, r19
 782:	21 f4       	brne	.+8      	; 0x78c <read_temperature+0x76>
		*temp_flag = 1;
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	f8 01       	movw	r30, r16
 788:	80 83       	st	Z, r24
 78a:	02 c0       	rjmp	.+4      	; 0x790 <read_temperature+0x7a>
	}
	else {
		*temp_flag = 0; // error while reading from DHT12
 78c:	f8 01       	movw	r30, r16
 78e:	10 82       	st	Z, r1
	}
	
	return (uint16_t)temperature_integral * 10 + (uint16_t)temperature_scale;	// 25.5 °C -> 255
 790:	dd 0f       	add	r29, r29
 792:	8d 2f       	mov	r24, r29
 794:	88 0f       	add	r24, r24
 796:	88 0f       	add	r24, r24
 798:	d8 0f       	add	r29, r24
 79a:	8d 2f       	mov	r24, r29
 79c:	8f 0d       	add	r24, r15
}
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	1f 91       	pop	r17
 7a4:	0f 91       	pop	r16
 7a6:	ff 90       	pop	r15
 7a8:	ef 90       	pop	r14
 7aa:	df 90       	pop	r13
 7ac:	08 95       	ret

000007ae <get_lux>:
/************************************************************************
 * Function: getCorrect lux value from data							*
 * Purpose:  data needs to be shifted, last bit is 2^-1 (+5). Value is 10 times higher.
/************************************************************************/
uint16_t get_lux(uint16_t data){
	if (data & 1){
 7ae:	80 ff       	sbrs	r24, 0
 7b0:	1d c0       	rjmp	.+58     	; 0x7ec <get_lux+0x3e>
		return (((data >> 1) * 10) + 5) / 1.2;
 7b2:	96 95       	lsr	r25
 7b4:	87 95       	ror	r24
 7b6:	bc 01       	movw	r22, r24
 7b8:	66 0f       	add	r22, r22
 7ba:	77 1f       	adc	r23, r23
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	68 0f       	add	r22, r24
 7ca:	79 1f       	adc	r23, r25
 7cc:	6b 5f       	subi	r22, 0xFB	; 251
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
 7d8:	2a e9       	ldi	r18, 0x9A	; 154
 7da:	39 e9       	ldi	r19, 0x99	; 153
 7dc:	49 e9       	ldi	r20, 0x99	; 153
 7de:	5f e3       	ldi	r21, 0x3F	; 63
 7e0:	0e 94 8c 05 	call	0xb18	; 0xb18 <__divsf3>
 7e4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fixunssfsi>
 7e8:	cb 01       	movw	r24, r22
 7ea:	08 95       	ret
	} else {
		return ((data >> 1) * 10) / 1.2; 	
 7ec:	96 95       	lsr	r25
 7ee:	87 95       	ror	r24
 7f0:	bc 01       	movw	r22, r24
 7f2:	66 0f       	add	r22, r22
 7f4:	77 1f       	adc	r23, r23
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	68 0f       	add	r22, r24
 804:	79 1f       	adc	r23, r25
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
 80e:	2a e9       	ldi	r18, 0x9A	; 154
 810:	39 e9       	ldi	r19, 0x99	; 153
 812:	49 e9       	ldi	r20, 0x99	; 153
 814:	5f e3       	ldi	r21, 0x3F	; 63
 816:	0e 94 8c 05 	call	0xb18	; 0xb18 <__divsf3>
 81a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fixunssfsi>
 81e:	cb 01       	movw	r24, r22
	}
}
 820:	08 95       	ret

00000822 <read_luminescence>:

// read data from BH1750 light sensor
uint8_t read_luminescence(volatile uint8_t *luminescence_flag){	//manual str.12
 822:	0f 93       	push	r16
 824:	1f 93       	push	r17
 826:	cf 93       	push	r28
 828:	df 93       	push	r29
 82a:	ec 01       	movw	r28, r24
	
	*luminescence_flag = 0;
 82c:	18 82       	st	Y, r1
	//uint8_t addr = 0x5C;			// ADDR ? 0.7VCC -> H
	uint8_t addr = 0x23;			// ADDR ? 0.3VCC -> L
	uint16_t data = -1;

	// FSM
	switch (state)
 82e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <state.1637>
 832:	88 23       	and	r24, r24
 834:	19 f0       	breq	.+6      	; 0x83c <read_luminescence+0x1a>
 836:	81 30       	cpi	r24, 0x01	; 1
 838:	71 f0       	breq	.+28     	; 0x856 <read_luminescence+0x34>
 83a:	22 c0       	rjmp	.+68     	; 0x880 <read_luminescence+0x5e>
	{
		case BH_STATE_WRITE:
			twi_start((addr<<1) + TWI_WRITE);
 83c:	86 e4       	ldi	r24, 0x46	; 70
 83e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
			twi_write(0b00010001);
 842:	81 e1       	ldi	r24, 0x11	; 17
 844:	0e 94 99 01 	call	0x332	; 0x332 <twi_write>
			twi_stop();
 848:	0e 94 b7 01 	call	0x36e	; 0x36e <twi_stop>
			
			state = BH_STATE_READ;
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <state.1637>
			//uart_puts("T1 reading error"); // nastavit error flag?
			state = BH_STATE_WRITE;
		break;
	}
	
	return -1;
 852:	8f ef       	ldi	r24, 0xFF	; 255
			twi_start((addr<<1) + TWI_WRITE);
			twi_write(0b00010001);
			twi_stop();
			
			state = BH_STATE_READ;
		break;
 854:	18 c0       	rjmp	.+48     	; 0x886 <read_luminescence+0x64>
		case BH_STATE_READ:
			twi_start((addr<<1) + TWI_READ);			
 856:	87 e4       	ldi	r24, 0x47	; 71
 858:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
			data = twi_read_ack() >> 8;
 85c:	0e 94 a3 01 	call	0x346	; 0x346 <twi_read_ack>
 860:	00 e0       	ldi	r16, 0x00	; 0
 862:	10 e0       	ldi	r17, 0x00	; 0
			data += twi_read_nack();			
 864:	0e 94 ad 01 	call	0x35a	; 0x35a <twi_read_nack>
 868:	08 0f       	add	r16, r24
 86a:	11 1d       	adc	r17, r1
			twi_stop();
 86c:	0e 94 b7 01 	call	0x36e	; 0x36e <twi_stop>
			
			*luminescence_flag = 1;
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	88 83       	st	Y, r24
			state = BH_STATE_WRITE;
 874:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <state.1637>
			
			return get_lux(data);
 878:	c8 01       	movw	r24, r16
 87a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <get_lux>
 87e:	03 c0       	rjmp	.+6      	; 0x886 <read_luminescence+0x64>
		break;
		default:
			//uart_puts("T1 reading error"); // nastavit error flag?
			state = BH_STATE_WRITE;
 880:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <state.1637>
		break;
	}
	
	return -1;
 884:	8f ef       	ldi	r24, 0xFF	; 255
 886:	df 91       	pop	r29
 888:	cf 91       	pop	r28
 88a:	1f 91       	pop	r17
 88c:	0f 91       	pop	r16
 88e:	08 95       	ret

00000890 <lcd_fill_whitespace>:
 *  Author: cerma
 */ 

#include "output_peripherals.h"

void lcd_fill_whitespace(uint8_t length){
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	d8 2f       	mov	r29, r24
	for (uint8_t i = 0; i < length; i++){
 896:	c0 e0       	ldi	r28, 0x00	; 0
 898:	04 c0       	rjmp	.+8      	; 0x8a2 <lcd_fill_whitespace+0x12>
		lcd_putc(' ');
 89a:	80 e2       	ldi	r24, 0x20	; 32
 89c:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
 */ 

#include "output_peripherals.h"

void lcd_fill_whitespace(uint8_t length){
	for (uint8_t i = 0; i < length; i++){
 8a0:	cf 5f       	subi	r28, 0xFF	; 255
 8a2:	cd 17       	cp	r28, r29
 8a4:	d0 f3       	brcs	.-12     	; 0x89a <lcd_fill_whitespace+0xa>
		lcd_putc(' ');
	}
}
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	08 95       	ret

000008ac <lcd_update_menu>:
	
	lcd_update_menu(0,0,0);
}

//predelat na itoa
void lcd_update_menu(uint16_t humidity, uint16_t temperature, uint16_t luminescence){
 8ac:	6f 92       	push	r6
 8ae:	7f 92       	push	r7
 8b0:	8f 92       	push	r8
 8b2:	9f 92       	push	r9
 8b4:	af 92       	push	r10
 8b6:	bf 92       	push	r11
 8b8:	cf 92       	push	r12
 8ba:	df 92       	push	r13
 8bc:	ef 92       	push	r14
 8be:	ff 92       	push	r15
 8c0:	0f 93       	push	r16
 8c2:	1f 93       	push	r17
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	cd b7       	in	r28, 0x3d	; 61
 8ca:	de b7       	in	r29, 0x3e	; 62
 8cc:	62 97       	sbiw	r28, 0x12	; 18
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	f8 94       	cli
 8d2:	de bf       	out	0x3e, r29	; 62
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	cd bf       	out	0x3d, r28	; 61
 8d8:	4c 01       	movw	r8, r24
 8da:	5b 01       	movw	r10, r22
 8dc:	6a 01       	movw	r12, r20
	char lcd_string[] = "00000000000000000";
 8de:	82 e1       	ldi	r24, 0x12	; 18
 8e0:	eb e0       	ldi	r30, 0x0B	; 11
 8e2:	f1 e0       	ldi	r31, 0x01	; 1
 8e4:	8e 01       	movw	r16, r28
 8e6:	0f 5f       	subi	r16, 0xFF	; 255
 8e8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ea:	d8 01       	movw	r26, r16
 8ec:	01 90       	ld	r0, Z+
 8ee:	0d 92       	st	X+, r0
 8f0:	8a 95       	dec	r24
 8f2:	e1 f7       	brne	.-8      	; 0x8ec <lcd_update_menu+0x40>
	uint8_t digits_length = 0;
	
	lcd_gotoxy(0, 0);
 8f4:	60 e0       	ldi	r22, 0x00	; 0
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_gotoxy>
	lcd_puts("H:");
 8fc:	82 e0       	ldi	r24, 0x02	; 2
 8fe:	91 e0       	ldi	r25, 0x01	; 1
 900:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	//sprintf (lcd_string, "H:%d,%d  ", humidity / 10, humidity % 10);
	itoa(humidity / 10,lcd_string,10);
 904:	94 01       	movw	r18, r8
 906:	ad ec       	ldi	r26, 0xCD	; 205
 908:	bc ec       	ldi	r27, 0xCC	; 204
 90a:	0e 94 bb 06 	call	0xd76	; 0xd76 <__umulhisi3>
 90e:	7c 01       	movw	r14, r24
 910:	f6 94       	lsr	r15
 912:	e7 94       	ror	r14
 914:	f6 94       	lsr	r15
 916:	e7 94       	ror	r14
 918:	f6 94       	lsr	r15
 91a:	e7 94       	ror	r14
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 91c:	4a e0       	ldi	r20, 0x0A	; 10
 91e:	b8 01       	movw	r22, r16
 920:	c7 01       	movw	r24, r14
 922:	0e 94 ca 06 	call	0xd94	; 0xd94 <__itoa_ncheck>
	digits_length += strlen(lcd_string);
 926:	f8 01       	movw	r30, r16
 928:	01 90       	ld	r0, Z+
 92a:	00 20       	and	r0, r0
 92c:	e9 f7       	brne	.-6      	; 0x928 <__stack+0x29>
 92e:	31 97       	sbiw	r30, 0x01	; 1
 930:	3f 01       	movw	r6, r30
 932:	60 1a       	sub	r6, r16
 934:	71 0a       	sbc	r7, r17
	lcd_puts(lcd_string);
 936:	c8 01       	movw	r24, r16
 938:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	lcd_putc(',');
 93c:	8c e2       	ldi	r24, 0x2C	; 44
 93e:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
	itoa(humidity % 10,lcd_string,10);
 942:	c7 01       	movw	r24, r14
 944:	88 0f       	add	r24, r24
 946:	99 1f       	adc	r25, r25
 948:	ee 0c       	add	r14, r14
 94a:	ff 1c       	adc	r15, r15
 94c:	ee 0c       	add	r14, r14
 94e:	ff 1c       	adc	r15, r15
 950:	ee 0c       	add	r14, r14
 952:	ff 1c       	adc	r15, r15
 954:	e8 0e       	add	r14, r24
 956:	f9 1e       	adc	r15, r25
 958:	4a e0       	ldi	r20, 0x0A	; 10
 95a:	b8 01       	movw	r22, r16
 95c:	c4 01       	movw	r24, r8
 95e:	8e 19       	sub	r24, r14
 960:	9f 09       	sbc	r25, r15
 962:	0e 94 ca 06 	call	0xd94	; 0xd94 <__itoa_ncheck>
	lcd_puts(lcd_string);
 966:	c8 01       	movw	r24, r16
 968:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	lcd_fill_whitespace(7 - digits_length);
 96c:	0f 2e       	mov	r0, r31
 96e:	f7 e0       	ldi	r31, 0x07	; 7
 970:	9f 2e       	mov	r9, r31
 972:	f0 2d       	mov	r31, r0
 974:	89 2d       	mov	r24, r9
 976:	86 19       	sub	r24, r6
 978:	0e 94 48 04 	call	0x890	; 0x890 <lcd_fill_whitespace>
	
	digits_length = 0;
	lcd_gotoxy(9, 0);
 97c:	60 e0       	ldi	r22, 0x00	; 0
 97e:	89 e0       	ldi	r24, 0x09	; 9
 980:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_gotoxy>
	lcd_puts("T:");
 984:	85 e0       	ldi	r24, 0x05	; 5
 986:	91 e0       	ldi	r25, 0x01	; 1
 988:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	//sprintf (lcd_string, "T:%d,%d  ", temperature / 10, temperature % 10);
	itoa(temperature / 10,lcd_string,10);
 98c:	95 01       	movw	r18, r10
 98e:	ad ec       	ldi	r26, 0xCD	; 205
 990:	bc ec       	ldi	r27, 0xCC	; 204
 992:	0e 94 bb 06 	call	0xd76	; 0xd76 <__umulhisi3>
 996:	3c 01       	movw	r6, r24
 998:	76 94       	lsr	r7
 99a:	67 94       	ror	r6
 99c:	76 94       	lsr	r7
 99e:	67 94       	ror	r6
 9a0:	76 94       	lsr	r7
 9a2:	67 94       	ror	r6
 9a4:	4a e0       	ldi	r20, 0x0A	; 10
 9a6:	b8 01       	movw	r22, r16
 9a8:	c3 01       	movw	r24, r6
 9aa:	0e 94 ca 06 	call	0xd94	; 0xd94 <__itoa_ncheck>
	digits_length += strlen(lcd_string);
 9ae:	f8 01       	movw	r30, r16
 9b0:	01 90       	ld	r0, Z+
 9b2:	00 20       	and	r0, r0
 9b4:	e9 f7       	brne	.-6      	; 0x9b0 <__stack+0xb1>
 9b6:	31 97       	sbiw	r30, 0x01	; 1
 9b8:	7f 01       	movw	r14, r30
 9ba:	e0 1a       	sub	r14, r16
 9bc:	f1 0a       	sbc	r15, r17
	lcd_puts(lcd_string);
 9be:	c8 01       	movw	r24, r16
 9c0:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	lcd_putc(',');
 9c4:	8c e2       	ldi	r24, 0x2C	; 44
 9c6:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
	itoa(temperature % 10,lcd_string,10);
 9ca:	c3 01       	movw	r24, r6
 9cc:	88 0f       	add	r24, r24
 9ce:	99 1f       	adc	r25, r25
 9d0:	66 0c       	add	r6, r6
 9d2:	77 1c       	adc	r7, r7
 9d4:	66 0c       	add	r6, r6
 9d6:	77 1c       	adc	r7, r7
 9d8:	66 0c       	add	r6, r6
 9da:	77 1c       	adc	r7, r7
 9dc:	68 0e       	add	r6, r24
 9de:	79 1e       	adc	r7, r25
 9e0:	4a e0       	ldi	r20, 0x0A	; 10
 9e2:	b8 01       	movw	r22, r16
 9e4:	c5 01       	movw	r24, r10
 9e6:	86 19       	sub	r24, r6
 9e8:	97 09       	sbc	r25, r7
 9ea:	0e 94 ca 06 	call	0xd94	; 0xd94 <__itoa_ncheck>
	digits_length += strlen(lcd_string);
 9ee:	f8 01       	movw	r30, r16
 9f0:	01 90       	ld	r0, Z+
 9f2:	00 20       	and	r0, r0
 9f4:	e9 f7       	brne	.-6      	; 0x9f0 <__stack+0xf1>
 9f6:	31 97       	sbiw	r30, 0x01	; 1
 9f8:	e0 1b       	sub	r30, r16
 9fa:	f1 0b       	sbc	r31, r17
 9fc:	ee 0e       	add	r14, r30
	lcd_puts(lcd_string);
 9fe:	c8 01       	movw	r24, r16
 a00:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	lcd_fill_whitespace(4 - digits_length);
 a04:	84 e0       	ldi	r24, 0x04	; 4
 a06:	8e 19       	sub	r24, r14
 a08:	0e 94 48 04 	call	0x890	; 0x890 <lcd_fill_whitespace>
	
	digits_length = 0;
	lcd_gotoxy(0, 1);
 a0c:	61 e0       	ldi	r22, 0x01	; 1
 a0e:	80 e0       	ldi	r24, 0x00	; 0
 a10:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_gotoxy>
	lcd_puts("L:");
 a14:	88 e0       	ldi	r24, 0x08	; 8
 a16:	91 e0       	ldi	r25, 0x01	; 1
 a18:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	//sprintf (lcd_string, "L:%d,%d  ", luminescence / 10, luminescence % 10);
	itoa(luminescence / 10,lcd_string,10);
 a1c:	96 01       	movw	r18, r12
 a1e:	ad ec       	ldi	r26, 0xCD	; 205
 a20:	bc ec       	ldi	r27, 0xCC	; 204
 a22:	0e 94 bb 06 	call	0xd76	; 0xd76 <__umulhisi3>
 a26:	7c 01       	movw	r14, r24
 a28:	f6 94       	lsr	r15
 a2a:	e7 94       	ror	r14
 a2c:	f6 94       	lsr	r15
 a2e:	e7 94       	ror	r14
 a30:	f6 94       	lsr	r15
 a32:	e7 94       	ror	r14
 a34:	4a e0       	ldi	r20, 0x0A	; 10
 a36:	b8 01       	movw	r22, r16
 a38:	c7 01       	movw	r24, r14
 a3a:	0e 94 ca 06 	call	0xd94	; 0xd94 <__itoa_ncheck>
	digits_length += strlen(lcd_string);
 a3e:	f8 01       	movw	r30, r16
 a40:	01 90       	ld	r0, Z+
 a42:	00 20       	and	r0, r0
 a44:	e9 f7       	brne	.-6      	; 0xa40 <__stack+0x141>
 a46:	31 97       	sbiw	r30, 0x01	; 1
 a48:	5f 01       	movw	r10, r30
 a4a:	a0 1a       	sub	r10, r16
 a4c:	b1 0a       	sbc	r11, r17
	lcd_puts(lcd_string);
 a4e:	c8 01       	movw	r24, r16
 a50:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	lcd_putc(',');
 a54:	8c e2       	ldi	r24, 0x2C	; 44
 a56:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
	itoa(luminescence % 10,lcd_string,10);
 a5a:	c7 01       	movw	r24, r14
 a5c:	88 0f       	add	r24, r24
 a5e:	99 1f       	adc	r25, r25
 a60:	ee 0c       	add	r14, r14
 a62:	ff 1c       	adc	r15, r15
 a64:	ee 0c       	add	r14, r14
 a66:	ff 1c       	adc	r15, r15
 a68:	ee 0c       	add	r14, r14
 a6a:	ff 1c       	adc	r15, r15
 a6c:	e8 0e       	add	r14, r24
 a6e:	f9 1e       	adc	r15, r25
 a70:	4a e0       	ldi	r20, 0x0A	; 10
 a72:	b8 01       	movw	r22, r16
 a74:	c6 01       	movw	r24, r12
 a76:	8e 19       	sub	r24, r14
 a78:	9f 09       	sbc	r25, r15
 a7a:	0e 94 ca 06 	call	0xd94	; 0xd94 <__itoa_ncheck>
	lcd_puts(lcd_string);
 a7e:	c8 01       	movw	r24, r16
 a80:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	lcd_fill_whitespace(7 - digits_length);
 a84:	89 2d       	mov	r24, r9
 a86:	8a 19       	sub	r24, r10
 a88:	0e 94 48 04 	call	0x890	; 0x890 <lcd_fill_whitespace>
}
 a8c:	62 96       	adiw	r28, 0x12	; 18
 a8e:	0f b6       	in	r0, 0x3f	; 63
 a90:	f8 94       	cli
 a92:	de bf       	out	0x3e, r29	; 62
 a94:	0f be       	out	0x3f, r0	; 63
 a96:	cd bf       	out	0x3d, r28	; 61
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	1f 91       	pop	r17
 a9e:	0f 91       	pop	r16
 aa0:	ff 90       	pop	r15
 aa2:	ef 90       	pop	r14
 aa4:	df 90       	pop	r13
 aa6:	cf 90       	pop	r12
 aa8:	bf 90       	pop	r11
 aaa:	af 90       	pop	r10
 aac:	9f 90       	pop	r9
 aae:	8f 90       	pop	r8
 ab0:	7f 90       	pop	r7
 ab2:	6f 90       	pop	r6
 ab4:	08 95       	ret

00000ab6 <init_lcd>:
	}
}

void init_lcd(){
	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
 ab6:	8c e0       	ldi	r24, 0x0C	; 12
 ab8:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_init>

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 abc:	80 e4       	ldi	r24, 0x40	; 64
 abe:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
	lcd_command(1 << LCD_DDRAM);
 ac2:	80 e8       	ldi	r24, 0x80	; 128
 ac4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
	
	lcd_update_menu(0,0,0);
 ac8:	40 e0       	ldi	r20, 0x00	; 0
 aca:	50 e0       	ldi	r21, 0x00	; 0
 acc:	60 e0       	ldi	r22, 0x00	; 0
 ace:	70 e0       	ldi	r23, 0x00	; 0
 ad0:	80 e0       	ldi	r24, 0x00	; 0
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_update_menu>
 ad8:	08 95       	ret

00000ada <servo_right>:
 *           in ratio 2,4ms (high) : 17,6ms (low)
 * Input:    reg_name - Address of servos Port register, such as &PORTB
 *           servo_pin - Pin to which servo is connected
 * Returns:  none
 **********************************************************************/
void servo_right(volatile uint8_t *reg_name, uint8_t servo_pin){
 ada:	cf 93       	push	r28
 adc:	c6 2f       	mov	r28, r22
	GPIO_write_high(&PORTB, servo_pin);
 ade:	85 e2       	ldi	r24, 0x25	; 37
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 ae6:	87 e5       	ldi	r24, 0x57	; 87
 ae8:	92 e0       	ldi	r25, 0x02	; 2
 aea:	01 97       	sbiw	r24, 0x01	; 1
 aec:	f1 f7       	brne	.-4      	; 0xaea <servo_right+0x10>
 aee:	00 c0       	rjmp	.+0      	; 0xaf0 <servo_right+0x16>
 af0:	00 00       	nop
	_delay_us(2400);
	GPIO_write_low(&PORTB, servo_pin);
 af2:	6c 2f       	mov	r22, r28
 af4:	85 e2       	ldi	r24, 0x25	; 37
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 afc:	98 ec       	ldi	r25, 0xC8	; 200
 afe:	9a 95       	dec	r25
 b00:	f1 f7       	brne	.-4      	; 0xafe <servo_right+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b02:	89 e9       	ldi	r24, 0x99	; 153
 b04:	90 e1       	ldi	r25, 0x10	; 16
 b06:	01 97       	sbiw	r24, 0x01	; 1
 b08:	f1 f7       	brne	.-4      	; 0xb06 <servo_right+0x2c>
 b0a:	00 c0       	rjmp	.+0      	; 0xb0c <servo_right+0x32>
 b0c:	00 00       	nop
	_delay_us(600);
	_delay_ms(17);
};
 b0e:	cf 91       	pop	r28
 b10:	08 95       	ret

00000b12 <servo_init>:
 * Input:    reg_name - Address of Data Direction Register, such as &DDRB
 *           servo_pin - Pin to which servo is connected
 * Returns:  none
 **********************************************************************/
void servo_init(volatile uint8_t *reg_name, uint8_t servo_pin){
	GPIO_config_output(reg_name, servo_pin);	
 b12:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 b16:	08 95       	ret

00000b18 <__divsf3>:
 b18:	0e 94 a0 05 	call	0xb40	; 0xb40 <__divsf3x>
 b1c:	0c 94 81 06 	jmp	0xd02	; 0xd02 <__fp_round>
 b20:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_pscB>
 b24:	58 f0       	brcs	.+22     	; 0xb3c <__divsf3+0x24>
 b26:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_pscA>
 b2a:	40 f0       	brcs	.+16     	; 0xb3c <__divsf3+0x24>
 b2c:	29 f4       	brne	.+10     	; 0xb38 <__divsf3+0x20>
 b2e:	5f 3f       	cpi	r21, 0xFF	; 255
 b30:	29 f0       	breq	.+10     	; 0xb3c <__divsf3+0x24>
 b32:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_inf>
 b36:	51 11       	cpse	r21, r1
 b38:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_szero>
 b3c:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_nan>

00000b40 <__divsf3x>:
 b40:	0e 94 92 06 	call	0xd24	; 0xd24 <__fp_split3>
 b44:	68 f3       	brcs	.-38     	; 0xb20 <__divsf3+0x8>

00000b46 <__divsf3_pse>:
 b46:	99 23       	and	r25, r25
 b48:	b1 f3       	breq	.-20     	; 0xb36 <__divsf3+0x1e>
 b4a:	55 23       	and	r21, r21
 b4c:	91 f3       	breq	.-28     	; 0xb32 <__divsf3+0x1a>
 b4e:	95 1b       	sub	r25, r21
 b50:	55 0b       	sbc	r21, r21
 b52:	bb 27       	eor	r27, r27
 b54:	aa 27       	eor	r26, r26
 b56:	62 17       	cp	r22, r18
 b58:	73 07       	cpc	r23, r19
 b5a:	84 07       	cpc	r24, r20
 b5c:	38 f0       	brcs	.+14     	; 0xb6c <__divsf3_pse+0x26>
 b5e:	9f 5f       	subi	r25, 0xFF	; 255
 b60:	5f 4f       	sbci	r21, 0xFF	; 255
 b62:	22 0f       	add	r18, r18
 b64:	33 1f       	adc	r19, r19
 b66:	44 1f       	adc	r20, r20
 b68:	aa 1f       	adc	r26, r26
 b6a:	a9 f3       	breq	.-22     	; 0xb56 <__divsf3_pse+0x10>
 b6c:	35 d0       	rcall	.+106    	; 0xbd8 <__divsf3_pse+0x92>
 b6e:	0e 2e       	mov	r0, r30
 b70:	3a f0       	brmi	.+14     	; 0xb80 <__divsf3_pse+0x3a>
 b72:	e0 e8       	ldi	r30, 0x80	; 128
 b74:	32 d0       	rcall	.+100    	; 0xbda <__divsf3_pse+0x94>
 b76:	91 50       	subi	r25, 0x01	; 1
 b78:	50 40       	sbci	r21, 0x00	; 0
 b7a:	e6 95       	lsr	r30
 b7c:	00 1c       	adc	r0, r0
 b7e:	ca f7       	brpl	.-14     	; 0xb72 <__divsf3_pse+0x2c>
 b80:	2b d0       	rcall	.+86     	; 0xbd8 <__divsf3_pse+0x92>
 b82:	fe 2f       	mov	r31, r30
 b84:	29 d0       	rcall	.+82     	; 0xbd8 <__divsf3_pse+0x92>
 b86:	66 0f       	add	r22, r22
 b88:	77 1f       	adc	r23, r23
 b8a:	88 1f       	adc	r24, r24
 b8c:	bb 1f       	adc	r27, r27
 b8e:	26 17       	cp	r18, r22
 b90:	37 07       	cpc	r19, r23
 b92:	48 07       	cpc	r20, r24
 b94:	ab 07       	cpc	r26, r27
 b96:	b0 e8       	ldi	r27, 0x80	; 128
 b98:	09 f0       	breq	.+2      	; 0xb9c <__divsf3_pse+0x56>
 b9a:	bb 0b       	sbc	r27, r27
 b9c:	80 2d       	mov	r24, r0
 b9e:	bf 01       	movw	r22, r30
 ba0:	ff 27       	eor	r31, r31
 ba2:	93 58       	subi	r25, 0x83	; 131
 ba4:	5f 4f       	sbci	r21, 0xFF	; 255
 ba6:	3a f0       	brmi	.+14     	; 0xbb6 <__divsf3_pse+0x70>
 ba8:	9e 3f       	cpi	r25, 0xFE	; 254
 baa:	51 05       	cpc	r21, r1
 bac:	78 f0       	brcs	.+30     	; 0xbcc <__divsf3_pse+0x86>
 bae:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_inf>
 bb2:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_szero>
 bb6:	5f 3f       	cpi	r21, 0xFF	; 255
 bb8:	e4 f3       	brlt	.-8      	; 0xbb2 <__divsf3_pse+0x6c>
 bba:	98 3e       	cpi	r25, 0xE8	; 232
 bbc:	d4 f3       	brlt	.-12     	; 0xbb2 <__divsf3_pse+0x6c>
 bbe:	86 95       	lsr	r24
 bc0:	77 95       	ror	r23
 bc2:	67 95       	ror	r22
 bc4:	b7 95       	ror	r27
 bc6:	f7 95       	ror	r31
 bc8:	9f 5f       	subi	r25, 0xFF	; 255
 bca:	c9 f7       	brne	.-14     	; 0xbbe <__divsf3_pse+0x78>
 bcc:	88 0f       	add	r24, r24
 bce:	91 1d       	adc	r25, r1
 bd0:	96 95       	lsr	r25
 bd2:	87 95       	ror	r24
 bd4:	97 f9       	bld	r25, 7
 bd6:	08 95       	ret
 bd8:	e1 e0       	ldi	r30, 0x01	; 1
 bda:	66 0f       	add	r22, r22
 bdc:	77 1f       	adc	r23, r23
 bde:	88 1f       	adc	r24, r24
 be0:	bb 1f       	adc	r27, r27
 be2:	62 17       	cp	r22, r18
 be4:	73 07       	cpc	r23, r19
 be6:	84 07       	cpc	r24, r20
 be8:	ba 07       	cpc	r27, r26
 bea:	20 f0       	brcs	.+8      	; 0xbf4 <__divsf3_pse+0xae>
 bec:	62 1b       	sub	r22, r18
 bee:	73 0b       	sbc	r23, r19
 bf0:	84 0b       	sbc	r24, r20
 bf2:	ba 0b       	sbc	r27, r26
 bf4:	ee 1f       	adc	r30, r30
 bf6:	88 f7       	brcc	.-30     	; 0xbda <__divsf3_pse+0x94>
 bf8:	e0 95       	com	r30
 bfa:	08 95       	ret

00000bfc <__fixunssfsi>:
 bfc:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_splitA>
 c00:	88 f0       	brcs	.+34     	; 0xc24 <__fixunssfsi+0x28>
 c02:	9f 57       	subi	r25, 0x7F	; 127
 c04:	98 f0       	brcs	.+38     	; 0xc2c <__fixunssfsi+0x30>
 c06:	b9 2f       	mov	r27, r25
 c08:	99 27       	eor	r25, r25
 c0a:	b7 51       	subi	r27, 0x17	; 23
 c0c:	b0 f0       	brcs	.+44     	; 0xc3a <__fixunssfsi+0x3e>
 c0e:	e1 f0       	breq	.+56     	; 0xc48 <__fixunssfsi+0x4c>
 c10:	66 0f       	add	r22, r22
 c12:	77 1f       	adc	r23, r23
 c14:	88 1f       	adc	r24, r24
 c16:	99 1f       	adc	r25, r25
 c18:	1a f0       	brmi	.+6      	; 0xc20 <__fixunssfsi+0x24>
 c1a:	ba 95       	dec	r27
 c1c:	c9 f7       	brne	.-14     	; 0xc10 <__fixunssfsi+0x14>
 c1e:	14 c0       	rjmp	.+40     	; 0xc48 <__fixunssfsi+0x4c>
 c20:	b1 30       	cpi	r27, 0x01	; 1
 c22:	91 f0       	breq	.+36     	; 0xc48 <__fixunssfsi+0x4c>
 c24:	0e 94 b4 06 	call	0xd68	; 0xd68 <__fp_zero>
 c28:	b1 e0       	ldi	r27, 0x01	; 1
 c2a:	08 95       	ret
 c2c:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_zero>
 c30:	67 2f       	mov	r22, r23
 c32:	78 2f       	mov	r23, r24
 c34:	88 27       	eor	r24, r24
 c36:	b8 5f       	subi	r27, 0xF8	; 248
 c38:	39 f0       	breq	.+14     	; 0xc48 <__fixunssfsi+0x4c>
 c3a:	b9 3f       	cpi	r27, 0xF9	; 249
 c3c:	cc f3       	brlt	.-14     	; 0xc30 <__fixunssfsi+0x34>
 c3e:	86 95       	lsr	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	b3 95       	inc	r27
 c46:	d9 f7       	brne	.-10     	; 0xc3e <__fixunssfsi+0x42>
 c48:	3e f4       	brtc	.+14     	; 0xc58 <__fixunssfsi+0x5c>
 c4a:	90 95       	com	r25
 c4c:	80 95       	com	r24
 c4e:	70 95       	com	r23
 c50:	61 95       	neg	r22
 c52:	7f 4f       	sbci	r23, 0xFF	; 255
 c54:	8f 4f       	sbci	r24, 0xFF	; 255
 c56:	9f 4f       	sbci	r25, 0xFF	; 255
 c58:	08 95       	ret

00000c5a <__floatunsisf>:
 c5a:	e8 94       	clt
 c5c:	09 c0       	rjmp	.+18     	; 0xc70 <__floatsisf+0x12>

00000c5e <__floatsisf>:
 c5e:	97 fb       	bst	r25, 7
 c60:	3e f4       	brtc	.+14     	; 0xc70 <__floatsisf+0x12>
 c62:	90 95       	com	r25
 c64:	80 95       	com	r24
 c66:	70 95       	com	r23
 c68:	61 95       	neg	r22
 c6a:	7f 4f       	sbci	r23, 0xFF	; 255
 c6c:	8f 4f       	sbci	r24, 0xFF	; 255
 c6e:	9f 4f       	sbci	r25, 0xFF	; 255
 c70:	99 23       	and	r25, r25
 c72:	a9 f0       	breq	.+42     	; 0xc9e <__floatsisf+0x40>
 c74:	f9 2f       	mov	r31, r25
 c76:	96 e9       	ldi	r25, 0x96	; 150
 c78:	bb 27       	eor	r27, r27
 c7a:	93 95       	inc	r25
 c7c:	f6 95       	lsr	r31
 c7e:	87 95       	ror	r24
 c80:	77 95       	ror	r23
 c82:	67 95       	ror	r22
 c84:	b7 95       	ror	r27
 c86:	f1 11       	cpse	r31, r1
 c88:	f8 cf       	rjmp	.-16     	; 0xc7a <__floatsisf+0x1c>
 c8a:	fa f4       	brpl	.+62     	; 0xcca <__floatsisf+0x6c>
 c8c:	bb 0f       	add	r27, r27
 c8e:	11 f4       	brne	.+4      	; 0xc94 <__floatsisf+0x36>
 c90:	60 ff       	sbrs	r22, 0
 c92:	1b c0       	rjmp	.+54     	; 0xcca <__floatsisf+0x6c>
 c94:	6f 5f       	subi	r22, 0xFF	; 255
 c96:	7f 4f       	sbci	r23, 0xFF	; 255
 c98:	8f 4f       	sbci	r24, 0xFF	; 255
 c9a:	9f 4f       	sbci	r25, 0xFF	; 255
 c9c:	16 c0       	rjmp	.+44     	; 0xcca <__floatsisf+0x6c>
 c9e:	88 23       	and	r24, r24
 ca0:	11 f0       	breq	.+4      	; 0xca6 <__floatsisf+0x48>
 ca2:	96 e9       	ldi	r25, 0x96	; 150
 ca4:	11 c0       	rjmp	.+34     	; 0xcc8 <__floatsisf+0x6a>
 ca6:	77 23       	and	r23, r23
 ca8:	21 f0       	breq	.+8      	; 0xcb2 <__floatsisf+0x54>
 caa:	9e e8       	ldi	r25, 0x8E	; 142
 cac:	87 2f       	mov	r24, r23
 cae:	76 2f       	mov	r23, r22
 cb0:	05 c0       	rjmp	.+10     	; 0xcbc <__floatsisf+0x5e>
 cb2:	66 23       	and	r22, r22
 cb4:	71 f0       	breq	.+28     	; 0xcd2 <__floatsisf+0x74>
 cb6:	96 e8       	ldi	r25, 0x86	; 134
 cb8:	86 2f       	mov	r24, r22
 cba:	70 e0       	ldi	r23, 0x00	; 0
 cbc:	60 e0       	ldi	r22, 0x00	; 0
 cbe:	2a f0       	brmi	.+10     	; 0xcca <__floatsisf+0x6c>
 cc0:	9a 95       	dec	r25
 cc2:	66 0f       	add	r22, r22
 cc4:	77 1f       	adc	r23, r23
 cc6:	88 1f       	adc	r24, r24
 cc8:	da f7       	brpl	.-10     	; 0xcc0 <__floatsisf+0x62>
 cca:	88 0f       	add	r24, r24
 ccc:	96 95       	lsr	r25
 cce:	87 95       	ror	r24
 cd0:	97 f9       	bld	r25, 7
 cd2:	08 95       	ret

00000cd4 <__fp_inf>:
 cd4:	97 f9       	bld	r25, 7
 cd6:	9f 67       	ori	r25, 0x7F	; 127
 cd8:	80 e8       	ldi	r24, 0x80	; 128
 cda:	70 e0       	ldi	r23, 0x00	; 0
 cdc:	60 e0       	ldi	r22, 0x00	; 0
 cde:	08 95       	ret

00000ce0 <__fp_nan>:
 ce0:	9f ef       	ldi	r25, 0xFF	; 255
 ce2:	80 ec       	ldi	r24, 0xC0	; 192
 ce4:	08 95       	ret

00000ce6 <__fp_pscA>:
 ce6:	00 24       	eor	r0, r0
 ce8:	0a 94       	dec	r0
 cea:	16 16       	cp	r1, r22
 cec:	17 06       	cpc	r1, r23
 cee:	18 06       	cpc	r1, r24
 cf0:	09 06       	cpc	r0, r25
 cf2:	08 95       	ret

00000cf4 <__fp_pscB>:
 cf4:	00 24       	eor	r0, r0
 cf6:	0a 94       	dec	r0
 cf8:	12 16       	cp	r1, r18
 cfa:	13 06       	cpc	r1, r19
 cfc:	14 06       	cpc	r1, r20
 cfe:	05 06       	cpc	r0, r21
 d00:	08 95       	ret

00000d02 <__fp_round>:
 d02:	09 2e       	mov	r0, r25
 d04:	03 94       	inc	r0
 d06:	00 0c       	add	r0, r0
 d08:	11 f4       	brne	.+4      	; 0xd0e <__fp_round+0xc>
 d0a:	88 23       	and	r24, r24
 d0c:	52 f0       	brmi	.+20     	; 0xd22 <__fp_round+0x20>
 d0e:	bb 0f       	add	r27, r27
 d10:	40 f4       	brcc	.+16     	; 0xd22 <__fp_round+0x20>
 d12:	bf 2b       	or	r27, r31
 d14:	11 f4       	brne	.+4      	; 0xd1a <__fp_round+0x18>
 d16:	60 ff       	sbrs	r22, 0
 d18:	04 c0       	rjmp	.+8      	; 0xd22 <__fp_round+0x20>
 d1a:	6f 5f       	subi	r22, 0xFF	; 255
 d1c:	7f 4f       	sbci	r23, 0xFF	; 255
 d1e:	8f 4f       	sbci	r24, 0xFF	; 255
 d20:	9f 4f       	sbci	r25, 0xFF	; 255
 d22:	08 95       	ret

00000d24 <__fp_split3>:
 d24:	57 fd       	sbrc	r21, 7
 d26:	90 58       	subi	r25, 0x80	; 128
 d28:	44 0f       	add	r20, r20
 d2a:	55 1f       	adc	r21, r21
 d2c:	59 f0       	breq	.+22     	; 0xd44 <__fp_splitA+0x10>
 d2e:	5f 3f       	cpi	r21, 0xFF	; 255
 d30:	71 f0       	breq	.+28     	; 0xd4e <__fp_splitA+0x1a>
 d32:	47 95       	ror	r20

00000d34 <__fp_splitA>:
 d34:	88 0f       	add	r24, r24
 d36:	97 fb       	bst	r25, 7
 d38:	99 1f       	adc	r25, r25
 d3a:	61 f0       	breq	.+24     	; 0xd54 <__fp_splitA+0x20>
 d3c:	9f 3f       	cpi	r25, 0xFF	; 255
 d3e:	79 f0       	breq	.+30     	; 0xd5e <__fp_splitA+0x2a>
 d40:	87 95       	ror	r24
 d42:	08 95       	ret
 d44:	12 16       	cp	r1, r18
 d46:	13 06       	cpc	r1, r19
 d48:	14 06       	cpc	r1, r20
 d4a:	55 1f       	adc	r21, r21
 d4c:	f2 cf       	rjmp	.-28     	; 0xd32 <__fp_split3+0xe>
 d4e:	46 95       	lsr	r20
 d50:	f1 df       	rcall	.-30     	; 0xd34 <__fp_splitA>
 d52:	08 c0       	rjmp	.+16     	; 0xd64 <__fp_splitA+0x30>
 d54:	16 16       	cp	r1, r22
 d56:	17 06       	cpc	r1, r23
 d58:	18 06       	cpc	r1, r24
 d5a:	99 1f       	adc	r25, r25
 d5c:	f1 cf       	rjmp	.-30     	; 0xd40 <__fp_splitA+0xc>
 d5e:	86 95       	lsr	r24
 d60:	71 05       	cpc	r23, r1
 d62:	61 05       	cpc	r22, r1
 d64:	08 94       	sec
 d66:	08 95       	ret

00000d68 <__fp_zero>:
 d68:	e8 94       	clt

00000d6a <__fp_szero>:
 d6a:	bb 27       	eor	r27, r27
 d6c:	66 27       	eor	r22, r22
 d6e:	77 27       	eor	r23, r23
 d70:	cb 01       	movw	r24, r22
 d72:	97 f9       	bld	r25, 7
 d74:	08 95       	ret

00000d76 <__umulhisi3>:
 d76:	a2 9f       	mul	r26, r18
 d78:	b0 01       	movw	r22, r0
 d7a:	b3 9f       	mul	r27, r19
 d7c:	c0 01       	movw	r24, r0
 d7e:	a3 9f       	mul	r26, r19
 d80:	70 0d       	add	r23, r0
 d82:	81 1d       	adc	r24, r1
 d84:	11 24       	eor	r1, r1
 d86:	91 1d       	adc	r25, r1
 d88:	b2 9f       	mul	r27, r18
 d8a:	70 0d       	add	r23, r0
 d8c:	81 1d       	adc	r24, r1
 d8e:	11 24       	eor	r1, r1
 d90:	91 1d       	adc	r25, r1
 d92:	08 95       	ret

00000d94 <__itoa_ncheck>:
 d94:	bb 27       	eor	r27, r27
 d96:	4a 30       	cpi	r20, 0x0A	; 10
 d98:	31 f4       	brne	.+12     	; 0xda6 <__itoa_ncheck+0x12>
 d9a:	99 23       	and	r25, r25
 d9c:	22 f4       	brpl	.+8      	; 0xda6 <__itoa_ncheck+0x12>
 d9e:	bd e2       	ldi	r27, 0x2D	; 45
 da0:	90 95       	com	r25
 da2:	81 95       	neg	r24
 da4:	9f 4f       	sbci	r25, 0xFF	; 255
 da6:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__utoa_common>

00000daa <__utoa_ncheck>:
 daa:	bb 27       	eor	r27, r27

00000dac <__utoa_common>:
 dac:	fb 01       	movw	r30, r22
 dae:	55 27       	eor	r21, r21
 db0:	aa 27       	eor	r26, r26
 db2:	88 0f       	add	r24, r24
 db4:	99 1f       	adc	r25, r25
 db6:	aa 1f       	adc	r26, r26
 db8:	a4 17       	cp	r26, r20
 dba:	10 f0       	brcs	.+4      	; 0xdc0 <__utoa_common+0x14>
 dbc:	a4 1b       	sub	r26, r20
 dbe:	83 95       	inc	r24
 dc0:	50 51       	subi	r21, 0x10	; 16
 dc2:	b9 f7       	brne	.-18     	; 0xdb2 <__utoa_common+0x6>
 dc4:	a0 5d       	subi	r26, 0xD0	; 208
 dc6:	aa 33       	cpi	r26, 0x3A	; 58
 dc8:	08 f0       	brcs	.+2      	; 0xdcc <__utoa_common+0x20>
 dca:	a9 5d       	subi	r26, 0xD9	; 217
 dcc:	a1 93       	st	Z+, r26
 dce:	00 97       	sbiw	r24, 0x00	; 0
 dd0:	79 f7       	brne	.-34     	; 0xdb0 <__utoa_common+0x4>
 dd2:	b1 11       	cpse	r27, r1
 dd4:	b1 93       	st	Z+, r27
 dd6:	11 92       	st	Z+, r1
 dd8:	cb 01       	movw	r24, r22
 dda:	0c 94 ef 06 	jmp	0xdde	; 0xdde <strrev>

00000dde <strrev>:
 dde:	dc 01       	movw	r26, r24
 de0:	fc 01       	movw	r30, r24
 de2:	67 2f       	mov	r22, r23
 de4:	71 91       	ld	r23, Z+
 de6:	77 23       	and	r23, r23
 de8:	e1 f7       	brne	.-8      	; 0xde2 <strrev+0x4>
 dea:	32 97       	sbiw	r30, 0x02	; 2
 dec:	04 c0       	rjmp	.+8      	; 0xdf6 <strrev+0x18>
 dee:	7c 91       	ld	r23, X
 df0:	6d 93       	st	X+, r22
 df2:	70 83       	st	Z, r23
 df4:	62 91       	ld	r22, -Z
 df6:	ae 17       	cp	r26, r30
 df8:	bf 07       	cpc	r27, r31
 dfa:	c8 f3       	brcs	.-14     	; 0xdee <strrev+0x10>
 dfc:	08 95       	ret

00000dfe <_exit>:
 dfe:	f8 94       	cli

00000e00 <__stop_program>:
 e00:	ff cf       	rjmp	.-2      	; 0xe00 <__stop_program>
