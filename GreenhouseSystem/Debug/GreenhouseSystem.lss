
GreenhouseSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000db2  00000e46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  0080011e  0080011e  00000e64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002418  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc0  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013d2  00000000  00000000  00004504  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000550  00000000  00000000  000058d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a6  00000000  00000000  00005e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001483  00000000  00000000  000066ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00007b51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_18>
  4c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 36       	cpi	r26, 0x6D	; 109
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 88 03 	call	0x710	; 0x710 <main>
  9e:	0c 94 d7 06 	jmp	0xdae	; 0xdae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register -> DDRx
    reg_name++;                     // Change pointer to Data Register -> PORTx  (DDR a PORT jsou v pamìti hned u sebe)
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <toggle_e+0x8>
  fc:	00 00       	nop
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	85 b9       	out	0x05, r24	; 5
 104:	08 95       	ret

00000106 <lcd_write>:
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
 10a:	66 23       	and	r22, r22
 10c:	21 f0       	breq	.+8      	; 0x116 <lcd_write+0x10>
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	81 60       	ori	r24, 0x01	; 1
 112:	85 b9       	out	0x05, r24	; 5
 114:	03 c0       	rjmp	.+6      	; 0x11c <lcd_write+0x16>
 116:	85 b1       	in	r24, 0x05	; 5
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	8a b1       	in	r24, 0x0a	; 10
 11e:	80 61       	ori	r24, 0x10	; 16
 120:	8a b9       	out	0x0a, r24	; 10
 122:	8a b1       	in	r24, 0x0a	; 10
 124:	80 62       	ori	r24, 0x20	; 32
 126:	8a b9       	out	0x0a, r24	; 10
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	8a b9       	out	0x0a, r24	; 10
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	80 68       	ori	r24, 0x80	; 128
 132:	8a b9       	out	0x0a, r24	; 10
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 77       	andi	r24, 0x7F	; 127
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7b       	andi	r24, 0xBF	; 191
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7d       	andi	r24, 0xDF	; 223
 144:	8b b9       	out	0x0b, r24	; 11
 146:	8b b1       	in	r24, 0x0b	; 11
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	8b b9       	out	0x0b, r24	; 11
 14c:	cc 23       	and	r28, r28
 14e:	1c f4       	brge	.+6      	; 0x156 <lcd_write+0x50>
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	80 68       	ori	r24, 0x80	; 128
 154:	8b b9       	out	0x0b, r24	; 11
 156:	c6 ff       	sbrs	r28, 6
 158:	03 c0       	rjmp	.+6      	; 0x160 <lcd_write+0x5a>
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	c5 ff       	sbrs	r28, 5
 162:	03 c0       	rjmp	.+6      	; 0x16a <lcd_write+0x64>
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	80 62       	ori	r24, 0x20	; 32
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	c4 ff       	sbrs	r28, 4
 16c:	03 c0       	rjmp	.+6      	; 0x174 <lcd_write+0x6e>
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	80 61       	ori	r24, 0x10	; 16
 172:	8b b9       	out	0x0b, r24	; 11
 174:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	8f 77       	andi	r24, 0x7F	; 127
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	8f 7b       	andi	r24, 0xBF	; 191
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8f 7d       	andi	r24, 0xDF	; 223
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	c3 ff       	sbrs	r28, 3
 192:	03 c0       	rjmp	.+6      	; 0x19a <lcd_write+0x94>
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	80 68       	ori	r24, 0x80	; 128
 198:	8b b9       	out	0x0b, r24	; 11
 19a:	c2 ff       	sbrs	r28, 2
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <lcd_write+0x9e>
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	c1 ff       	sbrs	r28, 1
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <lcd_write+0xa8>
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	80 62       	ori	r24, 0x20	; 32
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	c0 ff       	sbrs	r28, 0
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_write+0xb2>
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	80 61       	ori	r24, 0x10	; 16
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	8b b9       	out	0x0b, r24	; 11
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	87 eb       	ldi	r24, 0xB7	; 183
 1d6:	9b e0       	ldi	r25, 0x0B	; 11
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_write+0xd2>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_write+0xd8>
 1de:	00 00       	nop
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_command>:
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 1ea:	08 95       	ret

000001ec <lcd_gotoxy>:
 1ec:	61 11       	cpse	r22, r1
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <lcd_gotoxy+0xc>
 1f0:	80 58       	subi	r24, 0x80	; 128
 1f2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 1f6:	08 95       	ret
 1f8:	80 54       	subi	r24, 0x40	; 64
 1fa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 1fe:	08 95       	ret

00000200 <lcd_clrscr>:
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 206:	08 95       	ret

00000208 <lcd_putc>:
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 20e:	08 95       	ret

00000210 <lcd_puts>:
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	fc 01       	movw	r30, r24
 216:	03 c0       	rjmp	.+6      	; 0x21e <lcd_puts+0xe>
 218:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
 21c:	fe 01       	movw	r30, r28
 21e:	ef 01       	movw	r28, r30
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	80 81       	ld	r24, Z
 224:	81 11       	cpse	r24, r1
 226:	f8 cf       	rjmp	.-16     	; 0x218 <lcd_puts+0x8>
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 22e:	cf 93       	push	r28
 230:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 232:	84 b1       	in	r24, 0x04	; 4
 234:	81 60       	ori	r24, 0x01	; 1
 236:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 238:	8a b1       	in	r24, 0x0a	; 10
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 23e:	84 b1       	in	r24, 0x04	; 4
 240:	82 60       	ori	r24, 0x02	; 2
 242:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 244:	8a b1       	in	r24, 0x0a	; 10
 246:	80 61       	ori	r24, 0x10	; 16
 248:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 24a:	8a b1       	in	r24, 0x0a	; 10
 24c:	80 62       	ori	r24, 0x20	; 32
 24e:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 250:	8a b1       	in	r24, 0x0a	; 10
 252:	80 64       	ori	r24, 0x40	; 64
 254:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 256:	8a b1       	in	r24, 0x0a	; 10
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	99 ef       	ldi	r25, 0xF9	; 249
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_init+0x32>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_init+0x38>
 266:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 268:	8b b1       	in	r24, 0x0b	; 11
 26a:	80 62       	ori	r24, 0x20	; 32
 26c:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	80 61       	ori	r24, 0x10	; 16
 272:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 274:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 278:	8f e1       	ldi	r24, 0x1F	; 31
 27a:	9e e4       	ldi	r25, 0x4E	; 78
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_init+0x4e>
 280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_init+0x54>
 282:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 284:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_init+0x5e>
 290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_init+0x64>
 292:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 294:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x6e>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <lcd_init+0x74>
 2a2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2a4:	8b b1       	in	r24, 0x0b	; 11
 2a6:	8f 7e       	andi	r24, 0xEF	; 239
 2a8:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2aa:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_init+0x84>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_init+0x8a>
 2b8:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2ba:	88 e2       	ldi	r24, 0x28	; 40
 2bc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2c0:	88 e0       	ldi	r24, 0x08	; 8
 2c2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2c6:	0e 94 00 01 	call	0x200	; 0x200 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2d0:	8c 2f       	mov	r24, r28
 2d2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
}/* lcd_init */
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 2da:	87 b1       	in	r24, 0x07	; 7
 2dc:	8f 7c       	andi	r24, 0xCF	; 207
 2de:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 2e0:	88 b1       	in	r24, 0x08	; 8
 2e2:	80 63       	ori	r24, 0x30	; 48
 2e4:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 2e6:	e9 eb       	ldi	r30, 0xB9	; 185
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	8c 7f       	andi	r24, 0xFC	; 252
 2ee:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 2f0:	88 e9       	ldi	r24, 0x98	; 152
 2f2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 2f6:	08 95       	ret

000002f8 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 2f8:	94 ea       	ldi	r25, 0xA4	; 164
 2fa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 2fe:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 302:	99 23       	and	r25, r25
 304:	e4 f7       	brge	.-8      	; 0x2fe <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 306:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 30a:	84 e8       	ldi	r24, 0x84	; 132
 30c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 310:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 314:	88 23       	and	r24, r24
 316:	e4 f7       	brge	.-8      	; 0x310 <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 318:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 31c:	88 7f       	andi	r24, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 31e:	88 31       	cpi	r24, 0x18	; 24
 320:	21 f0       	breq	.+8      	; 0x32a <twi_start+0x32>
 322:	80 34       	cpi	r24, 0x40	; 64
 324:	21 f4       	brne	.+8      	; 0x32e <twi_start+0x36>
    {
        return 0;   /* Slave device accessible */
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	08 95       	ret
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	08 95       	ret
    }
    else
    {
        return 1;   /* Failed to access slave device */
 32e:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 330:	08 95       	ret

00000332 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 332:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 336:	84 e8       	ldi	r24, 0x84	; 132
 338:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 33c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 340:	88 23       	and	r24, r24
 342:	e4 f7       	brge	.-8      	; 0x33c <twi_write+0xa>
}
 344:	08 95       	ret

00000346 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 346:	84 ec       	ldi	r24, 0xC4	; 196
 348:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 34c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 350:	88 23       	and	r24, r24
 352:	e4 f7       	brge	.-8      	; 0x34c <twi_read_ack+0x6>
    return (TWDR);
 354:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 358:	08 95       	ret

0000035a <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 35a:	84 e8       	ldi	r24, 0x84	; 132
 35c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 360:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 364:	88 23       	and	r24, r24
 366:	e4 f7       	brge	.-8      	; 0x360 <twi_read_nack+0x6>
    return (TWDR);
 368:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 36c:	08 95       	ret

0000036e <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 36e:	84 e9       	ldi	r24, 0x94	; 148
 370:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 374:	08 95       	ret

00000376 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	2f 93       	push	r18
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	ef 93       	push	r30
 388:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 38a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
 38e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 392:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 394:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <UART_RxHead>
 398:	ef 5f       	subi	r30, 0xFF	; 255
 39a:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 39c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <UART_RxTail>
 3a0:	e9 17       	cp	r30, r25
 3a2:	39 f0       	breq	.+14     	; 0x3b2 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 3a4:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	ed 5d       	subi	r30, 0xDD	; 221
 3ac:	fe 4f       	sbci	r31, 0xFE	; 254
 3ae:	20 83       	st	Z, r18
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 3b2:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 3b4:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <__data_end>
 3b8:	89 2b       	or	r24, r25
 3ba:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
}
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	2f 91       	pop	r18
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	8f 93       	push	r24
 3de:	9f 93       	push	r25
 3e0:	ef 93       	push	r30
 3e2:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 3e4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <UART_TxHead>
 3e8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <UART_TxTail>
 3ec:	98 17       	cp	r25, r24
 3ee:	69 f0       	breq	.+26     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 3f0:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <UART_TxTail>
 3f4:	ef 5f       	subi	r30, 0xFF	; 255
 3f6:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 3f8:	e0 93 21 01 	sts	0x0121, r30	; 0x800121 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	ed 5b       	subi	r30, 0xBD	; 189
 400:	fe 4f       	sbci	r31, 0xFE	; 254
 402:	80 81       	ld	r24, Z
 404:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 408:	05 c0       	rjmp	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 40a:	e1 ec       	ldi	r30, 0xC1	; 193
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	8f 7d       	andi	r24, 0xDF	; 223
 412:	80 83       	st	Z, r24
    }
}
 414:	ff 91       	pop	r31
 416:	ef 91       	pop	r30
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 426:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <UART_TxHead>
    UART_TxTail = 0;
 42a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <UART_TxTail>
    UART_RxHead = 0;
 42e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <UART_RxHead>
    UART_RxTail = 0;
 432:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 436:	28 2f       	mov	r18, r24
 438:	39 2f       	mov	r19, r25
 43a:	33 23       	and	r19, r19
 43c:	1c f4       	brge	.+6      	; 0x444 <uart_init+0x1e>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 43e:	22 e0       	ldi	r18, 0x02	; 2
 440:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 444:	90 78       	andi	r25, 0x80	; 128
 446:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 44a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 44e:	88 e9       	ldi	r24, 0x98	; 152
 450:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 454:	86 e0       	ldi	r24, 0x06	; 6
 456:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 45a:	08 95       	ret

0000045c <lcd_updateMenu>:
	
	lcd_updateMenu();
}

//predelat na itoa
void lcd_updateMenu(){
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	62 97       	sbiw	r28, 0x12	; 18
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
	char lcd_string[] = "00000000000000000";
 470:	82 e1       	ldi	r24, 0x12	; 18
 472:	eb e0       	ldi	r30, 0x0B	; 11
 474:	f1 e0       	ldi	r31, 0x01	; 1
 476:	de 01       	movw	r26, r28
 478:	11 96       	adiw	r26, 0x01	; 1
 47a:	01 90       	ld	r0, Z+
 47c:	0d 92       	st	X+, r0
 47e:	8a 95       	dec	r24
 480:	e1 f7       	brne	.-8      	; 0x47a <lcd_updateMenu+0x1e>
	
	lcd_gotoxy(0, 0);
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_gotoxy>
	lcd_puts("H:");
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	//sprintf (lcd_string, "H:%d,%d  ", humidity / 10, humidity % 10);
	itoa(humidity / 10,lcd_string,10);
 492:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <humidity>
 496:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <humidity+0x1>
 49a:	ad ec       	ldi	r26, 0xCD	; 205
 49c:	bc ec       	ldi	r27, 0xCC	; 204
 49e:	0e 94 93 06 	call	0xd26	; 0xd26 <__umulhisi3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4a2:	4a e0       	ldi	r20, 0x0A	; 10
 4a4:	be 01       	movw	r22, r28
 4a6:	6f 5f       	subi	r22, 0xFF	; 255
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	96 95       	lsr	r25
 4ac:	87 95       	ror	r24
 4ae:	96 95       	lsr	r25
 4b0:	87 95       	ror	r24
 4b2:	96 95       	lsr	r25
 4b4:	87 95       	ror	r24
 4b6:	0e 94 a2 06 	call	0xd44	; 0xd44 <__itoa_ncheck>
	lcd_puts(lcd_string);
 4ba:	ce 01       	movw	r24, r28
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	lcd_putc(',');
 4c2:	8c e2       	ldi	r24, 0x2C	; 44
 4c4:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
	itoa(humidity % 10,lcd_string,10);
 4c8:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <humidity>
 4cc:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <humidity+0x1>
 4d0:	9f 01       	movw	r18, r30
 4d2:	ad ec       	ldi	r26, 0xCD	; 205
 4d4:	bc ec       	ldi	r27, 0xCC	; 204
 4d6:	0e 94 93 06 	call	0xd26	; 0xd26 <__umulhisi3>
 4da:	96 95       	lsr	r25
 4dc:	87 95       	ror	r24
 4de:	96 95       	lsr	r25
 4e0:	87 95       	ror	r24
 4e2:	96 95       	lsr	r25
 4e4:	87 95       	ror	r24
 4e6:	9c 01       	movw	r18, r24
 4e8:	22 0f       	add	r18, r18
 4ea:	33 1f       	adc	r19, r19
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	82 0f       	add	r24, r18
 4fa:	93 1f       	adc	r25, r19
 4fc:	4a e0       	ldi	r20, 0x0A	; 10
 4fe:	be 01       	movw	r22, r28
 500:	6f 5f       	subi	r22, 0xFF	; 255
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	9f 01       	movw	r18, r30
 506:	28 1b       	sub	r18, r24
 508:	39 0b       	sbc	r19, r25
 50a:	c9 01       	movw	r24, r18
 50c:	0e 94 a2 06 	call	0xd44	; 0xd44 <__itoa_ncheck>
	lcd_puts(lcd_string);
 510:	ce 01       	movw	r24, r28
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	
	lcd_gotoxy(9, 0);
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	89 e0       	ldi	r24, 0x09	; 9
 51c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_gotoxy>
	lcd_puts("T:");
 520:	85 e0       	ldi	r24, 0x05	; 5
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	//sprintf (lcd_string, "T:%d,%d  ", temperature / 10, temperature % 10);
	itoa(temperature / 10,lcd_string,10);
 528:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <temperature>
 52c:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <temperature+0x1>
 530:	ad ec       	ldi	r26, 0xCD	; 205
 532:	bc ec       	ldi	r27, 0xCC	; 204
 534:	0e 94 93 06 	call	0xd26	; 0xd26 <__umulhisi3>
 538:	4a e0       	ldi	r20, 0x0A	; 10
 53a:	be 01       	movw	r22, r28
 53c:	6f 5f       	subi	r22, 0xFF	; 255
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	96 95       	lsr	r25
 542:	87 95       	ror	r24
 544:	96 95       	lsr	r25
 546:	87 95       	ror	r24
 548:	96 95       	lsr	r25
 54a:	87 95       	ror	r24
 54c:	0e 94 a2 06 	call	0xd44	; 0xd44 <__itoa_ncheck>
	lcd_puts(lcd_string);
 550:	ce 01       	movw	r24, r28
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	lcd_putc(',');
 558:	8c e2       	ldi	r24, 0x2C	; 44
 55a:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
	itoa(temperature % 10,lcd_string,10);
 55e:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <temperature>
 562:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <temperature+0x1>
 566:	9f 01       	movw	r18, r30
 568:	ad ec       	ldi	r26, 0xCD	; 205
 56a:	bc ec       	ldi	r27, 0xCC	; 204
 56c:	0e 94 93 06 	call	0xd26	; 0xd26 <__umulhisi3>
 570:	96 95       	lsr	r25
 572:	87 95       	ror	r24
 574:	96 95       	lsr	r25
 576:	87 95       	ror	r24
 578:	96 95       	lsr	r25
 57a:	87 95       	ror	r24
 57c:	9c 01       	movw	r18, r24
 57e:	22 0f       	add	r18, r18
 580:	33 1f       	adc	r19, r19
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	82 0f       	add	r24, r18
 590:	93 1f       	adc	r25, r19
 592:	4a e0       	ldi	r20, 0x0A	; 10
 594:	be 01       	movw	r22, r28
 596:	6f 5f       	subi	r22, 0xFF	; 255
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	9f 01       	movw	r18, r30
 59c:	28 1b       	sub	r18, r24
 59e:	39 0b       	sbc	r19, r25
 5a0:	c9 01       	movw	r24, r18
 5a2:	0e 94 a2 06 	call	0xd44	; 0xd44 <__itoa_ncheck>
	lcd_puts(lcd_string);
 5a6:	ce 01       	movw	r24, r28
 5a8:	01 96       	adiw	r24, 0x01	; 1
 5aa:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	
	lcd_gotoxy(0, 1);
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_gotoxy>
	lcd_puts("L:");
 5b6:	88 e0       	ldi	r24, 0x08	; 8
 5b8:	91 e0       	ldi	r25, 0x01	; 1
 5ba:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	//sprintf (lcd_string, "L:%d,%d  ", luminescence / 10, luminescence % 10);
	itoa(luminescence / 10,lcd_string,10);
 5be:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <luminescence>
 5c2:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <luminescence+0x1>
 5c6:	ad ec       	ldi	r26, 0xCD	; 205
 5c8:	bc ec       	ldi	r27, 0xCC	; 204
 5ca:	0e 94 93 06 	call	0xd26	; 0xd26 <__umulhisi3>
 5ce:	4a e0       	ldi	r20, 0x0A	; 10
 5d0:	be 01       	movw	r22, r28
 5d2:	6f 5f       	subi	r22, 0xFF	; 255
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 5d6:	96 95       	lsr	r25
 5d8:	87 95       	ror	r24
 5da:	96 95       	lsr	r25
 5dc:	87 95       	ror	r24
 5de:	96 95       	lsr	r25
 5e0:	87 95       	ror	r24
 5e2:	0e 94 a2 06 	call	0xd44	; 0xd44 <__itoa_ncheck>
	lcd_puts(lcd_string);
 5e6:	ce 01       	movw	r24, r28
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	lcd_putc(',');
 5ee:	8c e2       	ldi	r24, 0x2C	; 44
 5f0:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
	itoa(luminescence % 10,lcd_string,10);
 5f4:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <luminescence>
 5f8:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <luminescence+0x1>
 5fc:	9f 01       	movw	r18, r30
 5fe:	ad ec       	ldi	r26, 0xCD	; 205
 600:	bc ec       	ldi	r27, 0xCC	; 204
 602:	0e 94 93 06 	call	0xd26	; 0xd26 <__umulhisi3>
 606:	96 95       	lsr	r25
 608:	87 95       	ror	r24
 60a:	96 95       	lsr	r25
 60c:	87 95       	ror	r24
 60e:	96 95       	lsr	r25
 610:	87 95       	ror	r24
 612:	9c 01       	movw	r18, r24
 614:	22 0f       	add	r18, r18
 616:	33 1f       	adc	r19, r19
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	82 0f       	add	r24, r18
 626:	93 1f       	adc	r25, r19
 628:	4a e0       	ldi	r20, 0x0A	; 10
 62a:	be 01       	movw	r22, r28
 62c:	6f 5f       	subi	r22, 0xFF	; 255
 62e:	7f 4f       	sbci	r23, 0xFF	; 255
 630:	9f 01       	movw	r18, r30
 632:	28 1b       	sub	r18, r24
 634:	39 0b       	sbc	r19, r25
 636:	c9 01       	movw	r24, r18
 638:	0e 94 a2 06 	call	0xd44	; 0xd44 <__itoa_ncheck>
	lcd_puts(lcd_string);
 63c:	ce 01       	movw	r24, r28
 63e:	01 96       	adiw	r24, 0x01	; 1
 640:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
}
 644:	62 96       	adiw	r28, 0x12	; 18
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	f8 94       	cli
 64a:	de bf       	out	0x3e, r29	; 62
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	cd bf       	out	0x3d, r28	; 61
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	08 95       	ret

00000656 <initLCD>:
	TIM1_overflow_interrupt_enable();
}

void initLCD(){
	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
 656:	8c e0       	ldi	r24, 0x0C	; 12
 658:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_init>

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 65c:	80 e4       	ldi	r24, 0x40	; 64
 65e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
	lcd_command(1 << LCD_DDRAM);
 662:	80 e8       	ldi	r24, 0x80	; 128
 664:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
	
	lcd_updateMenu();
 668:	0e 94 2e 02 	call	0x45c	; 0x45c <lcd_updateMenu>
 66c:	08 95       	ret

0000066e <initLEDs>:
	itoa(luminescence % 10,lcd_string,10);
	lcd_puts(lcd_string);
}

void initLEDs(){
	GPIO_config_output(&DDRB, LIGHT_LED);
 66e:	64 e0       	ldi	r22, 0x04	; 4
 670:	84 e2       	ldi	r24, 0x24	; 36
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC, PUMP_LED);
 678:	62 e0       	ldi	r22, 0x02	; 2
 67a:	87 e2       	ldi	r24, 0x27	; 39
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC, TEMPERATURE_LED);
 682:	63 e0       	ldi	r22, 0x03	; 3
 684:	87 e2       	ldi	r24, 0x27	; 39
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
		
	GPIO_write_high(&PORTB, LIGHT_LED);
 68c:	64 e0       	ldi	r22, 0x04	; 4
 68e:	85 e2       	ldi	r24, 0x25	; 37
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
	GPIO_write_high(&PORTC, PUMP_LED);
 696:	62 e0       	ldi	r22, 0x02	; 2
 698:	88 e2       	ldi	r24, 0x28	; 40
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
	GPIO_write_high(&PORTC, TEMPERATURE_LED);
 6a0:	63 e0       	ldi	r22, 0x03	; 3
 6a2:	88 e2       	ldi	r24, 0x28	; 40
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 6aa:	08 95       	ret

000006ac <initialSetup>:
    // Will never reach this
    return 0;
}

void initialSetup(){
	 twi_init();
 6ac:	0e 94 6d 01 	call	0x2da	; 0x2da <twi_init>

	 // Initialize UART to asynchronous, 8N1, 9600
	 uart_init(UART_BAUD_SELECT(9600, F_CPU));
 6b0:	87 e6       	ldi	r24, 0x67	; 103
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 13 02 	call	0x426	; 0x426 <uart_init>
	 
	 initLEDs();
 6b8:	0e 94 37 03 	call	0x66e	; 0x66e <initLEDs>
	 initSoilSensor(&ADMUX, &ADCSRA);
 6bc:	6a e7       	ldi	r22, 0x7A	; 122
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	8c e7       	ldi	r24, 0x7C	; 124
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <initSoilSensor>
	 initLCD();
 6c8:	0e 94 2b 03 	call	0x656	; 0x656 <initLCD>
	 
	 servo_init(&DDRB, SERVO_PIN);
 6cc:	62 e0       	ldi	r22, 0x02	; 2
 6ce:	84 e2       	ldi	r24, 0x24	; 36
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 61 05 	call	0xac2	; 0xac2 <servo_init>
	 
	 // Enables interrupts by setting the global interrupt mask
	 sei();
 6d6:	78 94       	sei
 6d8:	08 95       	ret

000006da <updateLED>:
	*adcsra_register |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
}*/

void updateLED(uint16_t intensity, uint8_t treshold, uint8_t led){

	if (intensity < treshold){ // luminescence < 10.0
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	86 17       	cp	r24, r22
 6de:	97 07       	cpc	r25, r23
 6e0:	58 f4       	brcc	.+22     	; 0x6f8 <updateLED+0x1e>
		PORTC = PORTC | (1<<led);
 6e2:	28 b1       	in	r18, 0x08	; 8
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <updateLED+0x14>
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	4a 95       	dec	r20
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <updateLED+0x10>
 6f2:	82 2b       	or	r24, r18
 6f4:	88 b9       	out	0x08, r24	; 8
 6f6:	08 95       	ret
	}
	else {
		PORTC = PORTC & ~(1<<led);
 6f8:	28 b1       	in	r18, 0x08	; 8
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <updateLED+0x2a>
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	4a 95       	dec	r20
 706:	e2 f7       	brpl	.-8      	; 0x700 <updateLED+0x26>
 708:	80 95       	com	r24
 70a:	82 23       	and	r24, r18
 70c:	88 b9       	out	0x08, r24	; 8
 70e:	08 95       	ret

00000710 <main>:
 * Returns:  none
 **********************************************************************/

int main(void)
{
	initialSetup();
 710:	0e 94 56 03 	call	0x6ac	; 0x6ac <initialSetup>
	
	uint16_t previous_humidity = UINT16_MAX;
	uint16_t previous_temperature = UINT16_MAX;
	uint16_t previous_luminescence = UINT16_MAX;
 714:	0f ef       	ldi	r16, 0xFF	; 255
 716:	1f ef       	ldi	r17, 0xFF	; 255
int main(void)
{
	initialSetup();
	
	uint16_t previous_humidity = UINT16_MAX;
	uint16_t previous_temperature = UINT16_MAX;
 718:	cc 24       	eor	r12, r12
 71a:	ca 94       	dec	r12
 71c:	dc 2c       	mov	r13, r12

int main(void)
{
	initialSetup();
	
	uint16_t previous_humidity = UINT16_MAX;
 71e:	ee 24       	eor	r14, r14
 720:	ea 94       	dec	r14
 722:	fe 2c       	mov	r15, r14
	uint16_t previous_temperature = UINT16_MAX;
	uint16_t previous_luminescence = UINT16_MAX;
    // Infinite loop
    while (1)
    {
		if (humid_flag){
 724:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <humid_flag>
 728:	88 23       	and	r24, r24
 72a:	91 f0       	breq	.+36     	; 0x750 <main+0x40>
			if (humidity != previous_humidity){
 72c:	c0 91 6a 01 	lds	r28, 0x016A	; 0x80016a <humidity>
 730:	d0 91 6b 01 	lds	r29, 0x016B	; 0x80016b <humidity+0x1>
 734:	ec 16       	cp	r14, r28
 736:	fd 06       	cpc	r15, r29
 738:	49 f0       	breq	.+18     	; 0x74c <main+0x3c>
				previous_humidity = humidity;
				updateLED(luminescence, 400, PUMP_LED);
 73a:	42 e0       	ldi	r20, 0x02	; 2
 73c:	60 e9       	ldi	r22, 0x90	; 144
 73e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <luminescence>
 742:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <luminescence+0x1>
 746:	0e 94 6d 03 	call	0x6da	; 0x6da <updateLED>
    // Infinite loop
    while (1)
    {
		if (humid_flag){
			if (humidity != previous_humidity){
				previous_humidity = humidity;
 74a:	7e 01       	movw	r14, r28
				updateLED(luminescence, 400, PUMP_LED);
			}
			humid_flag = 0;
 74c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <humid_flag>
		}
		if (temp_flag){
 750:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <temp_flag>
 754:	88 23       	and	r24, r24
 756:	91 f0       	breq	.+36     	; 0x77c <main+0x6c>
			if (temperature != previous_temperature){
 758:	c0 91 68 01 	lds	r28, 0x0168	; 0x800168 <temperature>
 75c:	d0 91 69 01 	lds	r29, 0x0169	; 0x800169 <temperature+0x1>
 760:	cc 16       	cp	r12, r28
 762:	dd 06       	cpc	r13, r29
 764:	49 f0       	breq	.+18     	; 0x778 <main+0x68>
				previous_temperature = temperature;
				updateLED(luminescence, 200, TEMPERATURE_LED);
 766:	43 e0       	ldi	r20, 0x03	; 3
 768:	68 ec       	ldi	r22, 0xC8	; 200
 76a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <luminescence>
 76e:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <luminescence+0x1>
 772:	0e 94 6d 03 	call	0x6da	; 0x6da <updateLED>
			}
			humid_flag = 0;
		}
		if (temp_flag){
			if (temperature != previous_temperature){
				previous_temperature = temperature;
 776:	6e 01       	movw	r12, r28
				updateLED(luminescence, 200, TEMPERATURE_LED);
			}
			temp_flag = 0;
 778:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <temp_flag>
		}
		if (luminescence_flag){
 77c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <luminescence_flag>
 780:	88 23       	and	r24, r24
 782:	81 f2       	breq	.-96     	; 0x724 <main+0x14>
			if (luminescence != previous_luminescence){
 784:	c0 91 66 01 	lds	r28, 0x0166	; 0x800166 <luminescence>
 788:	d0 91 67 01 	lds	r29, 0x0167	; 0x800167 <luminescence+0x1>
 78c:	0c 17       	cp	r16, r28
 78e:	1d 07       	cpc	r17, r29
 790:	a1 f0       	breq	.+40     	; 0x7ba <main+0xaa>
				previous_luminescence = luminescence;
				if (luminescence < 300){
 792:	cc 32       	cpi	r28, 0x2C	; 44
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	d8 07       	cpc	r29, r24
 798:	30 f4       	brcc	.+12     	; 0x7a6 <main+0x96>
					updateLED(luminescence, 300, LIGHT_LED);	
 79a:	44 e0       	ldi	r20, 0x04	; 4
 79c:	6c e2       	ldi	r22, 0x2C	; 44
 79e:	ce 01       	movw	r24, r28
 7a0:	0e 94 6d 03 	call	0x6da	; 0x6da <updateLED>
 7a4:	0b c0       	rjmp	.+22     	; 0x7bc <main+0xac>
				}
				else if (luminescence > 800){
 7a6:	c1 32       	cpi	r28, 0x21	; 33
 7a8:	83 e0       	ldi	r24, 0x03	; 3
 7aa:	d8 07       	cpc	r29, r24
 7ac:	38 f0       	brcs	.+14     	; 0x7bc <main+0xac>
					servo_right(&PORTB, SERVO_PIN);
 7ae:	62 e0       	ldi	r22, 0x02	; 2
 7b0:	85 e2       	ldi	r24, 0x25	; 37
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 45 05 	call	0xa8a	; 0xa8a <servo_right>
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <main+0xac>
 7ba:	e8 01       	movw	r28, r16
				}
			}
			luminescence_flag = 0;
 7bc:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <luminescence_flag>
 7c0:	8e 01       	movw	r16, r28
 7c2:	b0 cf       	rjmp	.-160    	; 0x724 <main+0x14>

000007c4 <__vector_13>:
 * Purpose:  Service routine for slow actions as sensors and ADC conversion.
 *           ADC conversion is performed every 262ms and every second
 *           temperature is being read from DHT12 and luminescence from BH1750.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 7c4:	1f 92       	push	r1
 7c6:	0f 92       	push	r0
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	0f 92       	push	r0
 7cc:	11 24       	eor	r1, r1
 7ce:	2f 93       	push	r18
 7d0:	3f 93       	push	r19
 7d2:	4f 93       	push	r20
 7d4:	5f 93       	push	r21
 7d6:	6f 93       	push	r22
 7d8:	7f 93       	push	r23
 7da:	8f 93       	push	r24
 7dc:	9f 93       	push	r25
 7de:	af 93       	push	r26
 7e0:	bf 93       	push	r27
 7e2:	ef 93       	push	r30
 7e4:	ff 93       	push	r31
	static iteration = 1;
	uint16_t result = 0;
	
	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 7e6:	ea e7       	ldi	r30, 0x7A	; 122
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	80 64       	ori	r24, 0x40	; 64
 7ee:	80 83       	st	Z, r24
	
	if (iteration == 4) {
 7f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7f8:	04 97       	sbiw	r24, 0x04	; 4
 7fa:	f1 f4       	brne	.+60     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
		result = read_luminescence(&luminescence_flag);
 7fc:	83 e6       	ldi	r24, 0x63	; 99
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	0e 94 0e 05 	call	0xa1c	; 0xa1c <read_luminescence>
 804:	90 e0       	ldi	r25, 0x00	; 0
		
		if (luminescence_flag) {
 806:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <luminescence_flag>
 80a:	22 23       	and	r18, r18
 80c:	21 f0       	breq	.+8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			luminescence = result;
 80e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <luminescence+0x1>
 812:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <luminescence>
		}
		
		//read DHT12
		result = read_temperature(&temp_flag);
 816:	85 e6       	ldi	r24, 0x65	; 101
 818:	91 e0       	ldi	r25, 0x01	; 1
 81a:	0e 94 88 04 	call	0x910	; 0x910 <read_temperature>
 81e:	90 e0       	ldi	r25, 0x00	; 0
		
		if (temp_flag) {
 820:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <temp_flag>
 824:	22 23       	and	r18, r18
 826:	21 f0       	breq	.+8      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
			temperature = result;
 828:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <temperature+0x1>
 82c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <temperature>
		}
		
		iteration = 0;
 830:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 834:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	iteration++;
 838:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 83c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 840:	01 96       	adiw	r24, 0x01	; 1
 842:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 846:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 84a:	ff 91       	pop	r31
 84c:	ef 91       	pop	r30
 84e:	bf 91       	pop	r27
 850:	af 91       	pop	r26
 852:	9f 91       	pop	r25
 854:	8f 91       	pop	r24
 856:	7f 91       	pop	r23
 858:	6f 91       	pop	r22
 85a:	5f 91       	pop	r21
 85c:	4f 91       	pop	r20
 85e:	3f 91       	pop	r19
 860:	2f 91       	pop	r18
 862:	0f 90       	pop	r0
 864:	0f be       	out	0x3f, r0	; 63
 866:	0f 90       	pop	r0
 868:	1f 90       	pop	r1
 86a:	18 95       	reti

0000086c <__vector_16>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Service routine for fast actions. In this routine LCD display
 *           is refreshed and updated with new data from sensors every 16 ms
 **********************************************************************/
ISR(TIMER0_OVF_vect)
{
 86c:	1f 92       	push	r1
 86e:	0f 92       	push	r0
 870:	0f b6       	in	r0, 0x3f	; 63
 872:	0f 92       	push	r0
 874:	11 24       	eor	r1, r1
 876:	2f 93       	push	r18
 878:	3f 93       	push	r19
 87a:	4f 93       	push	r20
 87c:	5f 93       	push	r21
 87e:	6f 93       	push	r22
 880:	7f 93       	push	r23
 882:	8f 93       	push	r24
 884:	9f 93       	push	r25
 886:	af 93       	push	r26
 888:	bf 93       	push	r27
 88a:	ef 93       	push	r30
 88c:	ff 93       	push	r31
	lcd_updateMenu();
 88e:	0e 94 2e 02 	call	0x45c	; 0x45c <lcd_updateMenu>
}
 892:	ff 91       	pop	r31
 894:	ef 91       	pop	r30
 896:	bf 91       	pop	r27
 898:	af 91       	pop	r26
 89a:	9f 91       	pop	r25
 89c:	8f 91       	pop	r24
 89e:	7f 91       	pop	r23
 8a0:	6f 91       	pop	r22
 8a2:	5f 91       	pop	r21
 8a4:	4f 91       	pop	r20
 8a6:	3f 91       	pop	r19
 8a8:	2f 91       	pop	r18
 8aa:	0f 90       	pop	r0
 8ac:	0f be       	out	0x3f, r0	; 63
 8ae:	0f 90       	pop	r0
 8b0:	1f 90       	pop	r1
 8b2:	18 95       	reti

000008b4 <__vector_21>:
 *           Reads soil moisture and stores it to global variable.
 *           Humidity change flag is set.
 *           High adc value corresponds to dry soil and low value wet soil
 **********************************************************************/
ISR(ADC_vect)
{
 8b4:	1f 92       	push	r1
 8b6:	0f 92       	push	r0
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	0f 92       	push	r0
 8bc:	11 24       	eor	r1, r1
 8be:	8f 93       	push	r24
 8c0:	9f 93       	push	r25
	humidity = ADCW;    // Copy ADC result to 16-bit variable	
 8c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 8c6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 8ca:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <humidity+0x1>
 8ce:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <humidity>
	humid_flag = 1;
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <humid_flag>
 8d8:	9f 91       	pop	r25
 8da:	8f 91       	pop	r24
 8dc:	0f 90       	pop	r0
 8de:	0f be       	out	0x3f, r0	; 63
 8e0:	0f 90       	pop	r0
 8e2:	1f 90       	pop	r1
 8e4:	18 95       	reti

000008e6 <initSoilSensor>:
 *  Author: cerma
 */ 

#include "adc_sensors.h"

void initSoilSensor(volatile uint8_t *admux_register, volatile uint8_t *adcsra_register){
 8e6:	dc 01       	movw	r26, r24
 8e8:	fb 01       	movw	r30, r22
	// Configure ADC to convert PC0[A0] analog value
	// Set ADC reference to AVcc
	*admux_register |= (1 << REFS0);
 8ea:	8c 91       	ld	r24, X
 8ec:	80 64       	ori	r24, 0x40	; 64
 8ee:	8c 93       	st	X, r24
	*admux_register &= ~(1 << REFS1);
 8f0:	8c 91       	ld	r24, X
 8f2:	8f 77       	andi	r24, 0x7F	; 127
 8f4:	8c 93       	st	X, r24
	// Set input channel to ADC0
	*admux_register &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3));
 8f6:	8c 91       	ld	r24, X
 8f8:	80 7f       	andi	r24, 0xF0	; 240
 8fa:	8c 93       	st	X, r24
	// Enable ADC module
	*adcsra_register |= (1 << ADEN);
 8fc:	80 81       	ld	r24, Z
 8fe:	80 68       	ori	r24, 0x80	; 128
 900:	80 83       	st	Z, r24
	// Enable conversion complete interrupt
	*adcsra_register |= (1 << ADIE);
 902:	80 81       	ld	r24, Z
 904:	88 60       	ori	r24, 0x08	; 8
 906:	80 83       	st	Z, r24
	// Set clock prescaler to 128
	*adcsra_register |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 908:	80 81       	ld	r24, Z
 90a:	87 60       	ori	r24, 0x07	; 7
 90c:	80 83       	st	Z, r24
 90e:	08 95       	ret

00000910 <read_temperature>:
 *  Author: cerma
 */ 
#include "i2c_sensors.h"

uint8_t read_temperature(volatile uint8_t *temp_flag)
{
 910:	df 92       	push	r13
 912:	ef 92       	push	r14
 914:	ff 92       	push	r15
 916:	0f 93       	push	r16
 918:	1f 93       	push	r17
 91a:	cf 93       	push	r28
 91c:	df 93       	push	r29
 91e:	8c 01       	movw	r16, r24
	*temp_flag = 0;
 920:	fc 01       	movw	r30, r24
 922:	10 82       	st	Z, r1
	uint8_t temperature_integral = 0;
	uint8_t temperature_scale = 0;
	
	uint8_t checksum = 0;
	
	uint8_t res = twi_start((addr << 1) + TWI_WRITE);
 924:	88 eb       	ldi	r24, 0xB8	; 184
 926:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
	
	if (res == 1){
 92a:	81 30       	cpi	r24, 0x01	; 1
 92c:	21 f4       	brne	.+8      	; 0x936 <read_temperature+0x26>
		twi_stop();
 92e:	0e 94 b7 01 	call	0x36e	; 0x36e <twi_stop>
		return 0;
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	31 c0       	rjmp	.+98     	; 0x998 <read_temperature+0x88>
	}
	
	twi_write(0x00);
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	0e 94 99 01 	call	0x332	; 0x332 <twi_write>
	
	twi_start((addr << 1) + TWI_READ);
 93c:	89 eb       	ldi	r24, 0xB9	; 185
 93e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
	
	//tohle zahazuju
	humid_integral = twi_read_ack();    // get fraction part
 942:	0e 94 a3 01 	call	0x346	; 0x346 <twi_read_ack>
 946:	d8 2e       	mov	r13, r24
	humid_scale = twi_read_ack();			// get scale part
 948:	0e 94 a3 01 	call	0x346	; 0x346 <twi_read_ack>
 94c:	c8 2f       	mov	r28, r24
	
	temperature_integral = twi_read_ack();    // get fraction part
 94e:	0e 94 a3 01 	call	0x346	; 0x346 <twi_read_ack>
 952:	d8 2f       	mov	r29, r24
	temperature_scale = twi_read_ack();			// get scale part
 954:	0e 94 a3 01 	call	0x346	; 0x346 <twi_read_ack>
 958:	f8 2e       	mov	r15, r24

	checksum = twi_read_nack();			// get scale part
 95a:	0e 94 ad 01 	call	0x35a	; 0x35a <twi_read_nack>
 95e:	e8 2e       	mov	r14, r24
	twi_stop();
 960:	0e 94 b7 01 	call	0x36e	; 0x36e <twi_stop>
	
	if (checksum == (humid_integral + humid_scale + temperature_integral + temperature_scale)) {
 964:	8e 2d       	mov	r24, r14
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	2c 2f       	mov	r18, r28
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	2d 0d       	add	r18, r13
 96e:	31 1d       	adc	r19, r1
 970:	2d 0f       	add	r18, r29
 972:	31 1d       	adc	r19, r1
 974:	2f 0d       	add	r18, r15
 976:	31 1d       	adc	r19, r1
 978:	82 17       	cp	r24, r18
 97a:	93 07       	cpc	r25, r19
 97c:	21 f4       	brne	.+8      	; 0x986 <read_temperature+0x76>
		*temp_flag = 1;
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	f8 01       	movw	r30, r16
 982:	80 83       	st	Z, r24
 984:	02 c0       	rjmp	.+4      	; 0x98a <read_temperature+0x7a>
	}
	else {
		*temp_flag = 0; // error while reading from DHT12
 986:	f8 01       	movw	r30, r16
 988:	10 82       	st	Z, r1
	}
	
	return (uint16_t)temperature_integral * 10 + (uint16_t)temperature_scale;	// 25.5 °C -> 255
 98a:	dd 0f       	add	r29, r29
 98c:	8d 2f       	mov	r24, r29
 98e:	88 0f       	add	r24, r24
 990:	88 0f       	add	r24, r24
 992:	d8 0f       	add	r29, r24
 994:	8d 2f       	mov	r24, r29
 996:	8f 0d       	add	r24, r15
}
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
 99e:	0f 91       	pop	r16
 9a0:	ff 90       	pop	r15
 9a2:	ef 90       	pop	r14
 9a4:	df 90       	pop	r13
 9a6:	08 95       	ret

000009a8 <get_lux>:
/************************************************************************
 * Function: getCorrect lux value from data							*
 * Purpose:  data needs to be shifted, last bit is 2^-1 (+5). Value is 10 times higher.
/************************************************************************/
uint16_t get_lux(uint16_t data){
	if (data & 1){
 9a8:	80 ff       	sbrs	r24, 0
 9aa:	1d c0       	rjmp	.+58     	; 0x9e6 <get_lux+0x3e>
		return (((data >> 1) * 10) + 5) / 1.2;
 9ac:	96 95       	lsr	r25
 9ae:	87 95       	ror	r24
 9b0:	bc 01       	movw	r22, r24
 9b2:	66 0f       	add	r22, r22
 9b4:	77 1f       	adc	r23, r23
 9b6:	88 0f       	add	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	88 0f       	add	r24, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	88 0f       	add	r24, r24
 9c0:	99 1f       	adc	r25, r25
 9c2:	68 0f       	add	r22, r24
 9c4:	79 1f       	adc	r23, r25
 9c6:	6b 5f       	subi	r22, 0xFB	; 251
 9c8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0e 94 05 06 	call	0xc0a	; 0xc0a <__floatunsisf>
 9d2:	2a e9       	ldi	r18, 0x9A	; 154
 9d4:	39 e9       	ldi	r19, 0x99	; 153
 9d6:	49 e9       	ldi	r20, 0x99	; 153
 9d8:	5f e3       	ldi	r21, 0x3F	; 63
 9da:	0e 94 64 05 	call	0xac8	; 0xac8 <__divsf3>
 9de:	0e 94 d6 05 	call	0xbac	; 0xbac <__fixunssfsi>
 9e2:	cb 01       	movw	r24, r22
 9e4:	08 95       	ret
	} else {
		return ((data >> 1) * 10) / 1.2; 	
 9e6:	96 95       	lsr	r25
 9e8:	87 95       	ror	r24
 9ea:	bc 01       	movw	r22, r24
 9ec:	66 0f       	add	r22, r22
 9ee:	77 1f       	adc	r23, r23
 9f0:	88 0f       	add	r24, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	88 0f       	add	r24, r24
 9f6:	99 1f       	adc	r25, r25
 9f8:	88 0f       	add	r24, r24
 9fa:	99 1f       	adc	r25, r25
 9fc:	68 0f       	add	r22, r24
 9fe:	79 1f       	adc	r23, r25
 a00:	80 e0       	ldi	r24, 0x00	; 0
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	0e 94 05 06 	call	0xc0a	; 0xc0a <__floatunsisf>
 a08:	2a e9       	ldi	r18, 0x9A	; 154
 a0a:	39 e9       	ldi	r19, 0x99	; 153
 a0c:	49 e9       	ldi	r20, 0x99	; 153
 a0e:	5f e3       	ldi	r21, 0x3F	; 63
 a10:	0e 94 64 05 	call	0xac8	; 0xac8 <__divsf3>
 a14:	0e 94 d6 05 	call	0xbac	; 0xbac <__fixunssfsi>
 a18:	cb 01       	movw	r24, r22
	}
}
 a1a:	08 95       	ret

00000a1c <read_luminescence>:

// read data from BH1750 light sensor
uint8_t read_luminescence(volatile uint8_t *luminescence_flag){	//manual str.12
 a1c:	0f 93       	push	r16
 a1e:	1f 93       	push	r17
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
 a24:	ec 01       	movw	r28, r24
	
	*luminescence_flag = 0;
 a26:	18 82       	st	Y, r1
	uint8_t addr = 0x23;			// ADDR ? 0.3VCC -> L
	uint16_t data = -1;
	//uint8_t result = -1;

	// FSM
	switch (state)
 a28:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <state.1637>
 a2c:	88 23       	and	r24, r24
 a2e:	19 f0       	breq	.+6      	; 0xa36 <read_luminescence+0x1a>
 a30:	81 30       	cpi	r24, 0x01	; 1
 a32:	71 f0       	breq	.+28     	; 0xa50 <read_luminescence+0x34>
 a34:	22 c0       	rjmp	.+68     	; 0xa7a <read_luminescence+0x5e>
	{
		case STATE_WRITE:
			twi_start((addr<<1) + TWI_WRITE);
 a36:	86 e4       	ldi	r24, 0x46	; 70
 a38:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
			twi_write(0b00010001);
 a3c:	81 e1       	ldi	r24, 0x11	; 17
 a3e:	0e 94 99 01 	call	0x332	; 0x332 <twi_write>
			twi_stop();
 a42:	0e 94 b7 01 	call	0x36e	; 0x36e <twi_stop>
			
			state = STATE_READ;
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <state.1637>
			//uart_puts("T1 reading error"); // nastavit error flag?
			state = STATE_WRITE;
		break;
	}
	
	return -1;
 a4c:	8f ef       	ldi	r24, 0xFF	; 255
			twi_start((addr<<1) + TWI_WRITE);
			twi_write(0b00010001);
			twi_stop();
			
			state = STATE_READ;
		break;
 a4e:	18 c0       	rjmp	.+48     	; 0xa80 <read_luminescence+0x64>
		case STATE_READ:
			twi_start((addr<<1) + TWI_READ);			
 a50:	87 e4       	ldi	r24, 0x47	; 71
 a52:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
			data = twi_read_ack() >> 8;
 a56:	0e 94 a3 01 	call	0x346	; 0x346 <twi_read_ack>
 a5a:	00 e0       	ldi	r16, 0x00	; 0
 a5c:	10 e0       	ldi	r17, 0x00	; 0
			data += twi_read_nack();			
 a5e:	0e 94 ad 01 	call	0x35a	; 0x35a <twi_read_nack>
 a62:	08 0f       	add	r16, r24
 a64:	11 1d       	adc	r17, r1
			twi_stop();
 a66:	0e 94 b7 01 	call	0x36e	; 0x36e <twi_stop>
			
			*luminescence_flag = 1;
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	88 83       	st	Y, r24
			state = STATE_WRITE;
 a6e:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <state.1637>
			
			return get_lux(data);
 a72:	c8 01       	movw	r24, r16
 a74:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <get_lux>
 a78:	03 c0       	rjmp	.+6      	; 0xa80 <read_luminescence+0x64>
		break;
		default:
			//uart_puts("T1 reading error"); // nastavit error flag?
			state = STATE_WRITE;
 a7a:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <state.1637>
		break;
	}
	
	return -1;
 a7e:	8f ef       	ldi	r24, 0xFF	; 255
 a80:	df 91       	pop	r29
 a82:	cf 91       	pop	r28
 a84:	1f 91       	pop	r17
 a86:	0f 91       	pop	r16
 a88:	08 95       	ret

00000a8a <servo_right>:
 *           in ratio 2,4ms (high) : 17,6ms (low)
 * Input:    reg_name - Address of servos Port register, such as &PORTB
 *           servo_pin - Pin to which servo is connected
 * Returns:  none
 **********************************************************************/
void servo_right(volatile uint8_t *reg_name, uint8_t servo_pin){
 a8a:	cf 93       	push	r28
 a8c:	c6 2f       	mov	r28, r22
	GPIO_write_high(&PORTB, servo_pin);
 a8e:	85 e2       	ldi	r24, 0x25	; 37
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 a96:	87 e5       	ldi	r24, 0x57	; 87
 a98:	92 e0       	ldi	r25, 0x02	; 2
 a9a:	01 97       	sbiw	r24, 0x01	; 1
 a9c:	f1 f7       	brne	.-4      	; 0xa9a <servo_right+0x10>
 a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <servo_right+0x16>
 aa0:	00 00       	nop
	_delay_us(2400);
	GPIO_write_low(&PORTB, servo_pin);
 aa2:	6c 2f       	mov	r22, r28
 aa4:	85 e2       	ldi	r24, 0x25	; 37
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 aac:	98 ec       	ldi	r25, 0xC8	; 200
 aae:	9a 95       	dec	r25
 ab0:	f1 f7       	brne	.-4      	; 0xaae <servo_right+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ab2:	89 e9       	ldi	r24, 0x99	; 153
 ab4:	90 e1       	ldi	r25, 0x10	; 16
 ab6:	01 97       	sbiw	r24, 0x01	; 1
 ab8:	f1 f7       	brne	.-4      	; 0xab6 <servo_right+0x2c>
 aba:	00 c0       	rjmp	.+0      	; 0xabc <servo_right+0x32>
 abc:	00 00       	nop
	_delay_us(600);
	_delay_ms(17);
};
 abe:	cf 91       	pop	r28
 ac0:	08 95       	ret

00000ac2 <servo_init>:
 * Input:    reg_name - Address of Data Direction Register, such as &DDRB
 *           servo_pin - Pin to which servo is connected
 * Returns:  none
 **********************************************************************/
void servo_init(volatile uint8_t *reg_name, uint8_t servo_pin){
	GPIO_config_output(reg_name, servo_pin);	
 ac2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 ac6:	08 95       	ret

00000ac8 <__divsf3>:
 ac8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__divsf3x>
 acc:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_round>
 ad0:	0e 94 52 06 	call	0xca4	; 0xca4 <__fp_pscB>
 ad4:	58 f0       	brcs	.+22     	; 0xaec <__divsf3+0x24>
 ad6:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fp_pscA>
 ada:	40 f0       	brcs	.+16     	; 0xaec <__divsf3+0x24>
 adc:	29 f4       	brne	.+10     	; 0xae8 <__divsf3+0x20>
 ade:	5f 3f       	cpi	r21, 0xFF	; 255
 ae0:	29 f0       	breq	.+10     	; 0xaec <__divsf3+0x24>
 ae2:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_inf>
 ae6:	51 11       	cpse	r21, r1
 ae8:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_szero>
 aec:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_nan>

00000af0 <__divsf3x>:
 af0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fp_split3>
 af4:	68 f3       	brcs	.-38     	; 0xad0 <__divsf3+0x8>

00000af6 <__divsf3_pse>:
 af6:	99 23       	and	r25, r25
 af8:	b1 f3       	breq	.-20     	; 0xae6 <__divsf3+0x1e>
 afa:	55 23       	and	r21, r21
 afc:	91 f3       	breq	.-28     	; 0xae2 <__divsf3+0x1a>
 afe:	95 1b       	sub	r25, r21
 b00:	55 0b       	sbc	r21, r21
 b02:	bb 27       	eor	r27, r27
 b04:	aa 27       	eor	r26, r26
 b06:	62 17       	cp	r22, r18
 b08:	73 07       	cpc	r23, r19
 b0a:	84 07       	cpc	r24, r20
 b0c:	38 f0       	brcs	.+14     	; 0xb1c <__divsf3_pse+0x26>
 b0e:	9f 5f       	subi	r25, 0xFF	; 255
 b10:	5f 4f       	sbci	r21, 0xFF	; 255
 b12:	22 0f       	add	r18, r18
 b14:	33 1f       	adc	r19, r19
 b16:	44 1f       	adc	r20, r20
 b18:	aa 1f       	adc	r26, r26
 b1a:	a9 f3       	breq	.-22     	; 0xb06 <__divsf3_pse+0x10>
 b1c:	35 d0       	rcall	.+106    	; 0xb88 <__divsf3_pse+0x92>
 b1e:	0e 2e       	mov	r0, r30
 b20:	3a f0       	brmi	.+14     	; 0xb30 <__divsf3_pse+0x3a>
 b22:	e0 e8       	ldi	r30, 0x80	; 128
 b24:	32 d0       	rcall	.+100    	; 0xb8a <__divsf3_pse+0x94>
 b26:	91 50       	subi	r25, 0x01	; 1
 b28:	50 40       	sbci	r21, 0x00	; 0
 b2a:	e6 95       	lsr	r30
 b2c:	00 1c       	adc	r0, r0
 b2e:	ca f7       	brpl	.-14     	; 0xb22 <__divsf3_pse+0x2c>
 b30:	2b d0       	rcall	.+86     	; 0xb88 <__divsf3_pse+0x92>
 b32:	fe 2f       	mov	r31, r30
 b34:	29 d0       	rcall	.+82     	; 0xb88 <__divsf3_pse+0x92>
 b36:	66 0f       	add	r22, r22
 b38:	77 1f       	adc	r23, r23
 b3a:	88 1f       	adc	r24, r24
 b3c:	bb 1f       	adc	r27, r27
 b3e:	26 17       	cp	r18, r22
 b40:	37 07       	cpc	r19, r23
 b42:	48 07       	cpc	r20, r24
 b44:	ab 07       	cpc	r26, r27
 b46:	b0 e8       	ldi	r27, 0x80	; 128
 b48:	09 f0       	breq	.+2      	; 0xb4c <__divsf3_pse+0x56>
 b4a:	bb 0b       	sbc	r27, r27
 b4c:	80 2d       	mov	r24, r0
 b4e:	bf 01       	movw	r22, r30
 b50:	ff 27       	eor	r31, r31
 b52:	93 58       	subi	r25, 0x83	; 131
 b54:	5f 4f       	sbci	r21, 0xFF	; 255
 b56:	3a f0       	brmi	.+14     	; 0xb66 <__divsf3_pse+0x70>
 b58:	9e 3f       	cpi	r25, 0xFE	; 254
 b5a:	51 05       	cpc	r21, r1
 b5c:	78 f0       	brcs	.+30     	; 0xb7c <__divsf3_pse+0x86>
 b5e:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_inf>
 b62:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_szero>
 b66:	5f 3f       	cpi	r21, 0xFF	; 255
 b68:	e4 f3       	brlt	.-8      	; 0xb62 <__divsf3_pse+0x6c>
 b6a:	98 3e       	cpi	r25, 0xE8	; 232
 b6c:	d4 f3       	brlt	.-12     	; 0xb62 <__divsf3_pse+0x6c>
 b6e:	86 95       	lsr	r24
 b70:	77 95       	ror	r23
 b72:	67 95       	ror	r22
 b74:	b7 95       	ror	r27
 b76:	f7 95       	ror	r31
 b78:	9f 5f       	subi	r25, 0xFF	; 255
 b7a:	c9 f7       	brne	.-14     	; 0xb6e <__divsf3_pse+0x78>
 b7c:	88 0f       	add	r24, r24
 b7e:	91 1d       	adc	r25, r1
 b80:	96 95       	lsr	r25
 b82:	87 95       	ror	r24
 b84:	97 f9       	bld	r25, 7
 b86:	08 95       	ret
 b88:	e1 e0       	ldi	r30, 0x01	; 1
 b8a:	66 0f       	add	r22, r22
 b8c:	77 1f       	adc	r23, r23
 b8e:	88 1f       	adc	r24, r24
 b90:	bb 1f       	adc	r27, r27
 b92:	62 17       	cp	r22, r18
 b94:	73 07       	cpc	r23, r19
 b96:	84 07       	cpc	r24, r20
 b98:	ba 07       	cpc	r27, r26
 b9a:	20 f0       	brcs	.+8      	; 0xba4 <__divsf3_pse+0xae>
 b9c:	62 1b       	sub	r22, r18
 b9e:	73 0b       	sbc	r23, r19
 ba0:	84 0b       	sbc	r24, r20
 ba2:	ba 0b       	sbc	r27, r26
 ba4:	ee 1f       	adc	r30, r30
 ba6:	88 f7       	brcc	.-30     	; 0xb8a <__divsf3_pse+0x94>
 ba8:	e0 95       	com	r30
 baa:	08 95       	ret

00000bac <__fixunssfsi>:
 bac:	0e 94 72 06 	call	0xce4	; 0xce4 <__fp_splitA>
 bb0:	88 f0       	brcs	.+34     	; 0xbd4 <__fixunssfsi+0x28>
 bb2:	9f 57       	subi	r25, 0x7F	; 127
 bb4:	98 f0       	brcs	.+38     	; 0xbdc <__fixunssfsi+0x30>
 bb6:	b9 2f       	mov	r27, r25
 bb8:	99 27       	eor	r25, r25
 bba:	b7 51       	subi	r27, 0x17	; 23
 bbc:	b0 f0       	brcs	.+44     	; 0xbea <__fixunssfsi+0x3e>
 bbe:	e1 f0       	breq	.+56     	; 0xbf8 <__fixunssfsi+0x4c>
 bc0:	66 0f       	add	r22, r22
 bc2:	77 1f       	adc	r23, r23
 bc4:	88 1f       	adc	r24, r24
 bc6:	99 1f       	adc	r25, r25
 bc8:	1a f0       	brmi	.+6      	; 0xbd0 <__fixunssfsi+0x24>
 bca:	ba 95       	dec	r27
 bcc:	c9 f7       	brne	.-14     	; 0xbc0 <__fixunssfsi+0x14>
 bce:	14 c0       	rjmp	.+40     	; 0xbf8 <__fixunssfsi+0x4c>
 bd0:	b1 30       	cpi	r27, 0x01	; 1
 bd2:	91 f0       	breq	.+36     	; 0xbf8 <__fixunssfsi+0x4c>
 bd4:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fp_zero>
 bd8:	b1 e0       	ldi	r27, 0x01	; 1
 bda:	08 95       	ret
 bdc:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_zero>
 be0:	67 2f       	mov	r22, r23
 be2:	78 2f       	mov	r23, r24
 be4:	88 27       	eor	r24, r24
 be6:	b8 5f       	subi	r27, 0xF8	; 248
 be8:	39 f0       	breq	.+14     	; 0xbf8 <__fixunssfsi+0x4c>
 bea:	b9 3f       	cpi	r27, 0xF9	; 249
 bec:	cc f3       	brlt	.-14     	; 0xbe0 <__fixunssfsi+0x34>
 bee:	86 95       	lsr	r24
 bf0:	77 95       	ror	r23
 bf2:	67 95       	ror	r22
 bf4:	b3 95       	inc	r27
 bf6:	d9 f7       	brne	.-10     	; 0xbee <__fixunssfsi+0x42>
 bf8:	3e f4       	brtc	.+14     	; 0xc08 <__fixunssfsi+0x5c>
 bfa:	90 95       	com	r25
 bfc:	80 95       	com	r24
 bfe:	70 95       	com	r23
 c00:	61 95       	neg	r22
 c02:	7f 4f       	sbci	r23, 0xFF	; 255
 c04:	8f 4f       	sbci	r24, 0xFF	; 255
 c06:	9f 4f       	sbci	r25, 0xFF	; 255
 c08:	08 95       	ret

00000c0a <__floatunsisf>:
 c0a:	e8 94       	clt
 c0c:	09 c0       	rjmp	.+18     	; 0xc20 <__floatsisf+0x12>

00000c0e <__floatsisf>:
 c0e:	97 fb       	bst	r25, 7
 c10:	3e f4       	brtc	.+14     	; 0xc20 <__floatsisf+0x12>
 c12:	90 95       	com	r25
 c14:	80 95       	com	r24
 c16:	70 95       	com	r23
 c18:	61 95       	neg	r22
 c1a:	7f 4f       	sbci	r23, 0xFF	; 255
 c1c:	8f 4f       	sbci	r24, 0xFF	; 255
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	99 23       	and	r25, r25
 c22:	a9 f0       	breq	.+42     	; 0xc4e <__floatsisf+0x40>
 c24:	f9 2f       	mov	r31, r25
 c26:	96 e9       	ldi	r25, 0x96	; 150
 c28:	bb 27       	eor	r27, r27
 c2a:	93 95       	inc	r25
 c2c:	f6 95       	lsr	r31
 c2e:	87 95       	ror	r24
 c30:	77 95       	ror	r23
 c32:	67 95       	ror	r22
 c34:	b7 95       	ror	r27
 c36:	f1 11       	cpse	r31, r1
 c38:	f8 cf       	rjmp	.-16     	; 0xc2a <__floatsisf+0x1c>
 c3a:	fa f4       	brpl	.+62     	; 0xc7a <__floatsisf+0x6c>
 c3c:	bb 0f       	add	r27, r27
 c3e:	11 f4       	brne	.+4      	; 0xc44 <__floatsisf+0x36>
 c40:	60 ff       	sbrs	r22, 0
 c42:	1b c0       	rjmp	.+54     	; 0xc7a <__floatsisf+0x6c>
 c44:	6f 5f       	subi	r22, 0xFF	; 255
 c46:	7f 4f       	sbci	r23, 0xFF	; 255
 c48:	8f 4f       	sbci	r24, 0xFF	; 255
 c4a:	9f 4f       	sbci	r25, 0xFF	; 255
 c4c:	16 c0       	rjmp	.+44     	; 0xc7a <__floatsisf+0x6c>
 c4e:	88 23       	and	r24, r24
 c50:	11 f0       	breq	.+4      	; 0xc56 <__floatsisf+0x48>
 c52:	96 e9       	ldi	r25, 0x96	; 150
 c54:	11 c0       	rjmp	.+34     	; 0xc78 <__floatsisf+0x6a>
 c56:	77 23       	and	r23, r23
 c58:	21 f0       	breq	.+8      	; 0xc62 <__floatsisf+0x54>
 c5a:	9e e8       	ldi	r25, 0x8E	; 142
 c5c:	87 2f       	mov	r24, r23
 c5e:	76 2f       	mov	r23, r22
 c60:	05 c0       	rjmp	.+10     	; 0xc6c <__floatsisf+0x5e>
 c62:	66 23       	and	r22, r22
 c64:	71 f0       	breq	.+28     	; 0xc82 <__floatsisf+0x74>
 c66:	96 e8       	ldi	r25, 0x86	; 134
 c68:	86 2f       	mov	r24, r22
 c6a:	70 e0       	ldi	r23, 0x00	; 0
 c6c:	60 e0       	ldi	r22, 0x00	; 0
 c6e:	2a f0       	brmi	.+10     	; 0xc7a <__floatsisf+0x6c>
 c70:	9a 95       	dec	r25
 c72:	66 0f       	add	r22, r22
 c74:	77 1f       	adc	r23, r23
 c76:	88 1f       	adc	r24, r24
 c78:	da f7       	brpl	.-10     	; 0xc70 <__floatsisf+0x62>
 c7a:	88 0f       	add	r24, r24
 c7c:	96 95       	lsr	r25
 c7e:	87 95       	ror	r24
 c80:	97 f9       	bld	r25, 7
 c82:	08 95       	ret

00000c84 <__fp_inf>:
 c84:	97 f9       	bld	r25, 7
 c86:	9f 67       	ori	r25, 0x7F	; 127
 c88:	80 e8       	ldi	r24, 0x80	; 128
 c8a:	70 e0       	ldi	r23, 0x00	; 0
 c8c:	60 e0       	ldi	r22, 0x00	; 0
 c8e:	08 95       	ret

00000c90 <__fp_nan>:
 c90:	9f ef       	ldi	r25, 0xFF	; 255
 c92:	80 ec       	ldi	r24, 0xC0	; 192
 c94:	08 95       	ret

00000c96 <__fp_pscA>:
 c96:	00 24       	eor	r0, r0
 c98:	0a 94       	dec	r0
 c9a:	16 16       	cp	r1, r22
 c9c:	17 06       	cpc	r1, r23
 c9e:	18 06       	cpc	r1, r24
 ca0:	09 06       	cpc	r0, r25
 ca2:	08 95       	ret

00000ca4 <__fp_pscB>:
 ca4:	00 24       	eor	r0, r0
 ca6:	0a 94       	dec	r0
 ca8:	12 16       	cp	r1, r18
 caa:	13 06       	cpc	r1, r19
 cac:	14 06       	cpc	r1, r20
 cae:	05 06       	cpc	r0, r21
 cb0:	08 95       	ret

00000cb2 <__fp_round>:
 cb2:	09 2e       	mov	r0, r25
 cb4:	03 94       	inc	r0
 cb6:	00 0c       	add	r0, r0
 cb8:	11 f4       	brne	.+4      	; 0xcbe <__fp_round+0xc>
 cba:	88 23       	and	r24, r24
 cbc:	52 f0       	brmi	.+20     	; 0xcd2 <__fp_round+0x20>
 cbe:	bb 0f       	add	r27, r27
 cc0:	40 f4       	brcc	.+16     	; 0xcd2 <__fp_round+0x20>
 cc2:	bf 2b       	or	r27, r31
 cc4:	11 f4       	brne	.+4      	; 0xcca <__fp_round+0x18>
 cc6:	60 ff       	sbrs	r22, 0
 cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__fp_round+0x20>
 cca:	6f 5f       	subi	r22, 0xFF	; 255
 ccc:	7f 4f       	sbci	r23, 0xFF	; 255
 cce:	8f 4f       	sbci	r24, 0xFF	; 255
 cd0:	9f 4f       	sbci	r25, 0xFF	; 255
 cd2:	08 95       	ret

00000cd4 <__fp_split3>:
 cd4:	57 fd       	sbrc	r21, 7
 cd6:	90 58       	subi	r25, 0x80	; 128
 cd8:	44 0f       	add	r20, r20
 cda:	55 1f       	adc	r21, r21
 cdc:	59 f0       	breq	.+22     	; 0xcf4 <__fp_splitA+0x10>
 cde:	5f 3f       	cpi	r21, 0xFF	; 255
 ce0:	71 f0       	breq	.+28     	; 0xcfe <__fp_splitA+0x1a>
 ce2:	47 95       	ror	r20

00000ce4 <__fp_splitA>:
 ce4:	88 0f       	add	r24, r24
 ce6:	97 fb       	bst	r25, 7
 ce8:	99 1f       	adc	r25, r25
 cea:	61 f0       	breq	.+24     	; 0xd04 <__fp_splitA+0x20>
 cec:	9f 3f       	cpi	r25, 0xFF	; 255
 cee:	79 f0       	breq	.+30     	; 0xd0e <__fp_splitA+0x2a>
 cf0:	87 95       	ror	r24
 cf2:	08 95       	ret
 cf4:	12 16       	cp	r1, r18
 cf6:	13 06       	cpc	r1, r19
 cf8:	14 06       	cpc	r1, r20
 cfa:	55 1f       	adc	r21, r21
 cfc:	f2 cf       	rjmp	.-28     	; 0xce2 <__fp_split3+0xe>
 cfe:	46 95       	lsr	r20
 d00:	f1 df       	rcall	.-30     	; 0xce4 <__fp_splitA>
 d02:	08 c0       	rjmp	.+16     	; 0xd14 <__fp_splitA+0x30>
 d04:	16 16       	cp	r1, r22
 d06:	17 06       	cpc	r1, r23
 d08:	18 06       	cpc	r1, r24
 d0a:	99 1f       	adc	r25, r25
 d0c:	f1 cf       	rjmp	.-30     	; 0xcf0 <__fp_splitA+0xc>
 d0e:	86 95       	lsr	r24
 d10:	71 05       	cpc	r23, r1
 d12:	61 05       	cpc	r22, r1
 d14:	08 94       	sec
 d16:	08 95       	ret

00000d18 <__fp_zero>:
 d18:	e8 94       	clt

00000d1a <__fp_szero>:
 d1a:	bb 27       	eor	r27, r27
 d1c:	66 27       	eor	r22, r22
 d1e:	77 27       	eor	r23, r23
 d20:	cb 01       	movw	r24, r22
 d22:	97 f9       	bld	r25, 7
 d24:	08 95       	ret

00000d26 <__umulhisi3>:
 d26:	a2 9f       	mul	r26, r18
 d28:	b0 01       	movw	r22, r0
 d2a:	b3 9f       	mul	r27, r19
 d2c:	c0 01       	movw	r24, r0
 d2e:	a3 9f       	mul	r26, r19
 d30:	70 0d       	add	r23, r0
 d32:	81 1d       	adc	r24, r1
 d34:	11 24       	eor	r1, r1
 d36:	91 1d       	adc	r25, r1
 d38:	b2 9f       	mul	r27, r18
 d3a:	70 0d       	add	r23, r0
 d3c:	81 1d       	adc	r24, r1
 d3e:	11 24       	eor	r1, r1
 d40:	91 1d       	adc	r25, r1
 d42:	08 95       	ret

00000d44 <__itoa_ncheck>:
 d44:	bb 27       	eor	r27, r27
 d46:	4a 30       	cpi	r20, 0x0A	; 10
 d48:	31 f4       	brne	.+12     	; 0xd56 <__itoa_ncheck+0x12>
 d4a:	99 23       	and	r25, r25
 d4c:	22 f4       	brpl	.+8      	; 0xd56 <__itoa_ncheck+0x12>
 d4e:	bd e2       	ldi	r27, 0x2D	; 45
 d50:	90 95       	com	r25
 d52:	81 95       	neg	r24
 d54:	9f 4f       	sbci	r25, 0xFF	; 255
 d56:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__utoa_common>

00000d5a <__utoa_ncheck>:
 d5a:	bb 27       	eor	r27, r27

00000d5c <__utoa_common>:
 d5c:	fb 01       	movw	r30, r22
 d5e:	55 27       	eor	r21, r21
 d60:	aa 27       	eor	r26, r26
 d62:	88 0f       	add	r24, r24
 d64:	99 1f       	adc	r25, r25
 d66:	aa 1f       	adc	r26, r26
 d68:	a4 17       	cp	r26, r20
 d6a:	10 f0       	brcs	.+4      	; 0xd70 <__utoa_common+0x14>
 d6c:	a4 1b       	sub	r26, r20
 d6e:	83 95       	inc	r24
 d70:	50 51       	subi	r21, 0x10	; 16
 d72:	b9 f7       	brne	.-18     	; 0xd62 <__utoa_common+0x6>
 d74:	a0 5d       	subi	r26, 0xD0	; 208
 d76:	aa 33       	cpi	r26, 0x3A	; 58
 d78:	08 f0       	brcs	.+2      	; 0xd7c <__utoa_common+0x20>
 d7a:	a9 5d       	subi	r26, 0xD9	; 217
 d7c:	a1 93       	st	Z+, r26
 d7e:	00 97       	sbiw	r24, 0x00	; 0
 d80:	79 f7       	brne	.-34     	; 0xd60 <__utoa_common+0x4>
 d82:	b1 11       	cpse	r27, r1
 d84:	b1 93       	st	Z+, r27
 d86:	11 92       	st	Z+, r1
 d88:	cb 01       	movw	r24, r22
 d8a:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <strrev>

00000d8e <strrev>:
 d8e:	dc 01       	movw	r26, r24
 d90:	fc 01       	movw	r30, r24
 d92:	67 2f       	mov	r22, r23
 d94:	71 91       	ld	r23, Z+
 d96:	77 23       	and	r23, r23
 d98:	e1 f7       	brne	.-8      	; 0xd92 <strrev+0x4>
 d9a:	32 97       	sbiw	r30, 0x02	; 2
 d9c:	04 c0       	rjmp	.+8      	; 0xda6 <strrev+0x18>
 d9e:	7c 91       	ld	r23, X
 da0:	6d 93       	st	X+, r22
 da2:	70 83       	st	Z, r23
 da4:	62 91       	ld	r22, -Z
 da6:	ae 17       	cp	r26, r30
 da8:	bf 07       	cpc	r27, r31
 daa:	c8 f3       	brcs	.-14     	; 0xd9e <strrev+0x10>
 dac:	08 95       	ret

00000dae <_exit>:
 dae:	f8 94       	cli

00000db0 <__stop_program>:
 db0:	ff cf       	rjmp	.-2      	; 0xdb0 <__stop_program>
