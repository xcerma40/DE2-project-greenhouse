
GreenhouseSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00001658  000016ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001658  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  0080012a  0080012a  00001716  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029f2  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a6  00000000  00000000  0000442a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015ab  00000000  00000000  000054d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d4  00000000  00000000  00006a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f7  00000000  00000000  00007150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cb6  00000000  00000000  00007b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  000097fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_13>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__vector_16>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_18>
      4c:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__vector_19>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 21 04 	jmp	0x842	; 0x842 <__vector_21>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <read_luminescence+0x8>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <main+0x3c>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <lcd_init+0x8e>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <GPIO_write_low+0x16>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e8 e5       	ldi	r30, 0x58	; 88
     176:	f6 e1       	ldi	r31, 0x16	; 22
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	aa 32       	cpi	r26, 0x2A	; 42
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	aa e2       	ldi	r26, 0x2A	; 42
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	aa 37       	cpi	r26, 0x7A	; 122
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 39 03 	call	0x672	; 0x672 <main>
     198:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <GPIO_config_output>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
     1a0:	fc 01       	movw	r30, r24
     1a2:	40 81       	ld	r20, Z
     1a4:	21 e0       	ldi	r18, 0x01	; 1
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <GPIO_config_output+0xe>
     1aa:	22 0f       	add	r18, r18
     1ac:	33 1f       	adc	r19, r19
     1ae:	6a 95       	dec	r22
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <GPIO_config_output+0xa>
     1b2:	24 2b       	or	r18, r20
     1b4:	20 83       	st	Z, r18
     1b6:	08 95       	ret

000001b8 <GPIO_write_low>:
     1b8:	fc 01       	movw	r30, r24
     1ba:	90 81       	ld	r25, Z
     1bc:	21 e0       	ldi	r18, 0x01	; 1
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <GPIO_write_low+0xe>
     1c2:	22 0f       	add	r18, r18
     1c4:	33 1f       	adc	r19, r19
     1c6:	6a 95       	dec	r22
     1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <GPIO_write_low+0xa>
     1ca:	20 95       	com	r18
     1cc:	29 23       	and	r18, r25
     1ce:	20 83       	st	Z, r18
     1d0:	08 95       	ret

000001d2 <GPIO_write_high>:
     1d2:	fc 01       	movw	r30, r24
     1d4:	40 81       	ld	r20, Z
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <GPIO_write_high+0xe>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	6a 95       	dec	r22
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <GPIO_write_high+0xa>
     1e4:	24 2b       	or	r18, r20
     1e6:	20 83       	st	Z, r18
     1e8:	08 95       	ret

000001ea <GPIO_read>:
 * Function: GPIO_read()
 **********************************************************************/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	
	return (*reg_name & (1 << pin_num)) >> pin_num;
     1ea:	fc 01       	movw	r30, r24
     1ec:	40 81       	ld	r20, Z
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	9c 01       	movw	r18, r24
     1f4:	06 2e       	mov	r0, r22
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <GPIO_read+0x12>
     1f8:	22 0f       	add	r18, r18
     1fa:	33 1f       	adc	r19, r19
     1fc:	0a 94       	dec	r0
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <GPIO_read+0xe>
     200:	84 2f       	mov	r24, r20
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	82 23       	and	r24, r18
     206:	93 23       	and	r25, r19
     208:	02 c0       	rjmp	.+4      	; 0x20e <GPIO_read+0x24>
     20a:	95 95       	asr	r25
     20c:	87 95       	ror	r24
     20e:	6a 95       	dec	r22
     210:	e2 f7       	brpl	.-8      	; 0x20a <GPIO_read+0x20>
}
     212:	08 95       	ret

00000214 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
     214:	85 b1       	in	r24, 0x05	; 5
     216:	82 60       	ori	r24, 0x02	; 2
     218:	85 b9       	out	0x05, r24	; 5
     21a:	85 e0       	ldi	r24, 0x05	; 5
     21c:	8a 95       	dec	r24
     21e:	f1 f7       	brne	.-4      	; 0x21c <toggle_e+0x8>
     220:	00 00       	nop
     222:	85 b1       	in	r24, 0x05	; 5
     224:	8d 7f       	andi	r24, 0xFD	; 253
     226:	85 b9       	out	0x05, r24	; 5
     228:	08 95       	ret

0000022a <lcd_write>:
     22a:	cf 93       	push	r28
     22c:	c8 2f       	mov	r28, r24
     22e:	66 23       	and	r22, r22
     230:	21 f0       	breq	.+8      	; 0x23a <lcd_write+0x10>
     232:	85 b1       	in	r24, 0x05	; 5
     234:	81 60       	ori	r24, 0x01	; 1
     236:	85 b9       	out	0x05, r24	; 5
     238:	03 c0       	rjmp	.+6      	; 0x240 <lcd_write+0x16>
     23a:	85 b1       	in	r24, 0x05	; 5
     23c:	8e 7f       	andi	r24, 0xFE	; 254
     23e:	85 b9       	out	0x05, r24	; 5
     240:	8a b1       	in	r24, 0x0a	; 10
     242:	80 61       	ori	r24, 0x10	; 16
     244:	8a b9       	out	0x0a, r24	; 10
     246:	8a b1       	in	r24, 0x0a	; 10
     248:	80 62       	ori	r24, 0x20	; 32
     24a:	8a b9       	out	0x0a, r24	; 10
     24c:	8a b1       	in	r24, 0x0a	; 10
     24e:	80 64       	ori	r24, 0x40	; 64
     250:	8a b9       	out	0x0a, r24	; 10
     252:	8a b1       	in	r24, 0x0a	; 10
     254:	80 68       	ori	r24, 0x80	; 128
     256:	8a b9       	out	0x0a, r24	; 10
     258:	8b b1       	in	r24, 0x0b	; 11
     25a:	8f 77       	andi	r24, 0x7F	; 127
     25c:	8b b9       	out	0x0b, r24	; 11
     25e:	8b b1       	in	r24, 0x0b	; 11
     260:	8f 7b       	andi	r24, 0xBF	; 191
     262:	8b b9       	out	0x0b, r24	; 11
     264:	8b b1       	in	r24, 0x0b	; 11
     266:	8f 7d       	andi	r24, 0xDF	; 223
     268:	8b b9       	out	0x0b, r24	; 11
     26a:	8b b1       	in	r24, 0x0b	; 11
     26c:	8f 7e       	andi	r24, 0xEF	; 239
     26e:	8b b9       	out	0x0b, r24	; 11
     270:	cc 23       	and	r28, r28
     272:	1c f4       	brge	.+6      	; 0x27a <lcd_write+0x50>
     274:	8b b1       	in	r24, 0x0b	; 11
     276:	80 68       	ori	r24, 0x80	; 128
     278:	8b b9       	out	0x0b, r24	; 11
     27a:	c6 ff       	sbrs	r28, 6
     27c:	03 c0       	rjmp	.+6      	; 0x284 <lcd_write+0x5a>
     27e:	8b b1       	in	r24, 0x0b	; 11
     280:	80 64       	ori	r24, 0x40	; 64
     282:	8b b9       	out	0x0b, r24	; 11
     284:	c5 ff       	sbrs	r28, 5
     286:	03 c0       	rjmp	.+6      	; 0x28e <lcd_write+0x64>
     288:	8b b1       	in	r24, 0x0b	; 11
     28a:	80 62       	ori	r24, 0x20	; 32
     28c:	8b b9       	out	0x0b, r24	; 11
     28e:	c4 ff       	sbrs	r28, 4
     290:	03 c0       	rjmp	.+6      	; 0x298 <lcd_write+0x6e>
     292:	8b b1       	in	r24, 0x0b	; 11
     294:	80 61       	ori	r24, 0x10	; 16
     296:	8b b9       	out	0x0b, r24	; 11
     298:	0e 94 0a 01 	call	0x214	; 0x214 <toggle_e>
     29c:	8b b1       	in	r24, 0x0b	; 11
     29e:	8f 77       	andi	r24, 0x7F	; 127
     2a0:	8b b9       	out	0x0b, r24	; 11
     2a2:	8b b1       	in	r24, 0x0b	; 11
     2a4:	8f 7b       	andi	r24, 0xBF	; 191
     2a6:	8b b9       	out	0x0b, r24	; 11
     2a8:	8b b1       	in	r24, 0x0b	; 11
     2aa:	8f 7d       	andi	r24, 0xDF	; 223
     2ac:	8b b9       	out	0x0b, r24	; 11
     2ae:	8b b1       	in	r24, 0x0b	; 11
     2b0:	8f 7e       	andi	r24, 0xEF	; 239
     2b2:	8b b9       	out	0x0b, r24	; 11
     2b4:	c3 ff       	sbrs	r28, 3
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <lcd_write+0x94>
     2b8:	8b b1       	in	r24, 0x0b	; 11
     2ba:	80 68       	ori	r24, 0x80	; 128
     2bc:	8b b9       	out	0x0b, r24	; 11
     2be:	c2 ff       	sbrs	r28, 2
     2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <lcd_write+0x9e>
     2c2:	8b b1       	in	r24, 0x0b	; 11
     2c4:	80 64       	ori	r24, 0x40	; 64
     2c6:	8b b9       	out	0x0b, r24	; 11
     2c8:	c1 ff       	sbrs	r28, 1
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <lcd_write+0xa8>
     2cc:	8b b1       	in	r24, 0x0b	; 11
     2ce:	80 62       	ori	r24, 0x20	; 32
     2d0:	8b b9       	out	0x0b, r24	; 11
     2d2:	c0 ff       	sbrs	r28, 0
     2d4:	03 c0       	rjmp	.+6      	; 0x2dc <lcd_write+0xb2>
     2d6:	8b b1       	in	r24, 0x0b	; 11
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	8b b9       	out	0x0b, r24	; 11
     2dc:	0e 94 0a 01 	call	0x214	; 0x214 <toggle_e>
     2e0:	8b b1       	in	r24, 0x0b	; 11
     2e2:	80 61       	ori	r24, 0x10	; 16
     2e4:	8b b9       	out	0x0b, r24	; 11
     2e6:	8b b1       	in	r24, 0x0b	; 11
     2e8:	80 62       	ori	r24, 0x20	; 32
     2ea:	8b b9       	out	0x0b, r24	; 11
     2ec:	8b b1       	in	r24, 0x0b	; 11
     2ee:	80 64       	ori	r24, 0x40	; 64
     2f0:	8b b9       	out	0x0b, r24	; 11
     2f2:	8b b1       	in	r24, 0x0b	; 11
     2f4:	80 68       	ori	r24, 0x80	; 128
     2f6:	8b b9       	out	0x0b, r24	; 11
     2f8:	87 eb       	ldi	r24, 0xB7	; 183
     2fa:	9b e0       	ldi	r25, 0x0B	; 11
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <lcd_write+0xd2>
     300:	00 c0       	rjmp	.+0      	; 0x302 <lcd_write+0xd8>
     302:	00 00       	nop
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <lcd_command>:
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_write>
     30e:	08 95       	ret

00000310 <lcd_gotoxy>:
     310:	61 11       	cpse	r22, r1
     312:	04 c0       	rjmp	.+8      	; 0x31c <lcd_gotoxy+0xc>
     314:	80 58       	subi	r24, 0x80	; 128
     316:	0e 94 84 01 	call	0x308	; 0x308 <lcd_command>
     31a:	08 95       	ret
     31c:	80 54       	subi	r24, 0x40	; 64
     31e:	0e 94 84 01 	call	0x308	; 0x308 <lcd_command>
     322:	08 95       	ret

00000324 <lcd_clrscr>:
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	0e 94 84 01 	call	0x308	; 0x308 <lcd_command>
     32a:	08 95       	ret

0000032c <lcd_putc>:
     32c:	61 e0       	ldi	r22, 0x01	; 1
     32e:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_write>
     332:	08 95       	ret

00000334 <lcd_puts>:
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	fc 01       	movw	r30, r24
     33a:	03 c0       	rjmp	.+6      	; 0x342 <lcd_puts+0xe>
     33c:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_putc>
     340:	fe 01       	movw	r30, r28
     342:	ef 01       	movw	r28, r30
     344:	21 96       	adiw	r28, 0x01	; 1
     346:	80 81       	ld	r24, Z
     348:	81 11       	cpse	r24, r1
     34a:	f8 cf       	rjmp	.-16     	; 0x33c <lcd_puts+0x8>
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     352:	cf 93       	push	r28
     354:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     356:	84 b1       	in	r24, 0x04	; 4
     358:	81 60       	ori	r24, 0x01	; 1
     35a:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     35c:	8a b1       	in	r24, 0x0a	; 10
     35e:	80 62       	ori	r24, 0x20	; 32
     360:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     362:	84 b1       	in	r24, 0x04	; 4
     364:	82 60       	ori	r24, 0x02	; 2
     366:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     368:	8a b1       	in	r24, 0x0a	; 10
     36a:	80 61       	ori	r24, 0x10	; 16
     36c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     36e:	8a b1       	in	r24, 0x0a	; 10
     370:	80 62       	ori	r24, 0x20	; 32
     372:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     374:	8a b1       	in	r24, 0x0a	; 10
     376:	80 64       	ori	r24, 0x40	; 64
     378:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     37a:	8a b1       	in	r24, 0x0a	; 10
     37c:	80 68       	ori	r24, 0x80	; 128
     37e:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	99 ef       	ldi	r25, 0xF9	; 249
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	f1 f7       	brne	.-4      	; 0x384 <lcd_init+0x32>
     388:	00 c0       	rjmp	.+0      	; 0x38a <lcd_init+0x38>
     38a:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     38c:	8b b1       	in	r24, 0x0b	; 11
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     392:	8b b1       	in	r24, 0x0b	; 11
     394:	80 61       	ori	r24, 0x10	; 16
     396:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
     398:	0e 94 0a 01 	call	0x214	; 0x214 <toggle_e>
     39c:	8f e1       	ldi	r24, 0x1F	; 31
     39e:	9e e4       	ldi	r25, 0x4E	; 78
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <lcd_init+0x4e>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <lcd_init+0x54>
     3a6:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     3a8:	0e 94 0a 01 	call	0x214	; 0x214 <toggle_e>
     3ac:	8f ef       	ldi	r24, 0xFF	; 255
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <lcd_init+0x5e>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <lcd_init+0x64>
     3b6:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     3b8:	0e 94 0a 01 	call	0x214	; 0x214 <toggle_e>
     3bc:	8f ef       	ldi	r24, 0xFF	; 255
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_init+0x6e>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <lcd_init+0x74>
     3c6:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     3c8:	8b b1       	in	r24, 0x0b	; 11
     3ca:	8f 7e       	andi	r24, 0xEF	; 239
     3cc:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
     3ce:	0e 94 0a 01 	call	0x214	; 0x214 <toggle_e>
     3d2:	8f ef       	ldi	r24, 0xFF	; 255
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_init+0x84>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <lcd_init+0x8a>
     3dc:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     3de:	88 e2       	ldi	r24, 0x28	; 40
     3e0:	0e 94 84 01 	call	0x308	; 0x308 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     3e4:	88 e0       	ldi	r24, 0x08	; 8
     3e6:	0e 94 84 01 	call	0x308	; 0x308 <lcd_command>
    lcd_clrscr();                  /* display clear                */
     3ea:	0e 94 92 01 	call	0x324	; 0x324 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     3ee:	86 e0       	ldi	r24, 0x06	; 6
     3f0:	0e 94 84 01 	call	0x308	; 0x308 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     3f4:	8c 2f       	mov	r24, r28
     3f6:	0e 94 84 01 	call	0x308	; 0x308 <lcd_command>
}/* lcd_init */
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
     3fe:	87 b1       	in	r24, 0x07	; 7
     400:	8f 7c       	andi	r24, 0xCF	; 207
     402:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
     404:	88 b1       	in	r24, 0x08	; 8
     406:	80 63       	ori	r24, 0x30	; 48
     408:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
     40a:	e9 eb       	ldi	r30, 0xB9	; 185
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	80 81       	ld	r24, Z
     410:	8c 7f       	andi	r24, 0xFC	; 252
     412:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
     414:	88 e9       	ldi	r24, 0x98	; 152
     416:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     41a:	08 95       	ret

0000041c <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     41c:	94 ea       	ldi	r25, 0xA4	; 164
     41e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
     422:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     426:	99 23       	and	r25, r25
     428:	e4 f7       	brge	.-8      	; 0x422 <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
     42a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
     42e:	84 e8       	ldi	r24, 0x84	; 132
     430:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
     434:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     438:	88 23       	and	r24, r24
     43a:	e4 f7       	brge	.-8      	; 0x434 <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
     43c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     440:	88 7f       	andi	r24, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
     442:	88 31       	cpi	r24, 0x18	; 24
     444:	21 f0       	breq	.+8      	; 0x44e <twi_start+0x32>
     446:	80 34       	cpi	r24, 0x40	; 64
     448:	21 f4       	brne	.+8      	; 0x452 <twi_start+0x36>
    {
        return 0;   /* Slave device accessible */
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	08 95       	ret
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	08 95       	ret
    }
    else
    {
        return 1;   /* Failed to access slave device */
     452:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     454:	08 95       	ret

00000456 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
     456:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
     45a:	84 e8       	ldi	r24, 0x84	; 132
     45c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
     460:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     464:	88 23       	and	r24, r24
     466:	e4 f7       	brge	.-8      	; 0x460 <twi_write+0xa>
}
     468:	08 95       	ret

0000046a <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     46a:	84 ec       	ldi	r24, 0xC4	; 196
     46c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
     470:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     474:	88 23       	and	r24, r24
     476:	e4 f7       	brge	.-8      	; 0x470 <twi_read_ack+0x6>
    return (TWDR);
     478:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     47c:	08 95       	ret

0000047e <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
     47e:	84 e8       	ldi	r24, 0x84	; 132
     480:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
     484:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     488:	88 23       	and	r24, r24
     48a:	e4 f7       	brge	.-8      	; 0x484 <twi_read_nack+0x6>
    return (TWDR);
     48c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     490:	08 95       	ret

00000492 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     492:	84 e9       	ldi	r24, 0x94	; 148
     494:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     498:	08 95       	ret

0000049a <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
     49a:	1f 92       	push	r1
     49c:	0f 92       	push	r0
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	0f 92       	push	r0
     4a2:	11 24       	eor	r1, r1
     4a4:	2f 93       	push	r18
     4a6:	8f 93       	push	r24
     4a8:	9f 93       	push	r25
     4aa:	ef 93       	push	r30
     4ac:	ff 93       	push	r31
     4ae:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     4b2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     4b6:	8c 71       	andi	r24, 0x1C	; 28
     4b8:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <UART_RxHead>
     4bc:	ef 5f       	subi	r30, 0xFF	; 255
     4be:	ef 71       	andi	r30, 0x1F	; 31
     4c0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <UART_RxTail>
     4c4:	e9 17       	cp	r30, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <__vector_18+0x3c>
     4c8:	e0 93 2c 01 	sts	0x012C, r30	; 0x80012c <UART_RxHead>
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	e1 5d       	subi	r30, 0xD1	; 209
     4d0:	fe 4f       	sbci	r31, 0xFE	; 254
     4d2:	20 83       	st	Z, r18
     4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <__vector_18+0x3e>
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <__data_end>
     4dc:	89 2b       	or	r24, r25
     4de:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
     4e2:	ff 91       	pop	r31
     4e4:	ef 91       	pop	r30
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	2f 91       	pop	r18
     4ec:	0f 90       	pop	r0
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	0f 90       	pop	r0
     4f2:	1f 90       	pop	r1
     4f4:	18 95       	reti

000004f6 <__vector_19>:
     4f6:	1f 92       	push	r1
     4f8:	0f 92       	push	r0
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	0f 92       	push	r0
     4fe:	11 24       	eor	r1, r1
     500:	8f 93       	push	r24
     502:	9f 93       	push	r25
     504:	ef 93       	push	r30
     506:	ff 93       	push	r31
     508:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <UART_TxHead>
     50c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <UART_TxTail>
     510:	98 17       	cp	r25, r24
     512:	69 f0       	breq	.+26     	; 0x52e <__vector_19+0x38>
     514:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <UART_TxTail>
     518:	ef 5f       	subi	r30, 0xFF	; 255
     51a:	ef 71       	andi	r30, 0x1F	; 31
     51c:	e0 93 2d 01 	sts	0x012D, r30	; 0x80012d <UART_TxTail>
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	e1 5b       	subi	r30, 0xB1	; 177
     524:	fe 4f       	sbci	r31, 0xFE	; 254
     526:	80 81       	ld	r24, Z
     528:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     52c:	05 c0       	rjmp	.+10     	; 0x538 <__vector_19+0x42>
     52e:	e1 ec       	ldi	r30, 0xC1	; 193
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	8f 7d       	andi	r24, 0xDF	; 223
     536:	80 83       	st	Z, r24
     538:	ff 91       	pop	r31
     53a:	ef 91       	pop	r30
     53c:	9f 91       	pop	r25
     53e:	8f 91       	pop	r24
     540:	0f 90       	pop	r0
     542:	0f be       	out	0x3f, r0	; 63
     544:	0f 90       	pop	r0
     546:	1f 90       	pop	r1
     548:	18 95       	reti

0000054a <uart_init>:
     54a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <UART_TxHead>
     54e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <UART_TxTail>
     552:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <UART_RxHead>
     556:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <UART_RxTail>
     55a:	28 2f       	mov	r18, r24
     55c:	39 2f       	mov	r19, r25
     55e:	33 23       	and	r19, r19
     560:	1c f4       	brge	.+6      	; 0x568 <uart_init+0x1e>
     562:	22 e0       	ldi	r18, 0x02	; 2
     564:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     568:	90 78       	andi	r25, 0x80	; 128
     56a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     56e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     572:	88 e9       	ldi	r24, 0x98	; 152
     574:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     578:	86 e0       	ldi	r24, 0x06	; 6
     57a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     57e:	08 95       	ret

00000580 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     580:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <UART_TxHead>
     584:	2f 5f       	subi	r18, 0xFF	; 255
     586:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
     588:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <UART_TxTail>
     58c:	29 17       	cp	r18, r25
     58e:	e1 f3       	breq	.-8      	; 0x588 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
     590:	e2 2f       	mov	r30, r18
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	e1 5b       	subi	r30, 0xB1	; 177
     596:	fe 4f       	sbci	r31, 0xFE	; 254
     598:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
     59a:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
     59e:	e1 ec       	ldi	r30, 0xC1	; 193
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	80 62       	ori	r24, 0x20	; 32
     5a6:	80 83       	st	Z, r24
     5a8:	08 95       	ret

000005aa <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	ec 01       	movw	r28, r24
    while (*s)
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <uart_puts+0xe>
        uart_putc(*s++);
     5b2:	21 96       	adiw	r28, 0x01	; 1
     5b4:	0e 94 c0 02 	call	0x580	; 0x580 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
     5b8:	88 81       	ld	r24, Y
     5ba:	81 11       	cpse	r24, r1
     5bc:	fa cf       	rjmp	.-12     	; 0x5b2 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <init_interrupts>:

	if (intensity < treshold){ // luminescence < 10.0
		PORTC = PORTC | (1<<led);
	}
	else {
		PORTC = PORTC & ~(1<<led);
     5c4:	85 b5       	in	r24, 0x25	; 37
     5c6:	8d 7f       	andi	r24, 0xFD	; 253
     5c8:	85 bd       	out	0x25, r24	; 37
     5ca:	85 b5       	in	r24, 0x25	; 37
     5cc:	85 60       	ori	r24, 0x05	; 5
     5ce:	85 bd       	out	0x25, r24	; 37
     5d0:	ee e6       	ldi	r30, 0x6E	; 110
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	80 81       	ld	r24, Z
     5d6:	81 60       	ori	r24, 0x01	; 1
     5d8:	80 83       	st	Z, r24
     5da:	e1 e8       	ldi	r30, 0x81	; 129
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	8b 7f       	andi	r24, 0xFB	; 251
     5e2:	80 83       	st	Z, r24
     5e4:	80 81       	ld	r24, Z
     5e6:	83 60       	ori	r24, 0x03	; 3
     5e8:	80 83       	st	Z, r24
     5ea:	ef e6       	ldi	r30, 0x6F	; 111
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	81 60       	ori	r24, 0x01	; 1
     5f2:	80 83       	st	Z, r24
     5f4:	08 95       	ret

000005f6 <init_leds>:
     5f6:	65 e0       	ldi	r22, 0x05	; 5
     5f8:	84 e2       	ldi	r24, 0x24	; 36
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GPIO_config_output>
     600:	63 e0       	ldi	r22, 0x03	; 3
     602:	84 e2       	ldi	r24, 0x24	; 36
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GPIO_config_output>
     60a:	64 e0       	ldi	r22, 0x04	; 4
     60c:	84 e2       	ldi	r24, 0x24	; 36
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GPIO_config_output>
     614:	63 e0       	ldi	r22, 0x03	; 3
     616:	8a e2       	ldi	r24, 0x2A	; 42
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GPIO_config_output>
     61e:	62 e0       	ldi	r22, 0x02	; 2
     620:	8a e2       	ldi	r24, 0x2A	; 42
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GPIO_config_output>
     628:	08 95       	ret

0000062a <green_house_setup>:
     62a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <init_interrupts>
     62e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <twi_init>
     632:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <init_bh1750>
     636:	0e 94 9a 05 	call	0xb34	; 0xb34 <init_lcd>
     63a:	87 e6       	ldi	r24, 0x67	; 103
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_init>
     642:	8c e1       	ldi	r24, 0x1C	; 28
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	0e 94 d5 02 	call	0x5aa	; 0x5aa <uart_puts>
     64a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <init_leds>
     64e:	6a e7       	ldi	r22, 0x7A	; 122
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	8c e7       	ldi	r24, 0x7C	; 124
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <init_soil_sensor>
     65a:	62 e0       	ldi	r22, 0x02	; 2
     65c:	84 e2       	ldi	r24, 0x24	; 36
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 52 06 	call	0xca4	; 0xca4 <servo_init>
     664:	62 e0       	ldi	r22, 0x02	; 2
     666:	85 e2       	ldi	r24, 0x25	; 37
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 38 06 	call	0xc70	; 0xc70 <servo_left>
     66e:	78 94       	sei
     670:	08 95       	ret

00000672 <main>:
     672:	0e 94 15 03 	call	0x62a	; 0x62a <green_house_setup>
     676:	cf ef       	ldi	r28, 0xFF	; 255
     678:	df ef       	ldi	r29, 0xFF	; 255
     67a:	cc 24       	eor	r12, r12
     67c:	ca 94       	dec	r12
     67e:	dc 2c       	mov	r13, r12
     680:	f1 2c       	mov	r15, r1
     682:	e1 2c       	mov	r14, r1
     684:	81 2c       	mov	r8, r1
     686:	71 2c       	mov	r7, r1
     688:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <soil_moisture_flag>
     68c:	88 23       	and	r24, r24
     68e:	49 f1       	breq	.+82     	; 0x6e2 <main+0x70>
     690:	90 90 76 01 	lds	r9, 0x0176	; 0x800176 <soil_moisture>
     694:	a0 90 77 01 	lds	r10, 0x0177	; 0x800177 <soil_moisture+0x1>
     698:	b0 90 78 01 	lds	r11, 0x0178	; 0x800178 <soil_moisture+0x2>
     69c:	10 91 79 01 	lds	r17, 0x0179	; 0x800179 <soil_moisture+0x3>
     6a0:	29 2d       	mov	r18, r9
     6a2:	3a 2d       	mov	r19, r10
     6a4:	4b 2d       	mov	r20, r11
     6a6:	51 2f       	mov	r21, r17
     6a8:	6f 2d       	mov	r22, r15
     6aa:	7e 2d       	mov	r23, r14
     6ac:	88 2d       	mov	r24, r8
     6ae:	97 2d       	mov	r25, r7
     6b0:	0e 94 c2 06 	call	0xd84	; 0xd84 <__cmpsf2>
     6b4:	88 23       	and	r24, r24
     6b6:	99 f0       	breq	.+38     	; 0x6de <main+0x6c>
     6b8:	0f 2e       	mov	r0, r31
     6ba:	fb e2       	ldi	r31, 0x2B	; 43
     6bc:	ef 2e       	mov	r14, r31
     6be:	f1 2c       	mov	r15, r1
     6c0:	f0 2d       	mov	r31, r0
     6c2:	03 e0       	ldi	r16, 0x03	; 3
     6c4:	2b e2       	ldi	r18, 0x2B	; 43
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	42 e0       	ldi	r20, 0x02	; 2
     6ca:	69 2d       	mov	r22, r9
     6cc:	7a 2d       	mov	r23, r10
     6ce:	8b 2d       	mov	r24, r11
     6d0:	91 2f       	mov	r25, r17
     6d2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <soil_control_update>
     6d6:	f9 2c       	mov	r15, r9
     6d8:	ea 2c       	mov	r14, r10
     6da:	8b 2c       	mov	r8, r11
     6dc:	71 2e       	mov	r7, r17
     6de:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <soil_moisture_flag>
     6e2:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <temp_flag>
     6e6:	88 23       	and	r24, r24
     6e8:	99 f0       	breq	.+38     	; 0x710 <main+0x9e>
     6ea:	a0 90 74 01 	lds	r10, 0x0174	; 0x800174 <temperature>
     6ee:	b0 90 75 01 	lds	r11, 0x0175	; 0x800175 <temperature+0x1>
     6f2:	ca 14       	cp	r12, r10
     6f4:	db 04       	cpc	r13, r11
     6f6:	51 f0       	breq	.+20     	; 0x70c <main+0x9a>
     6f8:	05 e2       	ldi	r16, 0x25	; 37
     6fa:	10 e0       	ldi	r17, 0x00	; 0
     6fc:	23 e0       	ldi	r18, 0x03	; 3
     6fe:	45 e2       	ldi	r20, 0x25	; 37
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	64 e0       	ldi	r22, 0x04	; 4
     704:	c5 01       	movw	r24, r10
     706:	0e 94 dd 05 	call	0xbba	; 0xbba <temp_control_update>
     70a:	65 01       	movw	r12, r10
     70c:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <temp_flag>
     710:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <luminescence_flag>
     714:	88 23       	and	r24, r24
     716:	09 f4       	brne	.+2      	; 0x71a <main+0xa8>
     718:	b7 cf       	rjmp	.-146    	; 0x688 <main+0x16>
     71a:	a0 90 72 01 	lds	r10, 0x0172	; 0x800172 <luminescence>
     71e:	b0 90 73 01 	lds	r11, 0x0173	; 0x800173 <luminescence+0x1>
     722:	ca 15       	cp	r28, r10
     724:	db 05       	cpc	r29, r11
     726:	51 f0       	breq	.+20     	; 0x73c <main+0xca>
     728:	05 e2       	ldi	r16, 0x25	; 37
     72a:	10 e0       	ldi	r17, 0x00	; 0
     72c:	22 e0       	ldi	r18, 0x02	; 2
     72e:	45 e2       	ldi	r20, 0x25	; 37
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	65 e0       	ldi	r22, 0x05	; 5
     734:	c5 01       	movw	r24, r10
     736:	0e 94 d0 05 	call	0xba0	; 0xba0 <light_control_update>
     73a:	e5 01       	movw	r28, r10
     73c:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <luminescence_flag>
     740:	a3 cf       	rjmp	.-186    	; 0x688 <main+0x16>

00000742 <__vector_13>:
 * Purpose:  Service routine for slow actions as sensors and ADC conversion.
 *           ADC conversion is performed every 262ms and every second
 *           temperature is being read from DHT12 and luminescence from BH1750.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	4f 93       	push	r20
     752:	5f 93       	push	r21
     754:	6f 93       	push	r22
     756:	7f 93       	push	r23
     758:	8f 93       	push	r24
     75a:	9f 93       	push	r25
     75c:	af 93       	push	r26
     75e:	bf 93       	push	r27
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
	static uint8_t iteration = 1;
	uint16_t result = 0;
	
	if (iteration == 2) {
     764:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     768:	82 30       	cpi	r24, 0x02	; 2
     76a:	09 f5       	brne	.+66     	; 0x7ae <__vector_13+0x6c>
		//read DHT12
		
		result = read_luminescence(&luminescence_flag);
     76c:	8f e6       	ldi	r24, 0x6F	; 111
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	0e 94 dd 04 	call	0x9ba	; 0x9ba <read_luminescence>
     774:	9c 01       	movw	r18, r24
		
		if (luminescence_flag) {
     776:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <luminescence_flag>
     77a:	99 23       	and	r25, r25
     77c:	21 f0       	breq	.+8      	; 0x786 <__vector_13+0x44>
			luminescence = result;
     77e:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <luminescence+0x1>
     782:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <luminescence>
		}
		
		result = read_temperature(&temp_flag);
     786:	81 e7       	ldi	r24, 0x71	; 113
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 81 04 	call	0x902	; 0x902 <read_temperature>
     78e:	90 e0       	ldi	r25, 0x00	; 0
		
		if (temp_flag) {
     790:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <temp_flag>
     794:	22 23       	and	r18, r18
     796:	21 f0       	breq	.+8      	; 0x7a0 <__vector_13+0x5e>
			temperature = result;
     798:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <temperature+0x1>
     79c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <temperature>
		}
		
		iteration = 0;
     7a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		// Start ADC conversion
		ADCSRA |= (1 << ADSC);
     7a4:	ea e7       	ldi	r30, 0x7A	; 122
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	80 64       	ori	r24, 0x40	; 64
     7ac:	80 83       	st	Z, r24
	}
	iteration++;
     7ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7b2:	8f 5f       	subi	r24, 0xFF	; 255
     7b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
}
     7b8:	ff 91       	pop	r31
     7ba:	ef 91       	pop	r30
     7bc:	bf 91       	pop	r27
     7be:	af 91       	pop	r26
     7c0:	9f 91       	pop	r25
     7c2:	8f 91       	pop	r24
     7c4:	7f 91       	pop	r23
     7c6:	6f 91       	pop	r22
     7c8:	5f 91       	pop	r21
     7ca:	4f 91       	pop	r20
     7cc:	3f 91       	pop	r19
     7ce:	2f 91       	pop	r18
     7d0:	0f 90       	pop	r0
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	0f 90       	pop	r0
     7d6:	1f 90       	pop	r1
     7d8:	18 95       	reti

000007da <__vector_16>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Service routine for fast actions. In this routine LCD display
 *           is refreshed and updated with new data from sensors every 16 ms
 **********************************************************************/
ISR(TIMER0_OVF_vect)
{
     7da:	1f 92       	push	r1
     7dc:	0f 92       	push	r0
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	2f 93       	push	r18
     7e6:	3f 93       	push	r19
     7e8:	4f 93       	push	r20
     7ea:	5f 93       	push	r21
     7ec:	6f 93       	push	r22
     7ee:	7f 93       	push	r23
     7f0:	8f 93       	push	r24
     7f2:	9f 93       	push	r25
     7f4:	af 93       	push	r26
     7f6:	bf 93       	push	r27
     7f8:	ef 93       	push	r30
     7fa:	ff 93       	push	r31
	lcd_update_menu(soil_moisture, temperature, luminescence);
     7fc:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <luminescence>
     800:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <luminescence+0x1>
     804:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <temperature>
     808:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <temperature+0x1>
     80c:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <soil_moisture>
     810:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <soil_moisture+0x1>
     814:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <soil_moisture+0x2>
     818:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <soil_moisture+0x3>
     81c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lcd_update_menu>
}
     820:	ff 91       	pop	r31
     822:	ef 91       	pop	r30
     824:	bf 91       	pop	r27
     826:	af 91       	pop	r26
     828:	9f 91       	pop	r25
     82a:	8f 91       	pop	r24
     82c:	7f 91       	pop	r23
     82e:	6f 91       	pop	r22
     830:	5f 91       	pop	r21
     832:	4f 91       	pop	r20
     834:	3f 91       	pop	r19
     836:	2f 91       	pop	r18
     838:	0f 90       	pop	r0
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	0f 90       	pop	r0
     83e:	1f 90       	pop	r1
     840:	18 95       	reti

00000842 <__vector_21>:
 *           Reads soil moisture and stores it to global variable.
 *           Humidity change flag is set.
 *           High adc value corresponds to dry soil and low value wet soil
 **********************************************************************/
ISR(ADC_vect)
{
     842:	1f 92       	push	r1
     844:	0f 92       	push	r0
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	0f 92       	push	r0
     84a:	11 24       	eor	r1, r1
     84c:	2f 93       	push	r18
     84e:	3f 93       	push	r19
     850:	4f 93       	push	r20
     852:	5f 93       	push	r21
     854:	6f 93       	push	r22
     856:	7f 93       	push	r23
     858:	8f 93       	push	r24
     85a:	9f 93       	push	r25
     85c:	af 93       	push	r26
     85e:	bf 93       	push	r27
     860:	ef 93       	push	r30
     862:	ff 93       	push	r31
	cli();
     864:	f8 94       	cli
	uint16_t adc_value = 0;
	adc_value = ADCW;    // Copy ADC result to 16-bit variable
     866:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     86a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	soil_moisture = 100 - ((float)adc_value/1023.0)*100;  // soil moisture in %
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 39 07 	call	0xe72	; 0xe72 <__floatunsisf>
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 ec       	ldi	r19, 0xC0	; 192
     87a:	4f e7       	ldi	r20, 0x7F	; 127
     87c:	54 e4       	ldi	r21, 0x44	; 68
     87e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__divsf3>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	48 ec       	ldi	r20, 0xC8	; 200
     888:	52 e4       	ldi	r21, 0x42	; 66
     88a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__mulsf3>
     88e:	9b 01       	movw	r18, r22
     890:	ac 01       	movw	r20, r24
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	88 ec       	ldi	r24, 0xC8	; 200
     898:	92 e4       	ldi	r25, 0x42	; 66
     89a:	0e 94 55 06 	call	0xcaa	; 0xcaa <__subsf3>
     89e:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <soil_moisture>
     8a2:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <soil_moisture+0x1>
     8a6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <soil_moisture+0x2>
     8aa:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <soil_moisture+0x3>
	soil_moisture_flag = 1;
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <soil_moisture_flag>
	//soil_control_update(soil_moisture, SOIL_LED_LOW, &PORTD, SOIL_LED_HIGH, &PORTD);
	sei();
     8b4:	78 94       	sei
     8b6:	ff 91       	pop	r31
     8b8:	ef 91       	pop	r30
     8ba:	bf 91       	pop	r27
     8bc:	af 91       	pop	r26
     8be:	9f 91       	pop	r25
     8c0:	8f 91       	pop	r24
     8c2:	7f 91       	pop	r23
     8c4:	6f 91       	pop	r22
     8c6:	5f 91       	pop	r21
     8c8:	4f 91       	pop	r20
     8ca:	3f 91       	pop	r19
     8cc:	2f 91       	pop	r18
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <init_soil_sensor>:
 *  Author: cerma
 */ 

#include "adc_sensors.h"

void init_soil_sensor(volatile uint8_t *admux_register, volatile uint8_t *adcsra_register){
     8d8:	dc 01       	movw	r26, r24
     8da:	fb 01       	movw	r30, r22
	// Configure ADC to convert PC0[A0] analog value
	// Set ADC reference to AVcc
	*admux_register |= (1 << REFS0);
     8dc:	8c 91       	ld	r24, X
     8de:	80 64       	ori	r24, 0x40	; 64
     8e0:	8c 93       	st	X, r24
	*admux_register &= ~(1 << REFS1);
     8e2:	8c 91       	ld	r24, X
     8e4:	8f 77       	andi	r24, 0x7F	; 127
     8e6:	8c 93       	st	X, r24
	// Set input channel to ADC0
	*admux_register &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3));
     8e8:	8c 91       	ld	r24, X
     8ea:	80 7f       	andi	r24, 0xF0	; 240
     8ec:	8c 93       	st	X, r24
	// Enable ADC module
	*adcsra_register |= (1 << ADEN);
     8ee:	80 81       	ld	r24, Z
     8f0:	80 68       	ori	r24, 0x80	; 128
     8f2:	80 83       	st	Z, r24
	// Enable conversion complete interrupt
	*adcsra_register |= (1 << ADIE);
     8f4:	80 81       	ld	r24, Z
     8f6:	88 60       	ori	r24, 0x08	; 8
     8f8:	80 83       	st	Z, r24
	// Set clock prescaler to 128
	*adcsra_register |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     8fa:	80 81       	ld	r24, Z
     8fc:	87 60       	ori	r24, 0x07	; 7
     8fe:	80 83       	st	Z, r24
     900:	08 95       	ret

00000902 <read_temperature>:
 * Function: getCorrect lux value from data							*
 * Purpose:  data needs to be shifted, last bit is 2^-1 (+5). Value is 10 times higher.
 ************************************************************************/
uint16_t get_lux(uint16_t data){
	return data * 10;
}
     902:	af 92       	push	r10
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	7c 01       	movw	r14, r24
     918:	fc 01       	movw	r30, r24
     91a:	10 82       	st	Z, r1
     91c:	88 eb       	ldi	r24, 0xB8	; 184
     91e:	0e 94 0e 02 	call	0x41c	; 0x41c <twi_start>
     922:	81 30       	cpi	r24, 0x01	; 1
     924:	21 f4       	brne	.+8      	; 0x92e <read_temperature+0x2c>
     926:	0e 94 49 02 	call	0x492	; 0x492 <twi_stop>
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	32 c0       	rjmp	.+100    	; 0x992 <read_temperature+0x90>
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 2b 02 	call	0x456	; 0x456 <twi_write>
     934:	89 eb       	ldi	r24, 0xB9	; 185
     936:	0e 94 0e 02 	call	0x41c	; 0x41c <twi_start>
     93a:	0e 94 35 02 	call	0x46a	; 0x46a <twi_read_ack>
     93e:	a8 2e       	mov	r10, r24
     940:	0e 94 35 02 	call	0x46a	; 0x46a <twi_read_ack>
     944:	c8 2f       	mov	r28, r24
     946:	d0 e0       	ldi	r29, 0x00	; 0
     948:	0e 94 35 02 	call	0x46a	; 0x46a <twi_read_ack>
     94c:	18 2f       	mov	r17, r24
     94e:	c8 2e       	mov	r12, r24
     950:	d1 2c       	mov	r13, r1
     952:	0e 94 35 02 	call	0x46a	; 0x46a <twi_read_ack>
     956:	08 2f       	mov	r16, r24
     958:	0e 94 3f 02 	call	0x47e	; 0x47e <twi_read_nack>
     95c:	b8 2e       	mov	r11, r24
     95e:	0e 94 49 02 	call	0x492	; 0x492 <twi_stop>
     962:	8b 2d       	mov	r24, r11
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	ca 0d       	add	r28, r10
     968:	d1 1d       	adc	r29, r1
     96a:	cc 0d       	add	r28, r12
     96c:	dd 1d       	adc	r29, r13
     96e:	c0 0f       	add	r28, r16
     970:	d1 1d       	adc	r29, r1
     972:	8c 17       	cp	r24, r28
     974:	9d 07       	cpc	r25, r29
     976:	21 f4       	brne	.+8      	; 0x980 <read_temperature+0x7e>
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	f7 01       	movw	r30, r14
     97c:	80 83       	st	Z, r24
     97e:	02 c0       	rjmp	.+4      	; 0x984 <read_temperature+0x82>
     980:	f7 01       	movw	r30, r14
     982:	10 82       	st	Z, r1
     984:	11 0f       	add	r17, r17
     986:	81 2f       	mov	r24, r17
     988:	88 0f       	add	r24, r24
     98a:	88 0f       	add	r24, r24
     98c:	18 0f       	add	r17, r24
     98e:	81 2f       	mov	r24, r17
     990:	80 0f       	add	r24, r16
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	af 90       	pop	r10
     9a6:	08 95       	ret

000009a8 <init_bh1750>:
     9a8:	86 e4       	ldi	r24, 0x46	; 70
     9aa:	0e 94 0e 02 	call	0x41c	; 0x41c <twi_start>
     9ae:	80 e1       	ldi	r24, 0x10	; 16
     9b0:	0e 94 2b 02 	call	0x456	; 0x456 <twi_write>
     9b4:	0e 94 49 02 	call	0x492	; 0x492 <twi_stop>
     9b8:	08 95       	ret

000009ba <read_luminescence>:

// read data from BH1750 light sensor
uint16_t read_luminescence(volatile uint8_t *luminescence_flag){	//manual str.12
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	8c 01       	movw	r16, r24
	//uint8_t addr = 0x5C;			// ADDR ? 0.7VCC -> H
	static uint8_t addr = 0x23;			// ADDR ? 0.3VCC -> L
	uint16_t data = -1;
	uint16_t result = 0;

	twi_start((addr<<1) + TWI_READ);
     9c4:	87 e4       	ldi	r24, 0x47	; 71
     9c6:	0e 94 0e 02 	call	0x41c	; 0x41c <twi_start>
	result = twi_read_ack();
     9ca:	0e 94 35 02 	call	0x46a	; 0x46a <twi_read_ack>
     9ce:	c8 2f       	mov	r28, r24
     9d0:	d0 e0       	ldi	r29, 0x00	; 0
	data = result << 8;
     9d2:	dc 2f       	mov	r29, r28
     9d4:	cc 27       	eor	r28, r28
	result = twi_read_nack();
     9d6:	0e 94 3f 02 	call	0x47e	; 0x47e <twi_read_nack>
	data += result;
     9da:	c8 0f       	add	r28, r24
     9dc:	d1 1d       	adc	r29, r1
	twi_stop();
     9de:	0e 94 49 02 	call	0x492	; 0x492 <twi_stop>
			
	*luminescence_flag = 1;
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	f8 01       	movw	r30, r16
     9e6:	80 83       	st	Z, r24
			
	return data;
	//return data;
     9e8:	ce 01       	movw	r24, r28
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	08 95       	ret

000009f4 <lcd_update_menu>:
void light_control_init(uint8_t light_led, uint8_t *led_port_register, uint8_t servo_pin, uint8_t *servo_port_register){
	// open pelmet (servo)
	servo_right(servo_port_register,servo_pin);
	// turn off light (led)
	led_turn_off(led_port_register, light_led);
}
     9f4:	8f 92       	push	r8
     9f6:	9f 92       	push	r9
     9f8:	af 92       	push	r10
     9fa:	bf 92       	push	r11
     9fc:	cf 92       	push	r12
     9fe:	df 92       	push	r13
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	4b 01       	movw	r8, r22
     a0e:	5c 01       	movw	r10, r24
     a10:	6a 01       	movw	r12, r20
     a12:	79 01       	movw	r14, r18
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	0e 94 88 01 	call	0x310	; 0x310 <lcd_gotoxy>
     a1c:	81 e2       	ldi	r24, 0x21	; 33
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_puts>
     a24:	03 e1       	ldi	r16, 0x13	; 19
     a26:	11 e0       	ldi	r17, 0x01	; 1
     a28:	22 e0       	ldi	r18, 0x02	; 2
     a2a:	43 e0       	ldi	r20, 0x03	; 3
     a2c:	c5 01       	movw	r24, r10
     a2e:	b4 01       	movw	r22, r8
     a30:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <dtostrf>
     a34:	c8 01       	movw	r24, r16
     a36:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_puts>
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	89 e0       	ldi	r24, 0x09	; 9
     a3e:	0e 94 88 01 	call	0x310	; 0x310 <lcd_gotoxy>
     a42:	84 e2       	ldi	r24, 0x24	; 36
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_puts>
     a4a:	96 01       	movw	r18, r12
     a4c:	ad ec       	ldi	r26, 0xCD	; 205
     a4e:	bc ec       	ldi	r27, 0xCC	; 204
     a50:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__umulhisi3>
     a54:	ec 01       	movw	r28, r24
     a56:	d6 95       	lsr	r29
     a58:	c7 95       	ror	r28
     a5a:	d6 95       	lsr	r29
     a5c:	c7 95       	ror	r28
     a5e:	d6 95       	lsr	r29
     a60:	c7 95       	ror	r28
     a62:	4a e0       	ldi	r20, 0x0A	; 10
     a64:	6a e0       	ldi	r22, 0x0A	; 10
     a66:	71 e0       	ldi	r23, 0x01	; 1
     a68:	ce 01       	movw	r24, r28
     a6a:	0e 94 8c 08 	call	0x1118	; 0x1118 <__itoa_ncheck>
     a6e:	8a e0       	ldi	r24, 0x0A	; 10
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_puts>
     a76:	8e e2       	ldi	r24, 0x2E	; 46
     a78:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_putc>
     a7c:	ce 01       	movw	r24, r28
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	cc 0f       	add	r28, r28
     a84:	dd 1f       	adc	r29, r29
     a86:	cc 0f       	add	r28, r28
     a88:	dd 1f       	adc	r29, r29
     a8a:	cc 0f       	add	r28, r28
     a8c:	dd 1f       	adc	r29, r29
     a8e:	c8 0f       	add	r28, r24
     a90:	d9 1f       	adc	r29, r25
     a92:	4a e0       	ldi	r20, 0x0A	; 10
     a94:	6a e0       	ldi	r22, 0x0A	; 10
     a96:	71 e0       	ldi	r23, 0x01	; 1
     a98:	c6 01       	movw	r24, r12
     a9a:	8c 1b       	sub	r24, r28
     a9c:	9d 0b       	sbc	r25, r29
     a9e:	0e 94 8c 08 	call	0x1118	; 0x1118 <__itoa_ncheck>
     aa2:	8a e0       	ldi	r24, 0x0A	; 10
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_puts>
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 88 01 	call	0x310	; 0x310 <lcd_gotoxy>
     ab2:	87 e2       	ldi	r24, 0x27	; 39
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_puts>
     aba:	97 01       	movw	r18, r14
     abc:	ad ec       	ldi	r26, 0xCD	; 205
     abe:	bc ec       	ldi	r27, 0xCC	; 204
     ac0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__umulhisi3>
     ac4:	ec 01       	movw	r28, r24
     ac6:	d6 95       	lsr	r29
     ac8:	c7 95       	ror	r28
     aca:	d6 95       	lsr	r29
     acc:	c7 95       	ror	r28
     ace:	d6 95       	lsr	r29
     ad0:	c7 95       	ror	r28
     ad2:	4a e0       	ldi	r20, 0x0A	; 10
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	71 e0       	ldi	r23, 0x01	; 1
     ad8:	ce 01       	movw	r24, r28
     ada:	0e 94 8c 08 	call	0x1118	; 0x1118 <__itoa_ncheck>
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_puts>
     ae6:	8e e2       	ldi	r24, 0x2E	; 46
     ae8:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_putc>
     aec:	ce 01       	movw	r24, r28
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	cc 0f       	add	r28, r28
     af4:	dd 1f       	adc	r29, r29
     af6:	cc 0f       	add	r28, r28
     af8:	dd 1f       	adc	r29, r29
     afa:	cc 0f       	add	r28, r28
     afc:	dd 1f       	adc	r29, r29
     afe:	c8 0f       	add	r28, r24
     b00:	d9 1f       	adc	r29, r25
     b02:	4a e0       	ldi	r20, 0x0A	; 10
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	71 e0       	ldi	r23, 0x01	; 1
     b08:	c7 01       	movw	r24, r14
     b0a:	8c 1b       	sub	r24, r28
     b0c:	9d 0b       	sbc	r25, r29
     b0e:	0e 94 8c 08 	call	0x1118	; 0x1118 <__itoa_ncheck>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_puts>
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	df 90       	pop	r13
     b28:	cf 90       	pop	r12
     b2a:	bf 90       	pop	r11
     b2c:	af 90       	pop	r10
     b2e:	9f 90       	pop	r9
     b30:	8f 90       	pop	r8
     b32:	08 95       	ret

00000b34 <init_lcd>:
     b34:	8c e0       	ldi	r24, 0x0C	; 12
     b36:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_init>
     b3a:	80 e4       	ldi	r24, 0x40	; 64
     b3c:	0e 94 84 01 	call	0x308	; 0x308 <lcd_command>
     b40:	80 e8       	ldi	r24, 0x80	; 128
     b42:	0e 94 84 01 	call	0x308	; 0x308 <lcd_command>
     b46:	21 e0       	ldi	r18, 0x01	; 1
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	41 e0       	ldi	r20, 0x01	; 1
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	80 e8       	ldi	r24, 0x80	; 128
     b54:	9f e3       	ldi	r25, 0x3F	; 63
     b56:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lcd_update_menu>
     b5a:	08 95       	ret

00000b5c <led_turn_on>:
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	ec 01       	movw	r28, r24
     b64:	16 2f       	mov	r17, r22
     b66:	0e 94 f5 00 	call	0x1ea	; 0x1ea <GPIO_read>
     b6a:	81 11       	cpse	r24, r1
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <led_turn_on+0x1a>
     b6e:	61 2f       	mov	r22, r17
     b70:	ce 01       	movw	r24, r28
     b72:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <GPIO_write_high>
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	08 95       	ret

00000b7e <led_turn_off>:
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	ec 01       	movw	r28, r24
     b86:	16 2f       	mov	r17, r22
     b88:	0e 94 f5 00 	call	0x1ea	; 0x1ea <GPIO_read>
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	21 f4       	brne	.+8      	; 0xb98 <led_turn_off+0x1a>
     b90:	61 2f       	mov	r22, r17
     b92:	ce 01       	movw	r24, r28
     b94:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <GPIO_write_low>
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	08 95       	ret

00000ba0 <light_control_update>:
//todo
void light_control_update(uint16_t luminescence, uint8_t light_led, volatile uint8_t *led_port_register, uint8_t servo_pin, volatile uint8_t *servo_port_register){
	
	// whether its too dark or too shiny, close pelmet (servo) and turn artificial lighting on (led)
	if (luminescence <= TRESHOLD_LUMINESCENCE_DARK || luminescence >= TRESHOLD_LUMINESCENCE_LIGHT){
     ba0:	85 56       	subi	r24, 0x65	; 101
     ba2:	91 09       	sbc	r25, r1
     ba4:	83 3f       	cpi	r24, 0xF3	; 243
     ba6:	91 40       	sbci	r25, 0x01	; 1
     ba8:	20 f0       	brcs	.+8      	; 0xbb2 <light_control_update+0x12>
		//servo_left(servo_port_register, servo_pin);
		led_turn_on(led_port_register, light_led);	
     baa:	ca 01       	movw	r24, r20
     bac:	0e 94 ae 05 	call	0xb5c	; 0xb5c <led_turn_on>
     bb0:	08 95       	ret
	}
	// if light conditions are optimal, open pelmet (servo) and turn lights off (led)
	else {
		//servo_right(servo_port_register, servo_pin);
		led_turn_off(led_port_register, light_led);
     bb2:	ca 01       	movw	r24, r20
     bb4:	0e 94 bf 05 	call	0xb7e	; 0xb7e <led_turn_off>
     bb8:	08 95       	ret

00000bba <temp_control_update>:
	}
}

//todo
void temp_control_update(uint16_t temperature, uint8_t led_low, volatile uint8_t *led_low_port_register, uint8_t led_high, volatile uint8_t *led_high_port_register){
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	c2 2f       	mov	r28, r18
	
	if (temperature <= TRESHOLD_TEMPERATURE_COLD) {
     bc2:	8b 3f       	cpi	r24, 0xFB	; 251
     bc4:	91 05       	cpc	r25, r1
     bc6:	20 f4       	brcc	.+8      	; 0xbd0 <temp_control_update+0x16>
		led_turn_on(led_low_port_register, led_low);
     bc8:	ca 01       	movw	r24, r20
     bca:	0e 94 ae 05 	call	0xb5c	; 0xb5c <led_turn_on>
     bce:	0f c0       	rjmp	.+30     	; 0xbee <temp_control_update+0x34>
	}

	else if (temperature >= TRESHOLD_TEMPERATURE_HOT) {
     bd0:	8e 35       	cpi	r24, 0x5E	; 94
     bd2:	91 40       	sbci	r25, 0x01	; 1
     bd4:	28 f0       	brcs	.+10     	; 0xbe0 <temp_control_update+0x26>
		led_turn_on(led_high_port_register, led_high);
     bd6:	6c 2f       	mov	r22, r28
     bd8:	c8 01       	movw	r24, r16
     bda:	0e 94 ae 05 	call	0xb5c	; 0xb5c <led_turn_on>
     bde:	07 c0       	rjmp	.+14     	; 0xbee <temp_control_update+0x34>
	}
	else {
		led_turn_off(led_low_port_register, led_low);
     be0:	ca 01       	movw	r24, r20
     be2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <led_turn_off>
		led_turn_off(led_high_port_register, led_high);
     be6:	6c 2f       	mov	r22, r28
     be8:	c8 01       	movw	r24, r16
     bea:	0e 94 bf 05 	call	0xb7e	; 0xb7e <led_turn_off>
	}
}
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	08 95       	ret

00000bf6 <soil_control_update>:

void soil_control_update(float soil, uint8_t led_low, volatile uint8_t *led_low_port_register, uint8_t led_high, volatile uint8_t *led_high_port_register){
     bf6:	8f 92       	push	r8
     bf8:	9f 92       	push	r9
     bfa:	af 92       	push	r10
     bfc:	bf 92       	push	r11
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	4b 01       	movw	r8, r22
     c0c:	5c 01       	movw	r10, r24
     c0e:	14 2f       	mov	r17, r20
     c10:	e9 01       	movw	r28, r18

	if (soil <= TRESHOLD_SOIL_LOW) {
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e2       	ldi	r20, 0x20	; 32
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	0e 94 c2 06 	call	0xd84	; 0xd84 <__cmpsf2>
     c1e:	18 16       	cp	r1, r24
     c20:	2c f0       	brlt	.+10     	; 0xc2c <soil_control_update+0x36>
		led_turn_on(led_low_port_register, led_low);
     c22:	61 2f       	mov	r22, r17
     c24:	ce 01       	movw	r24, r28
     c26:	0e 94 ae 05 	call	0xb5c	; 0xb5c <led_turn_on>
     c2a:	17 c0       	rjmp	.+46     	; 0xc5a <soil_control_update+0x64>
	}

	else if (soil >= TRESHOLD_SOIL_HIGH) {
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	48 e4       	ldi	r20, 0x48	; 72
     c32:	52 e4       	ldi	r21, 0x42	; 66
     c34:	c5 01       	movw	r24, r10
     c36:	b4 01       	movw	r22, r8
     c38:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__gesf2>
     c3c:	88 23       	and	r24, r24
     c3e:	2c f0       	brlt	.+10     	; 0xc4a <soil_control_update+0x54>
		led_turn_on(led_high_port_register, led_high);
     c40:	60 2f       	mov	r22, r16
     c42:	c7 01       	movw	r24, r14
     c44:	0e 94 ae 05 	call	0xb5c	; 0xb5c <led_turn_on>
     c48:	08 c0       	rjmp	.+16     	; 0xc5a <soil_control_update+0x64>
	}
	else {
		led_turn_off(led_low_port_register, led_low);
     c4a:	61 2f       	mov	r22, r17
     c4c:	ce 01       	movw	r24, r28
     c4e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <led_turn_off>
		led_turn_off(led_high_port_register, led_high);
     c52:	60 2f       	mov	r22, r16
     c54:	c7 01       	movw	r24, r14
     c56:	0e 94 bf 05 	call	0xb7e	; 0xb7e <led_turn_off>
	}
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	bf 90       	pop	r11
     c68:	af 90       	pop	r10
     c6a:	9f 90       	pop	r9
     c6c:	8f 90       	pop	r8
     c6e:	08 95       	ret

00000c70 <servo_left>:
	GPIO_write_high(&PORTB, servo_pin);
	_delay_us(2400);
	GPIO_write_low(&PORTB, servo_pin);
	_delay_us(600);
	_delay_ms(17);
};
     c70:	cf 93       	push	r28
     c72:	c6 2f       	mov	r28, r22
     c74:	85 e2       	ldi	r24, 0x25	; 37
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <GPIO_write_high>
     c7c:	89 ee       	ldi	r24, 0xE9	; 233
     c7e:	8a 95       	dec	r24
     c80:	f1 f7       	brne	.-4      	; 0xc7e <servo_left+0xe>
     c82:	00 00       	nop
     c84:	6c 2f       	mov	r22, r28
     c86:	85 e2       	ldi	r24, 0x25	; 37
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <GPIO_write_low>
     c8e:	94 e6       	ldi	r25, 0x64	; 100
     c90:	9a 95       	dec	r25
     c92:	f1 f7       	brne	.-4      	; 0xc90 <servo_left+0x20>
     c94:	8d e8       	ldi	r24, 0x8D	; 141
     c96:	92 e1       	ldi	r25, 0x12	; 18
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <servo_left+0x28>
     c9c:	00 c0       	rjmp	.+0      	; 0xc9e <servo_left+0x2e>
     c9e:	00 00       	nop
     ca0:	cf 91       	pop	r28
     ca2:	08 95       	ret

00000ca4 <servo_init>:
 * Input:    reg_name - Address of Data Direction Register, such as &DDRB
 *           servo_pin - Pin to which servo is connected
 * Returns:  none
 **********************************************************************/
void servo_init(volatile uint8_t *reg_name, uint8_t servo_pin){
	GPIO_config_output(reg_name, servo_pin);	
     ca4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GPIO_config_output>
     ca8:	08 95       	ret

00000caa <__subsf3>:
     caa:	50 58       	subi	r21, 0x80	; 128

00000cac <__addsf3>:
     cac:	bb 27       	eor	r27, r27
     cae:	aa 27       	eor	r26, r26
     cb0:	0e 94 6d 06 	call	0xcda	; 0xcda <__addsf3x>
     cb4:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_round>
     cb8:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_pscA>
     cbc:	38 f0       	brcs	.+14     	; 0xccc <__addsf3+0x20>
     cbe:	0e 94 aa 07 	call	0xf54	; 0xf54 <__fp_pscB>
     cc2:	20 f0       	brcs	.+8      	; 0xccc <__addsf3+0x20>
     cc4:	39 f4       	brne	.+14     	; 0xcd4 <__addsf3+0x28>
     cc6:	9f 3f       	cpi	r25, 0xFF	; 255
     cc8:	19 f4       	brne	.+6      	; 0xcd0 <__addsf3+0x24>
     cca:	26 f4       	brtc	.+8      	; 0xcd4 <__addsf3+0x28>
     ccc:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_nan>
     cd0:	0e f4       	brtc	.+2      	; 0xcd4 <__addsf3+0x28>
     cd2:	e0 95       	com	r30
     cd4:	e7 fb       	bst	r30, 7
     cd6:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>

00000cda <__addsf3x>:
     cda:	e9 2f       	mov	r30, r25
     cdc:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_split3>
     ce0:	58 f3       	brcs	.-42     	; 0xcb8 <__addsf3+0xc>
     ce2:	ba 17       	cp	r27, r26
     ce4:	62 07       	cpc	r22, r18
     ce6:	73 07       	cpc	r23, r19
     ce8:	84 07       	cpc	r24, r20
     cea:	95 07       	cpc	r25, r21
     cec:	20 f0       	brcs	.+8      	; 0xcf6 <__addsf3x+0x1c>
     cee:	79 f4       	brne	.+30     	; 0xd0e <__addsf3x+0x34>
     cf0:	a6 f5       	brtc	.+104    	; 0xd5a <__addsf3x+0x80>
     cf2:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_zero>
     cf6:	0e f4       	brtc	.+2      	; 0xcfa <__addsf3x+0x20>
     cf8:	e0 95       	com	r30
     cfa:	0b 2e       	mov	r0, r27
     cfc:	ba 2f       	mov	r27, r26
     cfe:	a0 2d       	mov	r26, r0
     d00:	0b 01       	movw	r0, r22
     d02:	b9 01       	movw	r22, r18
     d04:	90 01       	movw	r18, r0
     d06:	0c 01       	movw	r0, r24
     d08:	ca 01       	movw	r24, r20
     d0a:	a0 01       	movw	r20, r0
     d0c:	11 24       	eor	r1, r1
     d0e:	ff 27       	eor	r31, r31
     d10:	59 1b       	sub	r21, r25
     d12:	99 f0       	breq	.+38     	; 0xd3a <__addsf3x+0x60>
     d14:	59 3f       	cpi	r21, 0xF9	; 249
     d16:	50 f4       	brcc	.+20     	; 0xd2c <__addsf3x+0x52>
     d18:	50 3e       	cpi	r21, 0xE0	; 224
     d1a:	68 f1       	brcs	.+90     	; 0xd76 <__addsf3x+0x9c>
     d1c:	1a 16       	cp	r1, r26
     d1e:	f0 40       	sbci	r31, 0x00	; 0
     d20:	a2 2f       	mov	r26, r18
     d22:	23 2f       	mov	r18, r19
     d24:	34 2f       	mov	r19, r20
     d26:	44 27       	eor	r20, r20
     d28:	58 5f       	subi	r21, 0xF8	; 248
     d2a:	f3 cf       	rjmp	.-26     	; 0xd12 <__addsf3x+0x38>
     d2c:	46 95       	lsr	r20
     d2e:	37 95       	ror	r19
     d30:	27 95       	ror	r18
     d32:	a7 95       	ror	r26
     d34:	f0 40       	sbci	r31, 0x00	; 0
     d36:	53 95       	inc	r21
     d38:	c9 f7       	brne	.-14     	; 0xd2c <__addsf3x+0x52>
     d3a:	7e f4       	brtc	.+30     	; 0xd5a <__addsf3x+0x80>
     d3c:	1f 16       	cp	r1, r31
     d3e:	ba 0b       	sbc	r27, r26
     d40:	62 0b       	sbc	r22, r18
     d42:	73 0b       	sbc	r23, r19
     d44:	84 0b       	sbc	r24, r20
     d46:	ba f0       	brmi	.+46     	; 0xd76 <__addsf3x+0x9c>
     d48:	91 50       	subi	r25, 0x01	; 1
     d4a:	a1 f0       	breq	.+40     	; 0xd74 <__addsf3x+0x9a>
     d4c:	ff 0f       	add	r31, r31
     d4e:	bb 1f       	adc	r27, r27
     d50:	66 1f       	adc	r22, r22
     d52:	77 1f       	adc	r23, r23
     d54:	88 1f       	adc	r24, r24
     d56:	c2 f7       	brpl	.-16     	; 0xd48 <__addsf3x+0x6e>
     d58:	0e c0       	rjmp	.+28     	; 0xd76 <__addsf3x+0x9c>
     d5a:	ba 0f       	add	r27, r26
     d5c:	62 1f       	adc	r22, r18
     d5e:	73 1f       	adc	r23, r19
     d60:	84 1f       	adc	r24, r20
     d62:	48 f4       	brcc	.+18     	; 0xd76 <__addsf3x+0x9c>
     d64:	87 95       	ror	r24
     d66:	77 95       	ror	r23
     d68:	67 95       	ror	r22
     d6a:	b7 95       	ror	r27
     d6c:	f7 95       	ror	r31
     d6e:	9e 3f       	cpi	r25, 0xFE	; 254
     d70:	08 f0       	brcs	.+2      	; 0xd74 <__addsf3x+0x9a>
     d72:	b0 cf       	rjmp	.-160    	; 0xcd4 <__addsf3+0x28>
     d74:	93 95       	inc	r25
     d76:	88 0f       	add	r24, r24
     d78:	08 f0       	brcs	.+2      	; 0xd7c <__addsf3x+0xa2>
     d7a:	99 27       	eor	r25, r25
     d7c:	ee 0f       	add	r30, r30
     d7e:	97 95       	ror	r25
     d80:	87 95       	ror	r24
     d82:	08 95       	ret

00000d84 <__cmpsf2>:
     d84:	0e 94 76 07 	call	0xeec	; 0xeec <__fp_cmp>
     d88:	08 f4       	brcc	.+2      	; 0xd8c <__cmpsf2+0x8>
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	08 95       	ret

00000d8e <__divsf3>:
     d8e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__divsf3x>
     d92:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_round>
     d96:	0e 94 aa 07 	call	0xf54	; 0xf54 <__fp_pscB>
     d9a:	58 f0       	brcs	.+22     	; 0xdb2 <__divsf3+0x24>
     d9c:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_pscA>
     da0:	40 f0       	brcs	.+16     	; 0xdb2 <__divsf3+0x24>
     da2:	29 f4       	brne	.+10     	; 0xdae <__divsf3+0x20>
     da4:	5f 3f       	cpi	r21, 0xFF	; 255
     da6:	29 f0       	breq	.+10     	; 0xdb2 <__divsf3+0x24>
     da8:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
     dac:	51 11       	cpse	r21, r1
     dae:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>
     db2:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_nan>

00000db6 <__divsf3x>:
     db6:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_split3>
     dba:	68 f3       	brcs	.-38     	; 0xd96 <__divsf3+0x8>

00000dbc <__divsf3_pse>:
     dbc:	99 23       	and	r25, r25
     dbe:	b1 f3       	breq	.-20     	; 0xdac <__divsf3+0x1e>
     dc0:	55 23       	and	r21, r21
     dc2:	91 f3       	breq	.-28     	; 0xda8 <__divsf3+0x1a>
     dc4:	95 1b       	sub	r25, r21
     dc6:	55 0b       	sbc	r21, r21
     dc8:	bb 27       	eor	r27, r27
     dca:	aa 27       	eor	r26, r26
     dcc:	62 17       	cp	r22, r18
     dce:	73 07       	cpc	r23, r19
     dd0:	84 07       	cpc	r24, r20
     dd2:	38 f0       	brcs	.+14     	; 0xde2 <__divsf3_pse+0x26>
     dd4:	9f 5f       	subi	r25, 0xFF	; 255
     dd6:	5f 4f       	sbci	r21, 0xFF	; 255
     dd8:	22 0f       	add	r18, r18
     dda:	33 1f       	adc	r19, r19
     ddc:	44 1f       	adc	r20, r20
     dde:	aa 1f       	adc	r26, r26
     de0:	a9 f3       	breq	.-22     	; 0xdcc <__divsf3_pse+0x10>
     de2:	35 d0       	rcall	.+106    	; 0xe4e <__divsf3_pse+0x92>
     de4:	0e 2e       	mov	r0, r30
     de6:	3a f0       	brmi	.+14     	; 0xdf6 <__divsf3_pse+0x3a>
     de8:	e0 e8       	ldi	r30, 0x80	; 128
     dea:	32 d0       	rcall	.+100    	; 0xe50 <__divsf3_pse+0x94>
     dec:	91 50       	subi	r25, 0x01	; 1
     dee:	50 40       	sbci	r21, 0x00	; 0
     df0:	e6 95       	lsr	r30
     df2:	00 1c       	adc	r0, r0
     df4:	ca f7       	brpl	.-14     	; 0xde8 <__divsf3_pse+0x2c>
     df6:	2b d0       	rcall	.+86     	; 0xe4e <__divsf3_pse+0x92>
     df8:	fe 2f       	mov	r31, r30
     dfa:	29 d0       	rcall	.+82     	; 0xe4e <__divsf3_pse+0x92>
     dfc:	66 0f       	add	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	bb 1f       	adc	r27, r27
     e04:	26 17       	cp	r18, r22
     e06:	37 07       	cpc	r19, r23
     e08:	48 07       	cpc	r20, r24
     e0a:	ab 07       	cpc	r26, r27
     e0c:	b0 e8       	ldi	r27, 0x80	; 128
     e0e:	09 f0       	breq	.+2      	; 0xe12 <__divsf3_pse+0x56>
     e10:	bb 0b       	sbc	r27, r27
     e12:	80 2d       	mov	r24, r0
     e14:	bf 01       	movw	r22, r30
     e16:	ff 27       	eor	r31, r31
     e18:	93 58       	subi	r25, 0x83	; 131
     e1a:	5f 4f       	sbci	r21, 0xFF	; 255
     e1c:	3a f0       	brmi	.+14     	; 0xe2c <__divsf3_pse+0x70>
     e1e:	9e 3f       	cpi	r25, 0xFE	; 254
     e20:	51 05       	cpc	r21, r1
     e22:	78 f0       	brcs	.+30     	; 0xe42 <__divsf3_pse+0x86>
     e24:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
     e28:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>
     e2c:	5f 3f       	cpi	r21, 0xFF	; 255
     e2e:	e4 f3       	brlt	.-8      	; 0xe28 <__divsf3_pse+0x6c>
     e30:	98 3e       	cpi	r25, 0xE8	; 232
     e32:	d4 f3       	brlt	.-12     	; 0xe28 <__divsf3_pse+0x6c>
     e34:	86 95       	lsr	r24
     e36:	77 95       	ror	r23
     e38:	67 95       	ror	r22
     e3a:	b7 95       	ror	r27
     e3c:	f7 95       	ror	r31
     e3e:	9f 5f       	subi	r25, 0xFF	; 255
     e40:	c9 f7       	brne	.-14     	; 0xe34 <__divsf3_pse+0x78>
     e42:	88 0f       	add	r24, r24
     e44:	91 1d       	adc	r25, r1
     e46:	96 95       	lsr	r25
     e48:	87 95       	ror	r24
     e4a:	97 f9       	bld	r25, 7
     e4c:	08 95       	ret
     e4e:	e1 e0       	ldi	r30, 0x01	; 1
     e50:	66 0f       	add	r22, r22
     e52:	77 1f       	adc	r23, r23
     e54:	88 1f       	adc	r24, r24
     e56:	bb 1f       	adc	r27, r27
     e58:	62 17       	cp	r22, r18
     e5a:	73 07       	cpc	r23, r19
     e5c:	84 07       	cpc	r24, r20
     e5e:	ba 07       	cpc	r27, r26
     e60:	20 f0       	brcs	.+8      	; 0xe6a <__divsf3_pse+0xae>
     e62:	62 1b       	sub	r22, r18
     e64:	73 0b       	sbc	r23, r19
     e66:	84 0b       	sbc	r24, r20
     e68:	ba 0b       	sbc	r27, r26
     e6a:	ee 1f       	adc	r30, r30
     e6c:	88 f7       	brcc	.-30     	; 0xe50 <__divsf3_pse+0x94>
     e6e:	e0 95       	com	r30
     e70:	08 95       	ret

00000e72 <__floatunsisf>:
     e72:	e8 94       	clt
     e74:	09 c0       	rjmp	.+18     	; 0xe88 <__floatsisf+0x12>

00000e76 <__floatsisf>:
     e76:	97 fb       	bst	r25, 7
     e78:	3e f4       	brtc	.+14     	; 0xe88 <__floatsisf+0x12>
     e7a:	90 95       	com	r25
     e7c:	80 95       	com	r24
     e7e:	70 95       	com	r23
     e80:	61 95       	neg	r22
     e82:	7f 4f       	sbci	r23, 0xFF	; 255
     e84:	8f 4f       	sbci	r24, 0xFF	; 255
     e86:	9f 4f       	sbci	r25, 0xFF	; 255
     e88:	99 23       	and	r25, r25
     e8a:	a9 f0       	breq	.+42     	; 0xeb6 <__floatsisf+0x40>
     e8c:	f9 2f       	mov	r31, r25
     e8e:	96 e9       	ldi	r25, 0x96	; 150
     e90:	bb 27       	eor	r27, r27
     e92:	93 95       	inc	r25
     e94:	f6 95       	lsr	r31
     e96:	87 95       	ror	r24
     e98:	77 95       	ror	r23
     e9a:	67 95       	ror	r22
     e9c:	b7 95       	ror	r27
     e9e:	f1 11       	cpse	r31, r1
     ea0:	f8 cf       	rjmp	.-16     	; 0xe92 <__floatsisf+0x1c>
     ea2:	fa f4       	brpl	.+62     	; 0xee2 <__floatsisf+0x6c>
     ea4:	bb 0f       	add	r27, r27
     ea6:	11 f4       	brne	.+4      	; 0xeac <__floatsisf+0x36>
     ea8:	60 ff       	sbrs	r22, 0
     eaa:	1b c0       	rjmp	.+54     	; 0xee2 <__floatsisf+0x6c>
     eac:	6f 5f       	subi	r22, 0xFF	; 255
     eae:	7f 4f       	sbci	r23, 0xFF	; 255
     eb0:	8f 4f       	sbci	r24, 0xFF	; 255
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	16 c0       	rjmp	.+44     	; 0xee2 <__floatsisf+0x6c>
     eb6:	88 23       	and	r24, r24
     eb8:	11 f0       	breq	.+4      	; 0xebe <__floatsisf+0x48>
     eba:	96 e9       	ldi	r25, 0x96	; 150
     ebc:	11 c0       	rjmp	.+34     	; 0xee0 <__floatsisf+0x6a>
     ebe:	77 23       	and	r23, r23
     ec0:	21 f0       	breq	.+8      	; 0xeca <__floatsisf+0x54>
     ec2:	9e e8       	ldi	r25, 0x8E	; 142
     ec4:	87 2f       	mov	r24, r23
     ec6:	76 2f       	mov	r23, r22
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__floatsisf+0x5e>
     eca:	66 23       	and	r22, r22
     ecc:	71 f0       	breq	.+28     	; 0xeea <__floatsisf+0x74>
     ece:	96 e8       	ldi	r25, 0x86	; 134
     ed0:	86 2f       	mov	r24, r22
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	2a f0       	brmi	.+10     	; 0xee2 <__floatsisf+0x6c>
     ed8:	9a 95       	dec	r25
     eda:	66 0f       	add	r22, r22
     edc:	77 1f       	adc	r23, r23
     ede:	88 1f       	adc	r24, r24
     ee0:	da f7       	brpl	.-10     	; 0xed8 <__floatsisf+0x62>
     ee2:	88 0f       	add	r24, r24
     ee4:	96 95       	lsr	r25
     ee6:	87 95       	ror	r24
     ee8:	97 f9       	bld	r25, 7
     eea:	08 95       	ret

00000eec <__fp_cmp>:
     eec:	99 0f       	add	r25, r25
     eee:	00 08       	sbc	r0, r0
     ef0:	55 0f       	add	r21, r21
     ef2:	aa 0b       	sbc	r26, r26
     ef4:	e0 e8       	ldi	r30, 0x80	; 128
     ef6:	fe ef       	ldi	r31, 0xFE	; 254
     ef8:	16 16       	cp	r1, r22
     efa:	17 06       	cpc	r1, r23
     efc:	e8 07       	cpc	r30, r24
     efe:	f9 07       	cpc	r31, r25
     f00:	c0 f0       	brcs	.+48     	; 0xf32 <__fp_cmp+0x46>
     f02:	12 16       	cp	r1, r18
     f04:	13 06       	cpc	r1, r19
     f06:	e4 07       	cpc	r30, r20
     f08:	f5 07       	cpc	r31, r21
     f0a:	98 f0       	brcs	.+38     	; 0xf32 <__fp_cmp+0x46>
     f0c:	62 1b       	sub	r22, r18
     f0e:	73 0b       	sbc	r23, r19
     f10:	84 0b       	sbc	r24, r20
     f12:	95 0b       	sbc	r25, r21
     f14:	39 f4       	brne	.+14     	; 0xf24 <__fp_cmp+0x38>
     f16:	0a 26       	eor	r0, r26
     f18:	61 f0       	breq	.+24     	; 0xf32 <__fp_cmp+0x46>
     f1a:	23 2b       	or	r18, r19
     f1c:	24 2b       	or	r18, r20
     f1e:	25 2b       	or	r18, r21
     f20:	21 f4       	brne	.+8      	; 0xf2a <__fp_cmp+0x3e>
     f22:	08 95       	ret
     f24:	0a 26       	eor	r0, r26
     f26:	09 f4       	brne	.+2      	; 0xf2a <__fp_cmp+0x3e>
     f28:	a1 40       	sbci	r26, 0x01	; 1
     f2a:	a6 95       	lsr	r26
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	81 1d       	adc	r24, r1
     f30:	81 1d       	adc	r24, r1
     f32:	08 95       	ret

00000f34 <__fp_inf>:
     f34:	97 f9       	bld	r25, 7
     f36:	9f 67       	ori	r25, 0x7F	; 127
     f38:	80 e8       	ldi	r24, 0x80	; 128
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	08 95       	ret

00000f40 <__fp_nan>:
     f40:	9f ef       	ldi	r25, 0xFF	; 255
     f42:	80 ec       	ldi	r24, 0xC0	; 192
     f44:	08 95       	ret

00000f46 <__fp_pscA>:
     f46:	00 24       	eor	r0, r0
     f48:	0a 94       	dec	r0
     f4a:	16 16       	cp	r1, r22
     f4c:	17 06       	cpc	r1, r23
     f4e:	18 06       	cpc	r1, r24
     f50:	09 06       	cpc	r0, r25
     f52:	08 95       	ret

00000f54 <__fp_pscB>:
     f54:	00 24       	eor	r0, r0
     f56:	0a 94       	dec	r0
     f58:	12 16       	cp	r1, r18
     f5a:	13 06       	cpc	r1, r19
     f5c:	14 06       	cpc	r1, r20
     f5e:	05 06       	cpc	r0, r21
     f60:	08 95       	ret

00000f62 <__fp_round>:
     f62:	09 2e       	mov	r0, r25
     f64:	03 94       	inc	r0
     f66:	00 0c       	add	r0, r0
     f68:	11 f4       	brne	.+4      	; 0xf6e <__fp_round+0xc>
     f6a:	88 23       	and	r24, r24
     f6c:	52 f0       	brmi	.+20     	; 0xf82 <__fp_round+0x20>
     f6e:	bb 0f       	add	r27, r27
     f70:	40 f4       	brcc	.+16     	; 0xf82 <__fp_round+0x20>
     f72:	bf 2b       	or	r27, r31
     f74:	11 f4       	brne	.+4      	; 0xf7a <__fp_round+0x18>
     f76:	60 ff       	sbrs	r22, 0
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <__fp_round+0x20>
     f7a:	6f 5f       	subi	r22, 0xFF	; 255
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8f 4f       	sbci	r24, 0xFF	; 255
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	08 95       	ret

00000f84 <__fp_split3>:
     f84:	57 fd       	sbrc	r21, 7
     f86:	90 58       	subi	r25, 0x80	; 128
     f88:	44 0f       	add	r20, r20
     f8a:	55 1f       	adc	r21, r21
     f8c:	59 f0       	breq	.+22     	; 0xfa4 <__fp_splitA+0x10>
     f8e:	5f 3f       	cpi	r21, 0xFF	; 255
     f90:	71 f0       	breq	.+28     	; 0xfae <__fp_splitA+0x1a>
     f92:	47 95       	ror	r20

00000f94 <__fp_splitA>:
     f94:	88 0f       	add	r24, r24
     f96:	97 fb       	bst	r25, 7
     f98:	99 1f       	adc	r25, r25
     f9a:	61 f0       	breq	.+24     	; 0xfb4 <__fp_splitA+0x20>
     f9c:	9f 3f       	cpi	r25, 0xFF	; 255
     f9e:	79 f0       	breq	.+30     	; 0xfbe <__fp_splitA+0x2a>
     fa0:	87 95       	ror	r24
     fa2:	08 95       	ret
     fa4:	12 16       	cp	r1, r18
     fa6:	13 06       	cpc	r1, r19
     fa8:	14 06       	cpc	r1, r20
     faa:	55 1f       	adc	r21, r21
     fac:	f2 cf       	rjmp	.-28     	; 0xf92 <__fp_split3+0xe>
     fae:	46 95       	lsr	r20
     fb0:	f1 df       	rcall	.-30     	; 0xf94 <__fp_splitA>
     fb2:	08 c0       	rjmp	.+16     	; 0xfc4 <__fp_splitA+0x30>
     fb4:	16 16       	cp	r1, r22
     fb6:	17 06       	cpc	r1, r23
     fb8:	18 06       	cpc	r1, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	f1 cf       	rjmp	.-30     	; 0xfa0 <__fp_splitA+0xc>
     fbe:	86 95       	lsr	r24
     fc0:	71 05       	cpc	r23, r1
     fc2:	61 05       	cpc	r22, r1
     fc4:	08 94       	sec
     fc6:	08 95       	ret

00000fc8 <__fp_zero>:
     fc8:	e8 94       	clt

00000fca <__fp_szero>:
     fca:	bb 27       	eor	r27, r27
     fcc:	66 27       	eor	r22, r22
     fce:	77 27       	eor	r23, r23
     fd0:	cb 01       	movw	r24, r22
     fd2:	97 f9       	bld	r25, 7
     fd4:	08 95       	ret

00000fd6 <__gesf2>:
     fd6:	0e 94 76 07 	call	0xeec	; 0xeec <__fp_cmp>
     fda:	08 f4       	brcc	.+2      	; 0xfde <__gesf2+0x8>
     fdc:	8f ef       	ldi	r24, 0xFF	; 255
     fde:	08 95       	ret

00000fe0 <__mulsf3>:
     fe0:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3x>
     fe4:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_round>
     fe8:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_pscA>
     fec:	38 f0       	brcs	.+14     	; 0xffc <__mulsf3+0x1c>
     fee:	0e 94 aa 07 	call	0xf54	; 0xf54 <__fp_pscB>
     ff2:	20 f0       	brcs	.+8      	; 0xffc <__mulsf3+0x1c>
     ff4:	95 23       	and	r25, r21
     ff6:	11 f0       	breq	.+4      	; 0xffc <__mulsf3+0x1c>
     ff8:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
     ffc:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_nan>
    1000:	11 24       	eor	r1, r1
    1002:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>

00001006 <__mulsf3x>:
    1006:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_split3>
    100a:	70 f3       	brcs	.-36     	; 0xfe8 <__mulsf3+0x8>

0000100c <__mulsf3_pse>:
    100c:	95 9f       	mul	r25, r21
    100e:	c1 f3       	breq	.-16     	; 0x1000 <__mulsf3+0x20>
    1010:	95 0f       	add	r25, r21
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	55 1f       	adc	r21, r21
    1016:	62 9f       	mul	r22, r18
    1018:	f0 01       	movw	r30, r0
    101a:	72 9f       	mul	r23, r18
    101c:	bb 27       	eor	r27, r27
    101e:	f0 0d       	add	r31, r0
    1020:	b1 1d       	adc	r27, r1
    1022:	63 9f       	mul	r22, r19
    1024:	aa 27       	eor	r26, r26
    1026:	f0 0d       	add	r31, r0
    1028:	b1 1d       	adc	r27, r1
    102a:	aa 1f       	adc	r26, r26
    102c:	64 9f       	mul	r22, r20
    102e:	66 27       	eor	r22, r22
    1030:	b0 0d       	add	r27, r0
    1032:	a1 1d       	adc	r26, r1
    1034:	66 1f       	adc	r22, r22
    1036:	82 9f       	mul	r24, r18
    1038:	22 27       	eor	r18, r18
    103a:	b0 0d       	add	r27, r0
    103c:	a1 1d       	adc	r26, r1
    103e:	62 1f       	adc	r22, r18
    1040:	73 9f       	mul	r23, r19
    1042:	b0 0d       	add	r27, r0
    1044:	a1 1d       	adc	r26, r1
    1046:	62 1f       	adc	r22, r18
    1048:	83 9f       	mul	r24, r19
    104a:	a0 0d       	add	r26, r0
    104c:	61 1d       	adc	r22, r1
    104e:	22 1f       	adc	r18, r18
    1050:	74 9f       	mul	r23, r20
    1052:	33 27       	eor	r19, r19
    1054:	a0 0d       	add	r26, r0
    1056:	61 1d       	adc	r22, r1
    1058:	23 1f       	adc	r18, r19
    105a:	84 9f       	mul	r24, r20
    105c:	60 0d       	add	r22, r0
    105e:	21 1d       	adc	r18, r1
    1060:	82 2f       	mov	r24, r18
    1062:	76 2f       	mov	r23, r22
    1064:	6a 2f       	mov	r22, r26
    1066:	11 24       	eor	r1, r1
    1068:	9f 57       	subi	r25, 0x7F	; 127
    106a:	50 40       	sbci	r21, 0x00	; 0
    106c:	9a f0       	brmi	.+38     	; 0x1094 <__mulsf3_pse+0x88>
    106e:	f1 f0       	breq	.+60     	; 0x10ac <__mulsf3_pse+0xa0>
    1070:	88 23       	and	r24, r24
    1072:	4a f0       	brmi	.+18     	; 0x1086 <__mulsf3_pse+0x7a>
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	bb 1f       	adc	r27, r27
    107a:	66 1f       	adc	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	88 1f       	adc	r24, r24
    1080:	91 50       	subi	r25, 0x01	; 1
    1082:	50 40       	sbci	r21, 0x00	; 0
    1084:	a9 f7       	brne	.-22     	; 0x1070 <__mulsf3_pse+0x64>
    1086:	9e 3f       	cpi	r25, 0xFE	; 254
    1088:	51 05       	cpc	r21, r1
    108a:	80 f0       	brcs	.+32     	; 0x10ac <__mulsf3_pse+0xa0>
    108c:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
    1090:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	e4 f3       	brlt	.-8      	; 0x1090 <__mulsf3_pse+0x84>
    1098:	98 3e       	cpi	r25, 0xE8	; 232
    109a:	d4 f3       	brlt	.-12     	; 0x1090 <__mulsf3_pse+0x84>
    109c:	86 95       	lsr	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	b7 95       	ror	r27
    10a4:	f7 95       	ror	r31
    10a6:	e7 95       	ror	r30
    10a8:	9f 5f       	subi	r25, 0xFF	; 255
    10aa:	c1 f7       	brne	.-16     	; 0x109c <__mulsf3_pse+0x90>
    10ac:	fe 2b       	or	r31, r30
    10ae:	88 0f       	add	r24, r24
    10b0:	91 1d       	adc	r25, r1
    10b2:	96 95       	lsr	r25
    10b4:	87 95       	ror	r24
    10b6:	97 f9       	bld	r25, 7
    10b8:	08 95       	ret

000010ba <__umulhisi3>:
    10ba:	a2 9f       	mul	r26, r18
    10bc:	b0 01       	movw	r22, r0
    10be:	b3 9f       	mul	r27, r19
    10c0:	c0 01       	movw	r24, r0
    10c2:	a3 9f       	mul	r26, r19
    10c4:	70 0d       	add	r23, r0
    10c6:	81 1d       	adc	r24, r1
    10c8:	11 24       	eor	r1, r1
    10ca:	91 1d       	adc	r25, r1
    10cc:	b2 9f       	mul	r27, r18
    10ce:	70 0d       	add	r23, r0
    10d0:	81 1d       	adc	r24, r1
    10d2:	11 24       	eor	r1, r1
    10d4:	91 1d       	adc	r25, r1
    10d6:	08 95       	ret

000010d8 <dtostrf>:
    10d8:	ef 92       	push	r14
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	e8 01       	movw	r28, r16
    10e4:	47 fd       	sbrc	r20, 7
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <dtostrf+0x14>
    10e8:	34 e0       	ldi	r19, 0x04	; 4
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <dtostrf+0x16>
    10ec:	34 e1       	ldi	r19, 0x14	; 20
    10ee:	04 2e       	mov	r0, r20
    10f0:	00 0c       	add	r0, r0
    10f2:	55 0b       	sbc	r21, r21
    10f4:	57 ff       	sbrs	r21, 7
    10f6:	03 c0       	rjmp	.+6      	; 0x10fe <dtostrf+0x26>
    10f8:	51 95       	neg	r21
    10fa:	41 95       	neg	r20
    10fc:	51 09       	sbc	r21, r1
    10fe:	e3 2e       	mov	r14, r19
    1100:	02 2f       	mov	r16, r18
    1102:	24 2f       	mov	r18, r20
    1104:	ae 01       	movw	r20, r28
    1106:	0e 94 b1 08 	call	0x1162	; 0x1162 <dtoa_prf>
    110a:	ce 01       	movw	r24, r28
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ef 90       	pop	r14
    1116:	08 95       	ret

00001118 <__itoa_ncheck>:
    1118:	bb 27       	eor	r27, r27
    111a:	4a 30       	cpi	r20, 0x0A	; 10
    111c:	31 f4       	brne	.+12     	; 0x112a <__itoa_ncheck+0x12>
    111e:	99 23       	and	r25, r25
    1120:	22 f4       	brpl	.+8      	; 0x112a <__itoa_ncheck+0x12>
    1122:	bd e2       	ldi	r27, 0x2D	; 45
    1124:	90 95       	com	r25
    1126:	81 95       	neg	r24
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__utoa_common>

0000112e <__utoa_ncheck>:
    112e:	bb 27       	eor	r27, r27

00001130 <__utoa_common>:
    1130:	fb 01       	movw	r30, r22
    1132:	55 27       	eor	r21, r21
    1134:	aa 27       	eor	r26, r26
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	aa 1f       	adc	r26, r26
    113c:	a4 17       	cp	r26, r20
    113e:	10 f0       	brcs	.+4      	; 0x1144 <__utoa_common+0x14>
    1140:	a4 1b       	sub	r26, r20
    1142:	83 95       	inc	r24
    1144:	50 51       	subi	r21, 0x10	; 16
    1146:	b9 f7       	brne	.-18     	; 0x1136 <__utoa_common+0x6>
    1148:	a0 5d       	subi	r26, 0xD0	; 208
    114a:	aa 33       	cpi	r26, 0x3A	; 58
    114c:	08 f0       	brcs	.+2      	; 0x1150 <__utoa_common+0x20>
    114e:	a9 5d       	subi	r26, 0xD9	; 217
    1150:	a1 93       	st	Z+, r26
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	79 f7       	brne	.-34     	; 0x1134 <__utoa_common+0x4>
    1156:	b1 11       	cpse	r27, r1
    1158:	b1 93       	st	Z+, r27
    115a:	11 92       	st	Z+, r1
    115c:	cb 01       	movw	r24, r22
    115e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <strrev>

00001162 <dtoa_prf>:
    1162:	a9 e0       	ldi	r26, 0x09	; 9
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e7 eb       	ldi	r30, 0xB7	; 183
    1168:	f8 e0       	ldi	r31, 0x08	; 8
    116a:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__prologue_saves__+0xc>
    116e:	6a 01       	movw	r12, r20
    1170:	12 2f       	mov	r17, r18
    1172:	b0 2e       	mov	r11, r16
    1174:	2b e3       	ldi	r18, 0x3B	; 59
    1176:	20 17       	cp	r18, r16
    1178:	20 f0       	brcs	.+8      	; 0x1182 <dtoa_prf+0x20>
    117a:	ff 24       	eor	r15, r15
    117c:	f3 94       	inc	r15
    117e:	f0 0e       	add	r15, r16
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <dtoa_prf+0x24>
    1182:	2c e3       	ldi	r18, 0x3C	; 60
    1184:	f2 2e       	mov	r15, r18
    1186:	0f 2d       	mov	r16, r15
    1188:	27 e0       	ldi	r18, 0x07	; 7
    118a:	ae 01       	movw	r20, r28
    118c:	4f 5f       	subi	r20, 0xFF	; 255
    118e:	5f 4f       	sbci	r21, 0xFF	; 255
    1190:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__ftoa_engine>
    1194:	bc 01       	movw	r22, r24
    1196:	49 81       	ldd	r20, Y+1	; 0x01
    1198:	84 2f       	mov	r24, r20
    119a:	89 70       	andi	r24, 0x09	; 9
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	31 f0       	breq	.+12     	; 0x11ac <dtoa_prf+0x4a>
    11a0:	e1 fc       	sbrc	r14, 1
    11a2:	06 c0       	rjmp	.+12     	; 0x11b0 <dtoa_prf+0x4e>
    11a4:	e0 fe       	sbrs	r14, 0
    11a6:	06 c0       	rjmp	.+12     	; 0x11b4 <dtoa_prf+0x52>
    11a8:	90 e2       	ldi	r25, 0x20	; 32
    11aa:	05 c0       	rjmp	.+10     	; 0x11b6 <dtoa_prf+0x54>
    11ac:	9d e2       	ldi	r25, 0x2D	; 45
    11ae:	03 c0       	rjmp	.+6      	; 0x11b6 <dtoa_prf+0x54>
    11b0:	9b e2       	ldi	r25, 0x2B	; 43
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <dtoa_prf+0x54>
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	5e 2d       	mov	r21, r14
    11b8:	50 71       	andi	r21, 0x10	; 16
    11ba:	43 ff       	sbrs	r20, 3
    11bc:	3c c0       	rjmp	.+120    	; 0x1236 <dtoa_prf+0xd4>
    11be:	91 11       	cpse	r25, r1
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <dtoa_prf+0x64>
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <dtoa_prf+0x66>
    11c6:	84 e0       	ldi	r24, 0x04	; 4
    11c8:	81 17       	cp	r24, r17
    11ca:	18 f4       	brcc	.+6      	; 0x11d2 <dtoa_prf+0x70>
    11cc:	21 2f       	mov	r18, r17
    11ce:	28 1b       	sub	r18, r24
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <dtoa_prf+0x72>
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	51 11       	cpse	r21, r1
    11d6:	0b c0       	rjmp	.+22     	; 0x11ee <dtoa_prf+0x8c>
    11d8:	f6 01       	movw	r30, r12
    11da:	82 2f       	mov	r24, r18
    11dc:	30 e2       	ldi	r19, 0x20	; 32
    11de:	88 23       	and	r24, r24
    11e0:	19 f0       	breq	.+6      	; 0x11e8 <dtoa_prf+0x86>
    11e2:	31 93       	st	Z+, r19
    11e4:	81 50       	subi	r24, 0x01	; 1
    11e6:	fb cf       	rjmp	.-10     	; 0x11de <dtoa_prf+0x7c>
    11e8:	c2 0e       	add	r12, r18
    11ea:	d1 1c       	adc	r13, r1
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	99 23       	and	r25, r25
    11f0:	29 f0       	breq	.+10     	; 0x11fc <dtoa_prf+0x9a>
    11f2:	d6 01       	movw	r26, r12
    11f4:	9c 93       	st	X, r25
    11f6:	f6 01       	movw	r30, r12
    11f8:	31 96       	adiw	r30, 0x01	; 1
    11fa:	6f 01       	movw	r12, r30
    11fc:	c6 01       	movw	r24, r12
    11fe:	03 96       	adiw	r24, 0x03	; 3
    1200:	e2 fe       	sbrs	r14, 2
    1202:	0a c0       	rjmp	.+20     	; 0x1218 <dtoa_prf+0xb6>
    1204:	3e e4       	ldi	r19, 0x4E	; 78
    1206:	d6 01       	movw	r26, r12
    1208:	3c 93       	st	X, r19
    120a:	41 e4       	ldi	r20, 0x41	; 65
    120c:	11 96       	adiw	r26, 0x01	; 1
    120e:	4c 93       	st	X, r20
    1210:	11 97       	sbiw	r26, 0x01	; 1
    1212:	12 96       	adiw	r26, 0x02	; 2
    1214:	3c 93       	st	X, r19
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <dtoa_prf+0xc2>
    1218:	3e e6       	ldi	r19, 0x6E	; 110
    121a:	f6 01       	movw	r30, r12
    121c:	30 83       	st	Z, r19
    121e:	41 e6       	ldi	r20, 0x61	; 97
    1220:	41 83       	std	Z+1, r20	; 0x01
    1222:	32 83       	std	Z+2, r19	; 0x02
    1224:	fc 01       	movw	r30, r24
    1226:	32 2f       	mov	r19, r18
    1228:	40 e2       	ldi	r20, 0x20	; 32
    122a:	33 23       	and	r19, r19
    122c:	09 f4       	brne	.+2      	; 0x1230 <dtoa_prf+0xce>
    122e:	42 c0       	rjmp	.+132    	; 0x12b4 <dtoa_prf+0x152>
    1230:	41 93       	st	Z+, r20
    1232:	31 50       	subi	r19, 0x01	; 1
    1234:	fa cf       	rjmp	.-12     	; 0x122a <dtoa_prf+0xc8>
    1236:	42 ff       	sbrs	r20, 2
    1238:	44 c0       	rjmp	.+136    	; 0x12c2 <dtoa_prf+0x160>
    123a:	91 11       	cpse	r25, r1
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <dtoa_prf+0xe0>
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <dtoa_prf+0xe2>
    1242:	84 e0       	ldi	r24, 0x04	; 4
    1244:	81 17       	cp	r24, r17
    1246:	18 f4       	brcc	.+6      	; 0x124e <dtoa_prf+0xec>
    1248:	21 2f       	mov	r18, r17
    124a:	28 1b       	sub	r18, r24
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <dtoa_prf+0xee>
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	51 11       	cpse	r21, r1
    1252:	0b c0       	rjmp	.+22     	; 0x126a <dtoa_prf+0x108>
    1254:	f6 01       	movw	r30, r12
    1256:	82 2f       	mov	r24, r18
    1258:	30 e2       	ldi	r19, 0x20	; 32
    125a:	88 23       	and	r24, r24
    125c:	19 f0       	breq	.+6      	; 0x1264 <dtoa_prf+0x102>
    125e:	31 93       	st	Z+, r19
    1260:	81 50       	subi	r24, 0x01	; 1
    1262:	fb cf       	rjmp	.-10     	; 0x125a <dtoa_prf+0xf8>
    1264:	c2 0e       	add	r12, r18
    1266:	d1 1c       	adc	r13, r1
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	99 23       	and	r25, r25
    126c:	29 f0       	breq	.+10     	; 0x1278 <dtoa_prf+0x116>
    126e:	d6 01       	movw	r26, r12
    1270:	9c 93       	st	X, r25
    1272:	f6 01       	movw	r30, r12
    1274:	31 96       	adiw	r30, 0x01	; 1
    1276:	6f 01       	movw	r12, r30
    1278:	c6 01       	movw	r24, r12
    127a:	03 96       	adiw	r24, 0x03	; 3
    127c:	e2 fe       	sbrs	r14, 2
    127e:	0b c0       	rjmp	.+22     	; 0x1296 <dtoa_prf+0x134>
    1280:	39 e4       	ldi	r19, 0x49	; 73
    1282:	d6 01       	movw	r26, r12
    1284:	3c 93       	st	X, r19
    1286:	3e e4       	ldi	r19, 0x4E	; 78
    1288:	11 96       	adiw	r26, 0x01	; 1
    128a:	3c 93       	st	X, r19
    128c:	11 97       	sbiw	r26, 0x01	; 1
    128e:	36 e4       	ldi	r19, 0x46	; 70
    1290:	12 96       	adiw	r26, 0x02	; 2
    1292:	3c 93       	st	X, r19
    1294:	07 c0       	rjmp	.+14     	; 0x12a4 <dtoa_prf+0x142>
    1296:	39 e6       	ldi	r19, 0x69	; 105
    1298:	f6 01       	movw	r30, r12
    129a:	30 83       	st	Z, r19
    129c:	3e e6       	ldi	r19, 0x6E	; 110
    129e:	31 83       	std	Z+1, r19	; 0x01
    12a0:	36 e6       	ldi	r19, 0x66	; 102
    12a2:	32 83       	std	Z+2, r19	; 0x02
    12a4:	fc 01       	movw	r30, r24
    12a6:	32 2f       	mov	r19, r18
    12a8:	40 e2       	ldi	r20, 0x20	; 32
    12aa:	33 23       	and	r19, r19
    12ac:	19 f0       	breq	.+6      	; 0x12b4 <dtoa_prf+0x152>
    12ae:	41 93       	st	Z+, r20
    12b0:	31 50       	subi	r19, 0x01	; 1
    12b2:	fb cf       	rjmp	.-10     	; 0x12aa <dtoa_prf+0x148>
    12b4:	fc 01       	movw	r30, r24
    12b6:	e2 0f       	add	r30, r18
    12b8:	f1 1d       	adc	r31, r1
    12ba:	10 82       	st	Z, r1
    12bc:	8e ef       	ldi	r24, 0xFE	; 254
    12be:	9f ef       	ldi	r25, 0xFF	; 255
    12c0:	a6 c0       	rjmp	.+332    	; 0x140e <dtoa_prf+0x2ac>
    12c2:	21 e0       	ldi	r18, 0x01	; 1
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	91 11       	cpse	r25, r1
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <dtoa_prf+0x16c>
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	16 16       	cp	r1, r22
    12d0:	17 06       	cpc	r1, r23
    12d2:	1c f4       	brge	.+6      	; 0x12da <dtoa_prf+0x178>
    12d4:	fb 01       	movw	r30, r22
    12d6:	31 96       	adiw	r30, 0x01	; 1
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <dtoa_prf+0x17c>
    12da:	e1 e0       	ldi	r30, 0x01	; 1
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	2e 0f       	add	r18, r30
    12e0:	3f 1f       	adc	r19, r31
    12e2:	bb 20       	and	r11, r11
    12e4:	21 f0       	breq	.+8      	; 0x12ee <dtoa_prf+0x18c>
    12e6:	eb 2d       	mov	r30, r11
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	31 96       	adiw	r30, 0x01	; 1
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <dtoa_prf+0x190>
    12ee:	e0 e0       	ldi	r30, 0x00	; 0
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	2e 0f       	add	r18, r30
    12f4:	3f 1f       	adc	r19, r31
    12f6:	e1 2f       	mov	r30, r17
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	2e 17       	cp	r18, r30
    12fc:	3f 07       	cpc	r19, r31
    12fe:	1c f4       	brge	.+6      	; 0x1306 <dtoa_prf+0x1a4>
    1300:	12 1b       	sub	r17, r18
    1302:	21 2f       	mov	r18, r17
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <dtoa_prf+0x1a6>
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	8e 2d       	mov	r24, r14
    130a:	88 71       	andi	r24, 0x18	; 24
    130c:	59 f4       	brne	.+22     	; 0x1324 <dtoa_prf+0x1c2>
    130e:	f6 01       	movw	r30, r12
    1310:	82 2f       	mov	r24, r18
    1312:	30 e2       	ldi	r19, 0x20	; 32
    1314:	88 23       	and	r24, r24
    1316:	19 f0       	breq	.+6      	; 0x131e <dtoa_prf+0x1bc>
    1318:	31 93       	st	Z+, r19
    131a:	81 50       	subi	r24, 0x01	; 1
    131c:	fb cf       	rjmp	.-10     	; 0x1314 <dtoa_prf+0x1b2>
    131e:	c2 0e       	add	r12, r18
    1320:	d1 1c       	adc	r13, r1
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	99 23       	and	r25, r25
    1326:	29 f0       	breq	.+10     	; 0x1332 <dtoa_prf+0x1d0>
    1328:	d6 01       	movw	r26, r12
    132a:	9c 93       	st	X, r25
    132c:	f6 01       	movw	r30, r12
    132e:	31 96       	adiw	r30, 0x01	; 1
    1330:	6f 01       	movw	r12, r30
    1332:	51 11       	cpse	r21, r1
    1334:	0b c0       	rjmp	.+22     	; 0x134c <dtoa_prf+0x1ea>
    1336:	f6 01       	movw	r30, r12
    1338:	82 2f       	mov	r24, r18
    133a:	90 e3       	ldi	r25, 0x30	; 48
    133c:	88 23       	and	r24, r24
    133e:	19 f0       	breq	.+6      	; 0x1346 <dtoa_prf+0x1e4>
    1340:	91 93       	st	Z+, r25
    1342:	81 50       	subi	r24, 0x01	; 1
    1344:	fb cf       	rjmp	.-10     	; 0x133c <dtoa_prf+0x1da>
    1346:	c2 0e       	add	r12, r18
    1348:	d1 1c       	adc	r13, r1
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	0f 2d       	mov	r16, r15
    134e:	06 0f       	add	r16, r22
    1350:	9a 81       	ldd	r25, Y+2	; 0x02
    1352:	34 2f       	mov	r19, r20
    1354:	30 71       	andi	r19, 0x10	; 16
    1356:	44 ff       	sbrs	r20, 4
    1358:	03 c0       	rjmp	.+6      	; 0x1360 <dtoa_prf+0x1fe>
    135a:	91 33       	cpi	r25, 0x31	; 49
    135c:	09 f4       	brne	.+2      	; 0x1360 <dtoa_prf+0x1fe>
    135e:	01 50       	subi	r16, 0x01	; 1
    1360:	10 16       	cp	r1, r16
    1362:	24 f4       	brge	.+8      	; 0x136c <dtoa_prf+0x20a>
    1364:	09 30       	cpi	r16, 0x09	; 9
    1366:	18 f0       	brcs	.+6      	; 0x136e <dtoa_prf+0x20c>
    1368:	08 e0       	ldi	r16, 0x08	; 8
    136a:	01 c0       	rjmp	.+2      	; 0x136e <dtoa_prf+0x20c>
    136c:	01 e0       	ldi	r16, 0x01	; 1
    136e:	ab 01       	movw	r20, r22
    1370:	77 ff       	sbrs	r23, 7
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <dtoa_prf+0x216>
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	fb 01       	movw	r30, r22
    137a:	e4 1b       	sub	r30, r20
    137c:	f5 0b       	sbc	r31, r21
    137e:	a1 e0       	ldi	r26, 0x01	; 1
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ac 0f       	add	r26, r28
    1384:	bd 1f       	adc	r27, r29
    1386:	ea 0f       	add	r30, r26
    1388:	fb 1f       	adc	r31, r27
    138a:	8e e2       	ldi	r24, 0x2E	; 46
    138c:	a8 2e       	mov	r10, r24
    138e:	4b 01       	movw	r8, r22
    1390:	80 1a       	sub	r8, r16
    1392:	91 08       	sbc	r9, r1
    1394:	0b 2d       	mov	r16, r11
    1396:	10 e0       	ldi	r17, 0x00	; 0
    1398:	11 95       	neg	r17
    139a:	01 95       	neg	r16
    139c:	11 09       	sbc	r17, r1
    139e:	4f 3f       	cpi	r20, 0xFF	; 255
    13a0:	bf ef       	ldi	r27, 0xFF	; 255
    13a2:	5b 07       	cpc	r21, r27
    13a4:	21 f4       	brne	.+8      	; 0x13ae <dtoa_prf+0x24c>
    13a6:	d6 01       	movw	r26, r12
    13a8:	ac 92       	st	X, r10
    13aa:	11 96       	adiw	r26, 0x01	; 1
    13ac:	6d 01       	movw	r12, r26
    13ae:	64 17       	cp	r22, r20
    13b0:	75 07       	cpc	r23, r21
    13b2:	2c f0       	brlt	.+10     	; 0x13be <dtoa_prf+0x25c>
    13b4:	84 16       	cp	r8, r20
    13b6:	95 06       	cpc	r9, r21
    13b8:	14 f4       	brge	.+4      	; 0x13be <dtoa_prf+0x25c>
    13ba:	81 81       	ldd	r24, Z+1	; 0x01
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <dtoa_prf+0x25e>
    13be:	80 e3       	ldi	r24, 0x30	; 48
    13c0:	41 50       	subi	r20, 0x01	; 1
    13c2:	51 09       	sbc	r21, r1
    13c4:	31 96       	adiw	r30, 0x01	; 1
    13c6:	d6 01       	movw	r26, r12
    13c8:	11 96       	adiw	r26, 0x01	; 1
    13ca:	7d 01       	movw	r14, r26
    13cc:	40 17       	cp	r20, r16
    13ce:	51 07       	cpc	r21, r17
    13d0:	24 f0       	brlt	.+8      	; 0x13da <dtoa_prf+0x278>
    13d2:	d6 01       	movw	r26, r12
    13d4:	8c 93       	st	X, r24
    13d6:	67 01       	movw	r12, r14
    13d8:	e2 cf       	rjmp	.-60     	; 0x139e <dtoa_prf+0x23c>
    13da:	64 17       	cp	r22, r20
    13dc:	75 07       	cpc	r23, r21
    13de:	39 f4       	brne	.+14     	; 0x13ee <dtoa_prf+0x28c>
    13e0:	96 33       	cpi	r25, 0x36	; 54
    13e2:	20 f4       	brcc	.+8      	; 0x13ec <dtoa_prf+0x28a>
    13e4:	95 33       	cpi	r25, 0x35	; 53
    13e6:	19 f4       	brne	.+6      	; 0x13ee <dtoa_prf+0x28c>
    13e8:	31 11       	cpse	r19, r1
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <dtoa_prf+0x28c>
    13ec:	81 e3       	ldi	r24, 0x31	; 49
    13ee:	f6 01       	movw	r30, r12
    13f0:	80 83       	st	Z, r24
    13f2:	f7 01       	movw	r30, r14
    13f4:	82 2f       	mov	r24, r18
    13f6:	90 e2       	ldi	r25, 0x20	; 32
    13f8:	88 23       	and	r24, r24
    13fa:	19 f0       	breq	.+6      	; 0x1402 <dtoa_prf+0x2a0>
    13fc:	91 93       	st	Z+, r25
    13fe:	81 50       	subi	r24, 0x01	; 1
    1400:	fb cf       	rjmp	.-10     	; 0x13f8 <dtoa_prf+0x296>
    1402:	f7 01       	movw	r30, r14
    1404:	e2 0f       	add	r30, r18
    1406:	f1 1d       	adc	r31, r1
    1408:	10 82       	st	Z, r1
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	29 96       	adiw	r28, 0x09	; 9
    1410:	ec e0       	ldi	r30, 0x0C	; 12
    1412:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__epilogue_restores__+0xc>

00001416 <__ftoa_engine>:
    1416:	28 30       	cpi	r18, 0x08	; 8
    1418:	08 f0       	brcs	.+2      	; 0x141c <__ftoa_engine+0x6>
    141a:	27 e0       	ldi	r18, 0x07	; 7
    141c:	33 27       	eor	r19, r19
    141e:	da 01       	movw	r26, r20
    1420:	99 0f       	add	r25, r25
    1422:	31 1d       	adc	r19, r1
    1424:	87 fd       	sbrc	r24, 7
    1426:	91 60       	ori	r25, 0x01	; 1
    1428:	00 96       	adiw	r24, 0x00	; 0
    142a:	61 05       	cpc	r22, r1
    142c:	71 05       	cpc	r23, r1
    142e:	39 f4       	brne	.+14     	; 0x143e <__ftoa_engine+0x28>
    1430:	32 60       	ori	r19, 0x02	; 2
    1432:	2e 5f       	subi	r18, 0xFE	; 254
    1434:	3d 93       	st	X+, r19
    1436:	30 e3       	ldi	r19, 0x30	; 48
    1438:	2a 95       	dec	r18
    143a:	e1 f7       	brne	.-8      	; 0x1434 <__ftoa_engine+0x1e>
    143c:	08 95       	ret
    143e:	9f 3f       	cpi	r25, 0xFF	; 255
    1440:	30 f0       	brcs	.+12     	; 0x144e <__ftoa_engine+0x38>
    1442:	80 38       	cpi	r24, 0x80	; 128
    1444:	71 05       	cpc	r23, r1
    1446:	61 05       	cpc	r22, r1
    1448:	09 f0       	breq	.+2      	; 0x144c <__ftoa_engine+0x36>
    144a:	3c 5f       	subi	r19, 0xFC	; 252
    144c:	3c 5f       	subi	r19, 0xFC	; 252
    144e:	3d 93       	st	X+, r19
    1450:	91 30       	cpi	r25, 0x01	; 1
    1452:	08 f0       	brcs	.+2      	; 0x1456 <__ftoa_engine+0x40>
    1454:	80 68       	ori	r24, 0x80	; 128
    1456:	91 1d       	adc	r25, r1
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	1f 93       	push	r17
    145e:	0f 93       	push	r16
    1460:	ff 92       	push	r15
    1462:	ef 92       	push	r14
    1464:	19 2f       	mov	r17, r25
    1466:	98 7f       	andi	r25, 0xF8	; 248
    1468:	96 95       	lsr	r25
    146a:	e9 2f       	mov	r30, r25
    146c:	96 95       	lsr	r25
    146e:	96 95       	lsr	r25
    1470:	e9 0f       	add	r30, r25
    1472:	ff 27       	eor	r31, r31
    1474:	ee 53       	subi	r30, 0x3E	; 62
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	99 27       	eor	r25, r25
    147a:	33 27       	eor	r19, r19
    147c:	ee 24       	eor	r14, r14
    147e:	ff 24       	eor	r15, r15
    1480:	a7 01       	movw	r20, r14
    1482:	e7 01       	movw	r28, r14
    1484:	05 90       	lpm	r0, Z+
    1486:	08 94       	sec
    1488:	07 94       	ror	r0
    148a:	28 f4       	brcc	.+10     	; 0x1496 <__ftoa_engine+0x80>
    148c:	36 0f       	add	r19, r22
    148e:	e7 1e       	adc	r14, r23
    1490:	f8 1e       	adc	r15, r24
    1492:	49 1f       	adc	r20, r25
    1494:	51 1d       	adc	r21, r1
    1496:	66 0f       	add	r22, r22
    1498:	77 1f       	adc	r23, r23
    149a:	88 1f       	adc	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	06 94       	lsr	r0
    14a0:	a1 f7       	brne	.-24     	; 0x148a <__ftoa_engine+0x74>
    14a2:	05 90       	lpm	r0, Z+
    14a4:	07 94       	ror	r0
    14a6:	28 f4       	brcc	.+10     	; 0x14b2 <__ftoa_engine+0x9c>
    14a8:	e7 0e       	add	r14, r23
    14aa:	f8 1e       	adc	r15, r24
    14ac:	49 1f       	adc	r20, r25
    14ae:	56 1f       	adc	r21, r22
    14b0:	c1 1d       	adc	r28, r1
    14b2:	77 0f       	add	r23, r23
    14b4:	88 1f       	adc	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	66 1f       	adc	r22, r22
    14ba:	06 94       	lsr	r0
    14bc:	a1 f7       	brne	.-24     	; 0x14a6 <__ftoa_engine+0x90>
    14be:	05 90       	lpm	r0, Z+
    14c0:	07 94       	ror	r0
    14c2:	28 f4       	brcc	.+10     	; 0x14ce <__ftoa_engine+0xb8>
    14c4:	f8 0e       	add	r15, r24
    14c6:	49 1f       	adc	r20, r25
    14c8:	56 1f       	adc	r21, r22
    14ca:	c7 1f       	adc	r28, r23
    14cc:	d1 1d       	adc	r29, r1
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	66 1f       	adc	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	06 94       	lsr	r0
    14d8:	a1 f7       	brne	.-24     	; 0x14c2 <__ftoa_engine+0xac>
    14da:	05 90       	lpm	r0, Z+
    14dc:	07 94       	ror	r0
    14de:	20 f4       	brcc	.+8      	; 0x14e8 <__ftoa_engine+0xd2>
    14e0:	49 0f       	add	r20, r25
    14e2:	56 1f       	adc	r21, r22
    14e4:	c7 1f       	adc	r28, r23
    14e6:	d8 1f       	adc	r29, r24
    14e8:	99 0f       	add	r25, r25
    14ea:	66 1f       	adc	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	88 1f       	adc	r24, r24
    14f0:	06 94       	lsr	r0
    14f2:	a9 f7       	brne	.-22     	; 0x14de <__ftoa_engine+0xc8>
    14f4:	84 91       	lpm	r24, Z
    14f6:	10 95       	com	r17
    14f8:	17 70       	andi	r17, 0x07	; 7
    14fa:	41 f0       	breq	.+16     	; 0x150c <__ftoa_engine+0xf6>
    14fc:	d6 95       	lsr	r29
    14fe:	c7 95       	ror	r28
    1500:	57 95       	ror	r21
    1502:	47 95       	ror	r20
    1504:	f7 94       	ror	r15
    1506:	e7 94       	ror	r14
    1508:	1a 95       	dec	r17
    150a:	c1 f7       	brne	.-16     	; 0x14fc <__ftoa_engine+0xe6>
    150c:	e8 e6       	ldi	r30, 0x68	; 104
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	68 94       	set
    1512:	15 90       	lpm	r1, Z+
    1514:	15 91       	lpm	r17, Z+
    1516:	35 91       	lpm	r19, Z+
    1518:	65 91       	lpm	r22, Z+
    151a:	95 91       	lpm	r25, Z+
    151c:	05 90       	lpm	r0, Z+
    151e:	7f e2       	ldi	r23, 0x2F	; 47
    1520:	73 95       	inc	r23
    1522:	e1 18       	sub	r14, r1
    1524:	f1 0a       	sbc	r15, r17
    1526:	43 0b       	sbc	r20, r19
    1528:	56 0b       	sbc	r21, r22
    152a:	c9 0b       	sbc	r28, r25
    152c:	d0 09       	sbc	r29, r0
    152e:	c0 f7       	brcc	.-16     	; 0x1520 <__ftoa_engine+0x10a>
    1530:	e1 0c       	add	r14, r1
    1532:	f1 1e       	adc	r15, r17
    1534:	43 1f       	adc	r20, r19
    1536:	56 1f       	adc	r21, r22
    1538:	c9 1f       	adc	r28, r25
    153a:	d0 1d       	adc	r29, r0
    153c:	7e f4       	brtc	.+30     	; 0x155c <__ftoa_engine+0x146>
    153e:	70 33       	cpi	r23, 0x30	; 48
    1540:	11 f4       	brne	.+4      	; 0x1546 <__ftoa_engine+0x130>
    1542:	8a 95       	dec	r24
    1544:	e6 cf       	rjmp	.-52     	; 0x1512 <__ftoa_engine+0xfc>
    1546:	e8 94       	clt
    1548:	01 50       	subi	r16, 0x01	; 1
    154a:	30 f0       	brcs	.+12     	; 0x1558 <__ftoa_engine+0x142>
    154c:	08 0f       	add	r16, r24
    154e:	0a f4       	brpl	.+2      	; 0x1552 <__ftoa_engine+0x13c>
    1550:	00 27       	eor	r16, r16
    1552:	02 17       	cp	r16, r18
    1554:	08 f4       	brcc	.+2      	; 0x1558 <__ftoa_engine+0x142>
    1556:	20 2f       	mov	r18, r16
    1558:	23 95       	inc	r18
    155a:	02 2f       	mov	r16, r18
    155c:	7a 33       	cpi	r23, 0x3A	; 58
    155e:	28 f0       	brcs	.+10     	; 0x156a <__ftoa_engine+0x154>
    1560:	79 e3       	ldi	r23, 0x39	; 57
    1562:	7d 93       	st	X+, r23
    1564:	2a 95       	dec	r18
    1566:	e9 f7       	brne	.-6      	; 0x1562 <__ftoa_engine+0x14c>
    1568:	10 c0       	rjmp	.+32     	; 0x158a <__ftoa_engine+0x174>
    156a:	7d 93       	st	X+, r23
    156c:	2a 95       	dec	r18
    156e:	89 f6       	brne	.-94     	; 0x1512 <__ftoa_engine+0xfc>
    1570:	06 94       	lsr	r0
    1572:	97 95       	ror	r25
    1574:	67 95       	ror	r22
    1576:	37 95       	ror	r19
    1578:	17 95       	ror	r17
    157a:	17 94       	ror	r1
    157c:	e1 18       	sub	r14, r1
    157e:	f1 0a       	sbc	r15, r17
    1580:	43 0b       	sbc	r20, r19
    1582:	56 0b       	sbc	r21, r22
    1584:	c9 0b       	sbc	r28, r25
    1586:	d0 09       	sbc	r29, r0
    1588:	98 f0       	brcs	.+38     	; 0x15b0 <__ftoa_engine+0x19a>
    158a:	23 95       	inc	r18
    158c:	7e 91       	ld	r23, -X
    158e:	73 95       	inc	r23
    1590:	7a 33       	cpi	r23, 0x3A	; 58
    1592:	08 f0       	brcs	.+2      	; 0x1596 <__ftoa_engine+0x180>
    1594:	70 e3       	ldi	r23, 0x30	; 48
    1596:	7c 93       	st	X, r23
    1598:	20 13       	cpse	r18, r16
    159a:	b8 f7       	brcc	.-18     	; 0x158a <__ftoa_engine+0x174>
    159c:	7e 91       	ld	r23, -X
    159e:	70 61       	ori	r23, 0x10	; 16
    15a0:	7d 93       	st	X+, r23
    15a2:	30 f0       	brcs	.+12     	; 0x15b0 <__ftoa_engine+0x19a>
    15a4:	83 95       	inc	r24
    15a6:	71 e3       	ldi	r23, 0x31	; 49
    15a8:	7d 93       	st	X+, r23
    15aa:	70 e3       	ldi	r23, 0x30	; 48
    15ac:	2a 95       	dec	r18
    15ae:	e1 f7       	brne	.-8      	; 0x15a8 <__ftoa_engine+0x192>
    15b0:	11 24       	eor	r1, r1
    15b2:	ef 90       	pop	r14
    15b4:	ff 90       	pop	r15
    15b6:	0f 91       	pop	r16
    15b8:	1f 91       	pop	r17
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	99 27       	eor	r25, r25
    15c0:	87 fd       	sbrc	r24, 7
    15c2:	90 95       	com	r25
    15c4:	08 95       	ret

000015c6 <strrev>:
    15c6:	dc 01       	movw	r26, r24
    15c8:	fc 01       	movw	r30, r24
    15ca:	67 2f       	mov	r22, r23
    15cc:	71 91       	ld	r23, Z+
    15ce:	77 23       	and	r23, r23
    15d0:	e1 f7       	brne	.-8      	; 0x15ca <strrev+0x4>
    15d2:	32 97       	sbiw	r30, 0x02	; 2
    15d4:	04 c0       	rjmp	.+8      	; 0x15de <strrev+0x18>
    15d6:	7c 91       	ld	r23, X
    15d8:	6d 93       	st	X+, r22
    15da:	70 83       	st	Z, r23
    15dc:	62 91       	ld	r22, -Z
    15de:	ae 17       	cp	r26, r30
    15e0:	bf 07       	cpc	r27, r31
    15e2:	c8 f3       	brcs	.-14     	; 0x15d6 <strrev+0x10>
    15e4:	08 95       	ret

000015e6 <__prologue_saves__>:
    15e6:	2f 92       	push	r2
    15e8:	3f 92       	push	r3
    15ea:	4f 92       	push	r4
    15ec:	5f 92       	push	r5
    15ee:	6f 92       	push	r6
    15f0:	7f 92       	push	r7
    15f2:	8f 92       	push	r8
    15f4:	9f 92       	push	r9
    15f6:	af 92       	push	r10
    15f8:	bf 92       	push	r11
    15fa:	cf 92       	push	r12
    15fc:	df 92       	push	r13
    15fe:	ef 92       	push	r14
    1600:	ff 92       	push	r15
    1602:	0f 93       	push	r16
    1604:	1f 93       	push	r17
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	ca 1b       	sub	r28, r26
    1610:	db 0b       	sbc	r29, r27
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	09 94       	ijmp

0000161e <__epilogue_restores__>:
    161e:	2a 88       	ldd	r2, Y+18	; 0x12
    1620:	39 88       	ldd	r3, Y+17	; 0x11
    1622:	48 88       	ldd	r4, Y+16	; 0x10
    1624:	5f 84       	ldd	r5, Y+15	; 0x0f
    1626:	6e 84       	ldd	r6, Y+14	; 0x0e
    1628:	7d 84       	ldd	r7, Y+13	; 0x0d
    162a:	8c 84       	ldd	r8, Y+12	; 0x0c
    162c:	9b 84       	ldd	r9, Y+11	; 0x0b
    162e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1630:	b9 84       	ldd	r11, Y+9	; 0x09
    1632:	c8 84       	ldd	r12, Y+8	; 0x08
    1634:	df 80       	ldd	r13, Y+7	; 0x07
    1636:	ee 80       	ldd	r14, Y+6	; 0x06
    1638:	fd 80       	ldd	r15, Y+5	; 0x05
    163a:	0c 81       	ldd	r16, Y+4	; 0x04
    163c:	1b 81       	ldd	r17, Y+3	; 0x03
    163e:	aa 81       	ldd	r26, Y+2	; 0x02
    1640:	b9 81       	ldd	r27, Y+1	; 0x01
    1642:	ce 0f       	add	r28, r30
    1644:	d1 1d       	adc	r29, r1
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	ed 01       	movw	r28, r26
    1652:	08 95       	ret

00001654 <_exit>:
    1654:	f8 94       	cli

00001656 <__stop_program>:
    1656:	ff cf       	rjmp	.-2      	; 0x1656 <__stop_program>
