
GreenhouseSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000d8e  00000e22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  0080011e  0080011e  00000e40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002131  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dcb  00000000  00000000  000031e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010da  00000000  00000000  00003fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  00005090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000869  00000000  00000000  00005574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000132a  00000000  00000000  00005ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00007107  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 16 04 	jmp	0x82c	; 0x82c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_18>
  4c:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 36       	cpi	r26, 0x6D	; 109
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <main>
  9e:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register -> DDRx
    reg_name++;                     // Change pointer to Data Register -> PORTx  (DDR a PORT jsou v pamìti hned u sebe)
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <toggle_e+0x8>
  fc:	00 00       	nop
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	85 b9       	out	0x05, r24	; 5
 104:	08 95       	ret

00000106 <lcd_write>:
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
 10a:	66 23       	and	r22, r22
 10c:	21 f0       	breq	.+8      	; 0x116 <lcd_write+0x10>
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	81 60       	ori	r24, 0x01	; 1
 112:	85 b9       	out	0x05, r24	; 5
 114:	03 c0       	rjmp	.+6      	; 0x11c <lcd_write+0x16>
 116:	85 b1       	in	r24, 0x05	; 5
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	8a b1       	in	r24, 0x0a	; 10
 11e:	80 61       	ori	r24, 0x10	; 16
 120:	8a b9       	out	0x0a, r24	; 10
 122:	8a b1       	in	r24, 0x0a	; 10
 124:	80 62       	ori	r24, 0x20	; 32
 126:	8a b9       	out	0x0a, r24	; 10
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	8a b9       	out	0x0a, r24	; 10
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	80 68       	ori	r24, 0x80	; 128
 132:	8a b9       	out	0x0a, r24	; 10
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 77       	andi	r24, 0x7F	; 127
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7b       	andi	r24, 0xBF	; 191
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7d       	andi	r24, 0xDF	; 223
 144:	8b b9       	out	0x0b, r24	; 11
 146:	8b b1       	in	r24, 0x0b	; 11
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	8b b9       	out	0x0b, r24	; 11
 14c:	cc 23       	and	r28, r28
 14e:	1c f4       	brge	.+6      	; 0x156 <lcd_write+0x50>
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	80 68       	ori	r24, 0x80	; 128
 154:	8b b9       	out	0x0b, r24	; 11
 156:	c6 ff       	sbrs	r28, 6
 158:	03 c0       	rjmp	.+6      	; 0x160 <lcd_write+0x5a>
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	c5 ff       	sbrs	r28, 5
 162:	03 c0       	rjmp	.+6      	; 0x16a <lcd_write+0x64>
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	80 62       	ori	r24, 0x20	; 32
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	c4 ff       	sbrs	r28, 4
 16c:	03 c0       	rjmp	.+6      	; 0x174 <lcd_write+0x6e>
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	80 61       	ori	r24, 0x10	; 16
 172:	8b b9       	out	0x0b, r24	; 11
 174:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	8f 77       	andi	r24, 0x7F	; 127
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	8f 7b       	andi	r24, 0xBF	; 191
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8f 7d       	andi	r24, 0xDF	; 223
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	c3 ff       	sbrs	r28, 3
 192:	03 c0       	rjmp	.+6      	; 0x19a <lcd_write+0x94>
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	80 68       	ori	r24, 0x80	; 128
 198:	8b b9       	out	0x0b, r24	; 11
 19a:	c2 ff       	sbrs	r28, 2
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <lcd_write+0x9e>
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	c1 ff       	sbrs	r28, 1
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <lcd_write+0xa8>
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	80 62       	ori	r24, 0x20	; 32
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	c0 ff       	sbrs	r28, 0
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_write+0xb2>
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	80 61       	ori	r24, 0x10	; 16
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	8b b9       	out	0x0b, r24	; 11
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	87 eb       	ldi	r24, 0xB7	; 183
 1d6:	9b e0       	ldi	r25, 0x0B	; 11
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_write+0xd2>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_write+0xd8>
 1de:	00 00       	nop
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_command>:
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 1ea:	08 95       	ret

000001ec <lcd_gotoxy>:
 1ec:	61 11       	cpse	r22, r1
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <lcd_gotoxy+0xc>
 1f0:	80 58       	subi	r24, 0x80	; 128
 1f2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 1f6:	08 95       	ret
 1f8:	80 54       	subi	r24, 0x40	; 64
 1fa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 1fe:	08 95       	ret

00000200 <lcd_clrscr>:
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 206:	08 95       	ret

00000208 <lcd_putc>:
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 20e:	08 95       	ret

00000210 <lcd_puts>:
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	fc 01       	movw	r30, r24
 216:	03 c0       	rjmp	.+6      	; 0x21e <lcd_puts+0xe>
 218:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
 21c:	fe 01       	movw	r30, r28
 21e:	ef 01       	movw	r28, r30
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	80 81       	ld	r24, Z
 224:	81 11       	cpse	r24, r1
 226:	f8 cf       	rjmp	.-16     	; 0x218 <lcd_puts+0x8>
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 22e:	cf 93       	push	r28
 230:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 232:	84 b1       	in	r24, 0x04	; 4
 234:	81 60       	ori	r24, 0x01	; 1
 236:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 238:	8a b1       	in	r24, 0x0a	; 10
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 23e:	84 b1       	in	r24, 0x04	; 4
 240:	82 60       	ori	r24, 0x02	; 2
 242:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 244:	8a b1       	in	r24, 0x0a	; 10
 246:	80 61       	ori	r24, 0x10	; 16
 248:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 24a:	8a b1       	in	r24, 0x0a	; 10
 24c:	80 62       	ori	r24, 0x20	; 32
 24e:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 250:	8a b1       	in	r24, 0x0a	; 10
 252:	80 64       	ori	r24, 0x40	; 64
 254:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 256:	8a b1       	in	r24, 0x0a	; 10
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	99 ef       	ldi	r25, 0xF9	; 249
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_init+0x32>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_init+0x38>
 266:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 268:	8b b1       	in	r24, 0x0b	; 11
 26a:	80 62       	ori	r24, 0x20	; 32
 26c:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	80 61       	ori	r24, 0x10	; 16
 272:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 274:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 278:	8f e1       	ldi	r24, 0x1F	; 31
 27a:	9e e4       	ldi	r25, 0x4E	; 78
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_init+0x4e>
 280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_init+0x54>
 282:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 284:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_init+0x5e>
 290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_init+0x64>
 292:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 294:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x6e>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <lcd_init+0x74>
 2a2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2a4:	8b b1       	in	r24, 0x0b	; 11
 2a6:	8f 7e       	andi	r24, 0xEF	; 239
 2a8:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2aa:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_init+0x84>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_init+0x8a>
 2b8:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2ba:	88 e2       	ldi	r24, 0x28	; 40
 2bc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2c0:	88 e0       	ldi	r24, 0x08	; 8
 2c2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2c6:	0e 94 00 01 	call	0x200	; 0x200 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2d0:	8c 2f       	mov	r24, r28
 2d2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
}/* lcd_init */
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <lcd_updateMenu>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	62 97       	sbiw	r28, 0x12	; 18
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
 2ee:	82 e1       	ldi	r24, 0x12	; 18
 2f0:	eb e0       	ldi	r30, 0x0B	; 11
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	de 01       	movw	r26, r28
 2f6:	11 96       	adiw	r26, 0x01	; 1
 2f8:	01 90       	ld	r0, Z+
 2fa:	0d 92       	st	X+, r0
 2fc:	8a 95       	dec	r24
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <lcd_updateMenu+0x1e>
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_gotoxy>
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
 310:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <humidity>
 314:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <humidity+0x1>
 318:	ad ec       	ldi	r26, 0xCD	; 205
 31a:	bc ec       	ldi	r27, 0xCC	; 204
 31c:	0e 94 81 06 	call	0xd02	; 0xd02 <__umulhisi3>
 320:	4a e0       	ldi	r20, 0x0A	; 10
 322:	be 01       	movw	r22, r28
 324:	6f 5f       	subi	r22, 0xFF	; 255
 326:	7f 4f       	sbci	r23, 0xFF	; 255
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	96 95       	lsr	r25
 32e:	87 95       	ror	r24
 330:	96 95       	lsr	r25
 332:	87 95       	ror	r24
 334:	0e 94 90 06 	call	0xd20	; 0xd20 <__itoa_ncheck>
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
 340:	8c e2       	ldi	r24, 0x2C	; 44
 342:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
 346:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <humidity>
 34a:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <humidity+0x1>
 34e:	9f 01       	movw	r18, r30
 350:	ad ec       	ldi	r26, 0xCD	; 205
 352:	bc ec       	ldi	r27, 0xCC	; 204
 354:	0e 94 81 06 	call	0xd02	; 0xd02 <__umulhisi3>
 358:	96 95       	lsr	r25
 35a:	87 95       	ror	r24
 35c:	96 95       	lsr	r25
 35e:	87 95       	ror	r24
 360:	96 95       	lsr	r25
 362:	87 95       	ror	r24
 364:	9c 01       	movw	r18, r24
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	82 0f       	add	r24, r18
 378:	93 1f       	adc	r25, r19
 37a:	4a e0       	ldi	r20, 0x0A	; 10
 37c:	be 01       	movw	r22, r28
 37e:	6f 5f       	subi	r22, 0xFF	; 255
 380:	7f 4f       	sbci	r23, 0xFF	; 255
 382:	9f 01       	movw	r18, r30
 384:	28 1b       	sub	r18, r24
 386:	39 0b       	sbc	r19, r25
 388:	c9 01       	movw	r24, r18
 38a:	0e 94 90 06 	call	0xd20	; 0xd20 <__itoa_ncheck>
 38e:	ce 01       	movw	r24, r28
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	89 e0       	ldi	r24, 0x09	; 9
 39a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_gotoxy>
 39e:	85 e0       	ldi	r24, 0x05	; 5
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
 3a6:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <temperature>
 3aa:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <temperature+0x1>
 3ae:	ad ec       	ldi	r26, 0xCD	; 205
 3b0:	bc ec       	ldi	r27, 0xCC	; 204
 3b2:	0e 94 81 06 	call	0xd02	; 0xd02 <__umulhisi3>
 3b6:	4a e0       	ldi	r20, 0x0A	; 10
 3b8:	be 01       	movw	r22, r28
 3ba:	6f 5f       	subi	r22, 0xFF	; 255
 3bc:	7f 4f       	sbci	r23, 0xFF	; 255
 3be:	96 95       	lsr	r25
 3c0:	87 95       	ror	r24
 3c2:	96 95       	lsr	r25
 3c4:	87 95       	ror	r24
 3c6:	96 95       	lsr	r25
 3c8:	87 95       	ror	r24
 3ca:	0e 94 90 06 	call	0xd20	; 0xd20 <__itoa_ncheck>
 3ce:	ce 01       	movw	r24, r28
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
 3d6:	8c e2       	ldi	r24, 0x2C	; 44
 3d8:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
 3dc:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <temperature>
 3e0:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <temperature+0x1>
 3e4:	9f 01       	movw	r18, r30
 3e6:	ad ec       	ldi	r26, 0xCD	; 205
 3e8:	bc ec       	ldi	r27, 0xCC	; 204
 3ea:	0e 94 81 06 	call	0xd02	; 0xd02 <__umulhisi3>
 3ee:	96 95       	lsr	r25
 3f0:	87 95       	ror	r24
 3f2:	96 95       	lsr	r25
 3f4:	87 95       	ror	r24
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	9c 01       	movw	r18, r24
 3fc:	22 0f       	add	r18, r18
 3fe:	33 1f       	adc	r19, r19
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	82 0f       	add	r24, r18
 40e:	93 1f       	adc	r25, r19
 410:	4a e0       	ldi	r20, 0x0A	; 10
 412:	be 01       	movw	r22, r28
 414:	6f 5f       	subi	r22, 0xFF	; 255
 416:	7f 4f       	sbci	r23, 0xFF	; 255
 418:	9f 01       	movw	r18, r30
 41a:	28 1b       	sub	r18, r24
 41c:	39 0b       	sbc	r19, r25
 41e:	c9 01       	movw	r24, r18
 420:	0e 94 90 06 	call	0xd20	; 0xd20 <__itoa_ncheck>
 424:	ce 01       	movw	r24, r28
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_gotoxy>
 434:	88 e0       	ldi	r24, 0x08	; 8
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
 43c:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <luminescence>
 440:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <luminescence+0x1>
 444:	ad ec       	ldi	r26, 0xCD	; 205
 446:	bc ec       	ldi	r27, 0xCC	; 204
 448:	0e 94 81 06 	call	0xd02	; 0xd02 <__umulhisi3>
 44c:	4a e0       	ldi	r20, 0x0A	; 10
 44e:	be 01       	movw	r22, r28
 450:	6f 5f       	subi	r22, 0xFF	; 255
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	96 95       	lsr	r25
 456:	87 95       	ror	r24
 458:	96 95       	lsr	r25
 45a:	87 95       	ror	r24
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	0e 94 90 06 	call	0xd20	; 0xd20 <__itoa_ncheck>
 464:	ce 01       	movw	r24, r28
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
 46c:	8c e2       	ldi	r24, 0x2C	; 44
 46e:	0e 94 04 01 	call	0x208	; 0x208 <lcd_putc>
 472:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <luminescence>
 476:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <luminescence+0x1>
 47a:	9f 01       	movw	r18, r30
 47c:	ad ec       	ldi	r26, 0xCD	; 205
 47e:	bc ec       	ldi	r27, 0xCC	; 204
 480:	0e 94 81 06 	call	0xd02	; 0xd02 <__umulhisi3>
 484:	96 95       	lsr	r25
 486:	87 95       	ror	r24
 488:	96 95       	lsr	r25
 48a:	87 95       	ror	r24
 48c:	96 95       	lsr	r25
 48e:	87 95       	ror	r24
 490:	9c 01       	movw	r18, r24
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	82 0f       	add	r24, r18
 4a4:	93 1f       	adc	r25, r19
 4a6:	4a e0       	ldi	r20, 0x0A	; 10
 4a8:	be 01       	movw	r22, r28
 4aa:	6f 5f       	subi	r22, 0xFF	; 255
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255
 4ae:	9f 01       	movw	r18, r30
 4b0:	28 1b       	sub	r18, r24
 4b2:	39 0b       	sbc	r19, r25
 4b4:	c9 01       	movw	r24, r18
 4b6:	0e 94 90 06 	call	0xd20	; 0xd20 <__itoa_ncheck>
 4ba:	ce 01       	movw	r24, r28
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
 4c2:	62 96       	adiw	r28, 0x12	; 18
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <initLCD>:
 4d4:	8c e0       	ldi	r24, 0x0C	; 12
 4d6:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_init>
 4da:	80 e4       	ldi	r24, 0x40	; 64
 4dc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 4e0:	80 e8       	ldi	r24, 0x80	; 128
 4e2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_command>
 4e6:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_updateMenu>
 4ea:	08 95       	ret

000004ec <initLEDs>:
 4ec:	64 e0       	ldi	r22, 0x04	; 4
 4ee:	84 e2       	ldi	r24, 0x24	; 36
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 4f6:	62 e0       	ldi	r22, 0x02	; 2
 4f8:	87 e2       	ldi	r24, 0x27	; 39
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 500:	63 e0       	ldi	r22, 0x03	; 3
 502:	87 e2       	ldi	r24, 0x27	; 39
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 50a:	64 e0       	ldi	r22, 0x04	; 4
 50c:	85 e2       	ldi	r24, 0x25	; 37
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 514:	62 e0       	ldi	r22, 0x02	; 2
 516:	88 e2       	ldi	r24, 0x28	; 40
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 51e:	63 e0       	ldi	r22, 0x03	; 3
 520:	88 e2       	ldi	r24, 0x28	; 40
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 528:	08 95       	ret

0000052a <initSoilSensor>:
 52a:	ec e7       	ldi	r30, 0x7C	; 124
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	80 64       	ori	r24, 0x40	; 64
 532:	80 83       	st	Z, r24
 534:	80 81       	ld	r24, Z
 536:	8f 77       	andi	r24, 0x7F	; 127
 538:	80 83       	st	Z, r24
 53a:	80 81       	ld	r24, Z
 53c:	80 7f       	andi	r24, 0xF0	; 240
 53e:	80 83       	st	Z, r24
 540:	ea e7       	ldi	r30, 0x7A	; 122
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	80 68       	ori	r24, 0x80	; 128
 548:	80 83       	st	Z, r24
 54a:	80 81       	ld	r24, Z
 54c:	88 60       	ori	r24, 0x08	; 8
 54e:	80 83       	st	Z, r24
 550:	80 81       	ld	r24, Z
 552:	87 60       	ori	r24, 0x07	; 7
 554:	80 83       	st	Z, r24
 556:	08 95       	ret

00000558 <initialSetup>:
 558:	0e 94 91 04 	call	0x922	; 0x922 <twi_init>
 55c:	87 e6       	ldi	r24, 0x67	; 103
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 37 05 	call	0xa6e	; 0xa6e <uart_init>
 564:	0e 94 76 02 	call	0x4ec	; 0x4ec <initLEDs>
 568:	0e 94 95 02 	call	0x52a	; 0x52a <initSoilSensor>
 56c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <initLCD>
 570:	78 94       	sei
 572:	08 95       	ret

00000574 <updateLED>:
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	86 17       	cp	r24, r22
 578:	97 07       	cpc	r25, r23
 57a:	58 f4       	brcc	.+22     	; 0x592 <updateLED+0x1e>
 57c:	28 b1       	in	r18, 0x08	; 8
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <updateLED+0x14>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	4a 95       	dec	r20
 58a:	e2 f7       	brpl	.-8      	; 0x584 <updateLED+0x10>
 58c:	82 2b       	or	r24, r18
 58e:	88 b9       	out	0x08, r24	; 8
 590:	08 95       	ret
 592:	28 b1       	in	r18, 0x08	; 8
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 c0       	rjmp	.+4      	; 0x59e <updateLED+0x2a>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	4a 95       	dec	r20
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <updateLED+0x26>
 5a2:	80 95       	com	r24
 5a4:	82 23       	and	r24, r18
 5a6:	88 b9       	out	0x08, r24	; 8
 5a8:	08 95       	ret

000005aa <servoRight>:
	_delay_ms(19);
};

//close pelmet
void servoRight(){
	GPIO_write_high(&PORTB, servo);
 5aa:	62 e0       	ldi	r22, 0x02	; 2
 5ac:	85 e2       	ldi	r24, 0x25	; 37
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b4:	8f e7       	ldi	r24, 0x7F	; 127
 5b6:	95 e2       	ldi	r25, 0x25	; 37
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <servoRight+0xe>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <servoRight+0x14>
 5be:	00 00       	nop
	_delay_us(2400);
	GPIO_write_low(&PORTB, servo);
 5c0:	62 e0       	ldi	r22, 0x02	; 2
 5c2:	85 e2       	ldi	r24, 0x25	; 37
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 5ca:	8f e5       	ldi	r24, 0x5F	; 95
 5cc:	99 e0       	ldi	r25, 0x09	; 9
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <servoRight+0x24>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <servoRight+0x2a>
 5d4:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d6:	9f e7       	ldi	r25, 0x7F	; 127
 5d8:	24 ed       	ldi	r18, 0xD4	; 212
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	91 50       	subi	r25, 0x01	; 1
 5de:	20 40       	sbci	r18, 0x00	; 0
 5e0:	80 40       	sbci	r24, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <servoRight+0x32>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <servoRight+0x3c>
 5e6:	00 00       	nop
 5e8:	08 95       	ret

000005ea <main>:
 * Returns:  none
 **********************************************************************/

int main(void)
{
	initialSetup();
 5ea:	0e 94 ac 02 	call	0x558	; 0x558 <initialSetup>

	char uart_string[] = "00000000000000000";      // String for converting numbers by itoa()
	
	uint16_t previous_humidity = -10000;
	uint16_t previous_temperature = -10000;
	uint16_t previous_luminescence = -10000;
 5ee:	00 ef       	ldi	r16, 0xF0	; 240
 5f0:	18 ed       	ldi	r17, 0xD8	; 216
	initialSetup();

	char uart_string[] = "00000000000000000";      // String for converting numbers by itoa()
	
	uint16_t previous_humidity = -10000;
	uint16_t previous_temperature = -10000;
 5f2:	0f 2e       	mov	r0, r31
 5f4:	f0 ef       	ldi	r31, 0xF0	; 240
 5f6:	cf 2e       	mov	r12, r31
 5f8:	f8 ed       	ldi	r31, 0xD8	; 216
 5fa:	df 2e       	mov	r13, r31
 5fc:	f0 2d       	mov	r31, r0
{
	initialSetup();

	char uart_string[] = "00000000000000000";      // String for converting numbers by itoa()
	
	uint16_t previous_humidity = -10000;
 5fe:	0f 2e       	mov	r0, r31
 600:	f0 ef       	ldi	r31, 0xF0	; 240
 602:	ef 2e       	mov	r14, r31
 604:	f8 ed       	ldi	r31, 0xD8	; 216
 606:	ff 2e       	mov	r15, r31
 608:	f0 2d       	mov	r31, r0
	uint16_t previous_temperature = -10000;
	uint16_t previous_luminescence = -10000;
    // Infinite loop
    while (1)
    {
		if (humid_flag){
 60a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <humid_flag>
 60e:	88 23       	and	r24, r24
 610:	91 f0       	breq	.+36     	; 0x636 <main+0x4c>
			if (humidity != previous_humidity){
 612:	c0 91 26 01 	lds	r28, 0x0126	; 0x800126 <humidity>
 616:	d0 91 27 01 	lds	r29, 0x0127	; 0x800127 <humidity+0x1>
 61a:	ec 16       	cp	r14, r28
 61c:	fd 06       	cpc	r15, r29
 61e:	49 f0       	breq	.+18     	; 0x632 <main+0x48>
				previous_humidity = humidity;
				updateLED(luminescence, 400, PUMP_LED);
 620:	42 e0       	ldi	r20, 0x02	; 2
 622:	60 e9       	ldi	r22, 0x90	; 144
 624:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <luminescence>
 628:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <luminescence+0x1>
 62c:	0e 94 ba 02 	call	0x574	; 0x574 <updateLED>
    // Infinite loop
    while (1)
    {
		if (humid_flag){
			if (humidity != previous_humidity){
				previous_humidity = humidity;
 630:	7e 01       	movw	r14, r28
				updateLED(luminescence, 400, PUMP_LED);
			}
			humid_flag = 0;
 632:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <humid_flag>
		}
		if (temp_flag){
 636:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_flag>
 63a:	88 23       	and	r24, r24
 63c:	91 f0       	breq	.+36     	; 0x662 <main+0x78>
			if (temperature != previous_temperature){
 63e:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <temperature>
 642:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <temperature+0x1>
 646:	cc 16       	cp	r12, r28
 648:	dd 06       	cpc	r13, r29
 64a:	49 f0       	breq	.+18     	; 0x65e <main+0x74>
				previous_temperature = temperature;
				updateLED(luminescence, 200, TEMPERATURE_LED);
 64c:	43 e0       	ldi	r20, 0x03	; 3
 64e:	68 ec       	ldi	r22, 0xC8	; 200
 650:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <luminescence>
 654:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <luminescence+0x1>
 658:	0e 94 ba 02 	call	0x574	; 0x574 <updateLED>
			}
			humid_flag = 0;
		}
		if (temp_flag){
			if (temperature != previous_temperature){
				previous_temperature = temperature;
 65c:	6e 01       	movw	r12, r28
				updateLED(luminescence, 200, TEMPERATURE_LED);
			}
			temp_flag = 0;
 65e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <temp_flag>
		}
		if (luminescence_flag){
 662:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <luminescence_flag>
 666:	88 23       	and	r24, r24
 668:	81 f2       	breq	.-96     	; 0x60a <main+0x20>
			if (luminescence != previous_luminescence){
 66a:	c0 91 22 01 	lds	r28, 0x0122	; 0x800122 <luminescence>
 66e:	d0 91 23 01 	lds	r29, 0x0123	; 0x800123 <luminescence+0x1>
 672:	0c 17       	cp	r16, r28
 674:	1d 07       	cpc	r17, r29
 676:	89 f0       	breq	.+34     	; 0x69a <main+0xb0>
				previous_luminescence = luminescence;
				if (luminescence < 300){
 678:	cc 32       	cpi	r28, 0x2C	; 44
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	d8 07       	cpc	r29, r24
 67e:	30 f4       	brcc	.+12     	; 0x68c <main+0xa2>
					updateLED(luminescence, 300, LIGHT_LED);	
 680:	44 e0       	ldi	r20, 0x04	; 4
 682:	6c e2       	ldi	r22, 0x2C	; 44
 684:	ce 01       	movw	r24, r28
 686:	0e 94 ba 02 	call	0x574	; 0x574 <updateLED>
 68a:	08 c0       	rjmp	.+16     	; 0x69c <main+0xb2>
				}
				else if (luminescence > 800){
 68c:	c1 32       	cpi	r28, 0x21	; 33
 68e:	83 e0       	ldi	r24, 0x03	; 3
 690:	d8 07       	cpc	r29, r24
 692:	20 f0       	brcs	.+8      	; 0x69c <main+0xb2>
					servoRight();
 694:	0e 94 d5 02 	call	0x5aa	; 0x5aa <servoRight>
 698:	01 c0       	rjmp	.+2      	; 0x69c <main+0xb2>
 69a:	e8 01       	movw	r28, r16
				}
			}
			luminescence_flag = 0;
 69c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <luminescence_flag>
 6a0:	8e 01       	movw	r16, r28
 6a2:	b3 cf       	rjmp	.-154    	; 0x60a <main+0x20>

000006a4 <read_temperature>:
	_delay_us(600);
	_delay_ms(17);
};

uint8_t read_temperature()
{
 6a4:	ff 92       	push	r15
 6a6:	0f 93       	push	r16
 6a8:	1f 93       	push	r17
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
	temp_flag = 0;
 6ae:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <temp_flag>
	
	uint8_t checksum = 0;
		
	char us1 [] = "00000000000000";
	
	uint8_t res = twi_start((addr << 1) + TWI_WRITE);
 6b2:	88 eb       	ldi	r24, 0xB8	; 184
 6b4:	0e 94 a0 04 	call	0x940	; 0x940 <twi_start>
	
	if (res == 1){
 6b8:	81 30       	cpi	r24, 0x01	; 1
 6ba:	21 f4       	brne	.+8      	; 0x6c4 <read_temperature+0x20>
		twi_stop();
 6bc:	0e 94 db 04 	call	0x9b6	; 0x9b6 <twi_stop>
		return 0;
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	3d c0       	rjmp	.+122    	; 0x73e <read_temperature+0x9a>
	}
	
	twi_write(0x00);
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	0e 94 bd 04 	call	0x97a	; 0x97a <twi_write>
	
	twi_start((addr << 1) + TWI_READ);
 6ca:	89 eb       	ldi	r24, 0xB9	; 185
 6cc:	0e 94 a0 04 	call	0x940	; 0x940 <twi_start>
	
	//tohle zahazuju
	humid_integral = twi_read_ack();    // get fraction part 
 6d0:	0e 94 c7 04 	call	0x98e	; 0x98e <twi_read_ack>
 6d4:	f8 2e       	mov	r15, r24
	humid_scale = twi_read_ack();			// get scale part
 6d6:	0e 94 c7 04 	call	0x98e	; 0x98e <twi_read_ack>
 6da:	c8 2f       	mov	r28, r24
	
	temperature_integral = twi_read_ack();    // get fraction part
 6dc:	0e 94 c7 04 	call	0x98e	; 0x98e <twi_read_ack>
 6e0:	08 2f       	mov	r16, r24
	temperature_scale = twi_read_ack();			// get scale part
 6e2:	0e 94 c7 04 	call	0x98e	; 0x98e <twi_read_ack>
 6e6:	18 2f       	mov	r17, r24

	checksum = twi_read_nack();			// get scale part
 6e8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <twi_read_nack>
 6ec:	d8 2f       	mov	r29, r24
	twi_stop();
 6ee:	0e 94 db 04 	call	0x9b6	; 0x9b6 <twi_stop>
	
	if (checksum == (humid_integral + humid_scale + temperature_integral + temperature_scale)) {
 6f2:	8d 2f       	mov	r24, r29
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	2c 2f       	mov	r18, r28
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	2f 0d       	add	r18, r15
 6fc:	31 1d       	adc	r19, r1
 6fe:	20 0f       	add	r18, r16
 700:	31 1d       	adc	r19, r1
 702:	21 0f       	add	r18, r17
 704:	31 1d       	adc	r19, r1
 706:	82 17       	cp	r24, r18
 708:	93 07       	cpc	r25, r19
 70a:	b9 f4       	brne	.+46     	; 0x73a <read_temperature+0x96>
		temp_flag = 1;	
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <temp_flag>
		temperature = (uint16_t)temperature_integral * 10 + (uint16_t)temperature_scale;	// 25.5 °C -> 255
 712:	80 2f       	mov	r24, r16
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	9c 01       	movw	r18, r24
 718:	22 0f       	add	r18, r18
 71a:	33 1f       	adc	r19, r19
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	82 0f       	add	r24, r18
 72a:	93 1f       	adc	r25, r19
 72c:	81 0f       	add	r24, r17
 72e:	91 1d       	adc	r25, r1
 730:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <temperature+0x1>
 734:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <temperature>
 738:	02 c0       	rjmp	.+4      	; 0x73e <read_temperature+0x9a>
		//humidity = (uint16_t)humid_integral * 10 + (uint16_t)humid_scale;
	}
	else {
		temp_flag = 0; // spis nastavit error flag
 73a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <temp_flag>
	}
	
	
}
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	1f 91       	pop	r17
 744:	0f 91       	pop	r16
 746:	ff 90       	pop	r15
 748:	08 95       	ret

0000074a <get_lux>:
/************************************************************************
 * Function: getCorrect lux value from data							*
 * Purpose:  data needs to be shifted, last bit is 2^-1 (+5). Value is 10 times higher.
/************************************************************************/
uint16_t get_lux(uint16_t data){
	if (data & 1){
 74a:	80 ff       	sbrs	r24, 0
 74c:	1d c0       	rjmp	.+58     	; 0x788 <get_lux+0x3e>
		return (((data >> 1) * 10) + 5) / 1.2;
 74e:	96 95       	lsr	r25
 750:	87 95       	ror	r24
 752:	bc 01       	movw	r22, r24
 754:	66 0f       	add	r22, r22
 756:	77 1f       	adc	r23, r23
 758:	88 0f       	add	r24, r24
 75a:	99 1f       	adc	r25, r25
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	88 0f       	add	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	68 0f       	add	r22, r24
 766:	79 1f       	adc	r23, r25
 768:	6b 5f       	subi	r22, 0xFB	; 251
 76a:	7f 4f       	sbci	r23, 0xFF	; 255
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__floatunsisf>
 774:	2a e9       	ldi	r18, 0x9A	; 154
 776:	39 e9       	ldi	r19, 0x99	; 153
 778:	49 e9       	ldi	r20, 0x99	; 153
 77a:	5f e3       	ldi	r21, 0x3F	; 63
 77c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__divsf3>
 780:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fixunssfsi>
 784:	cb 01       	movw	r24, r22
 786:	08 95       	ret
	} else {
		return ((data >> 1) * 10) / 1.2; 	
 788:	96 95       	lsr	r25
 78a:	87 95       	ror	r24
 78c:	bc 01       	movw	r22, r24
 78e:	66 0f       	add	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	88 0f       	add	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	68 0f       	add	r22, r24
 7a0:	79 1f       	adc	r23, r25
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__floatunsisf>
 7aa:	2a e9       	ldi	r18, 0x9A	; 154
 7ac:	39 e9       	ldi	r19, 0x99	; 153
 7ae:	49 e9       	ldi	r20, 0x99	; 153
 7b0:	5f e3       	ldi	r21, 0x3F	; 63
 7b2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__divsf3>
 7b6:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fixunssfsi>
 7ba:	cb 01       	movw	r24, r22
	}
}
 7bc:	08 95       	ret

000007be <read_luminescence>:

// read data from BH1750 light sensor
uint8_t read_luminescence(){	//manual str.12
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
	
	luminescence_flag = 0;
 7c2:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <luminescence_flag>
	uint8_t addr = 0x23;			// ADDR ? 0.3VCC -> L
	uint16_t data = -1;
	uint8_t result = -1;

	// FSM
	switch (state)
 7c6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 7ca:	88 23       	and	r24, r24
 7cc:	19 f0       	breq	.+6      	; 0x7d4 <read_luminescence+0x16>
 7ce:	81 30       	cpi	r24, 0x01	; 1
 7d0:	69 f0       	breq	.+26     	; 0x7ec <read_luminescence+0x2e>
 7d2:	27 c0       	rjmp	.+78     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	{
		case STATE_WRITE:
			result = twi_start((addr<<1) + TWI_WRITE);
 7d4:	86 e4       	ldi	r24, 0x46	; 70
 7d6:	0e 94 a0 04 	call	0x940	; 0x940 <twi_start>
			twi_write(0b00010001);
 7da:	81 e1       	ldi	r24, 0x11	; 17
 7dc:	0e 94 bd 04 	call	0x97a	; 0x97a <twi_write>
			twi_stop();
 7e0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <twi_stop>
			state = STATE_READ;
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
		break;
 7ea:	1d c0       	rjmp	.+58     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
		case STATE_READ:
			twi_start((addr<<1) + TWI_READ);
 7ec:	87 e4       	ldi	r24, 0x47	; 71
 7ee:	0e 94 a0 04 	call	0x940	; 0x940 <twi_start>
			data = twi_read_ack() >> 8;
 7f2:	0e 94 c7 04 	call	0x98e	; 0x98e <twi_read_ack>
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	c8 2f       	mov	r28, r24
 7fa:	d8 2f       	mov	r29, r24
			data += twi_read_nack();
 7fc:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <twi_read_nack>
 800:	c8 0f       	add	r28, r24
 802:	d1 1d       	adc	r29, r1
			twi_stop();
 804:	0e 94 db 04 	call	0x9b6	; 0x9b6 <twi_stop>
			
			luminescence = get_lux(data);
 808:	ce 01       	movw	r24, r28
 80a:	0e 94 a5 03 	call	0x74a	; 0x74a <get_lux>
 80e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <luminescence+0x1>
 812:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <luminescence>
			luminescence_flag = 1;
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <luminescence_flag>
			
			state = STATE_WRITE;
 81c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
		break;
 820:	02 c0       	rjmp	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
		default:
			//uart_puts("T1 reading error"); // nastavit error flag?
			state = STATE_WRITE;
 822:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
		break;
	}
}
 826:	df 91       	pop	r29
 828:	cf 91       	pop	r28
 82a:	08 95       	ret

0000082c <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Service routine for slow actions. Every second, Humidity and temperature is being
 *           read from DHT12 and luminescence from BH1750.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 82c:	1f 92       	push	r1
 82e:	0f 92       	push	r0
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	0f 92       	push	r0
 834:	11 24       	eor	r1, r1
 836:	2f 93       	push	r18
 838:	3f 93       	push	r19
 83a:	4f 93       	push	r20
 83c:	5f 93       	push	r21
 83e:	6f 93       	push	r22
 840:	7f 93       	push	r23
 842:	8f 93       	push	r24
 844:	9f 93       	push	r25
 846:	af 93       	push	r26
 848:	bf 93       	push	r27
 84a:	ef 93       	push	r30
 84c:	ff 93       	push	r31
	static iteration = 1;
	//read light sensitivity
	
	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 84e:	ea e7       	ldi	r30, 0x7A	; 122
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	80 81       	ld	r24, Z
 854:	80 64       	ori	r24, 0x40	; 64
 856:	80 83       	st	Z, r24
	
	if (iteration == 4) {
 858:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 85c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 860:	04 97       	sbiw	r24, 0x04	; 4
 862:	41 f4       	brne	.+16     	; 0x874 <__vector_13+0x48>
		read_luminescence();
 864:	0e 94 df 03 	call	0x7be	; 0x7be <read_luminescence>
		//read DHT12
		read_temperature();
 868:	0e 94 52 03 	call	0x6a4	; 0x6a4 <read_temperature>
		iteration = 0;
 86c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 870:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	iteration++;
 874:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 878:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 87c:	01 96       	adiw	r24, 0x01	; 1
 87e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 882:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 886:	ff 91       	pop	r31
 888:	ef 91       	pop	r30
 88a:	bf 91       	pop	r27
 88c:	af 91       	pop	r26
 88e:	9f 91       	pop	r25
 890:	8f 91       	pop	r24
 892:	7f 91       	pop	r23
 894:	6f 91       	pop	r22
 896:	5f 91       	pop	r21
 898:	4f 91       	pop	r20
 89a:	3f 91       	pop	r19
 89c:	2f 91       	pop	r18
 89e:	0f 90       	pop	r0
 8a0:	0f be       	out	0x3f, r0	; 63
 8a2:	0f 90       	pop	r0
 8a4:	1f 90       	pop	r1
 8a6:	18 95       	reti

000008a8 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 8a8:	1f 92       	push	r1
 8aa:	0f 92       	push	r0
 8ac:	0f b6       	in	r0, 0x3f	; 63
 8ae:	0f 92       	push	r0
 8b0:	11 24       	eor	r1, r1
 8b2:	2f 93       	push	r18
 8b4:	3f 93       	push	r19
 8b6:	4f 93       	push	r20
 8b8:	5f 93       	push	r21
 8ba:	6f 93       	push	r22
 8bc:	7f 93       	push	r23
 8be:	8f 93       	push	r24
 8c0:	9f 93       	push	r25
 8c2:	af 93       	push	r26
 8c4:	bf 93       	push	r27
 8c6:	ef 93       	push	r30
 8c8:	ff 93       	push	r31
	lcd_updateMenu();
 8ca:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_updateMenu>
}
 8ce:	ff 91       	pop	r31
 8d0:	ef 91       	pop	r30
 8d2:	bf 91       	pop	r27
 8d4:	af 91       	pop	r26
 8d6:	9f 91       	pop	r25
 8d8:	8f 91       	pop	r24
 8da:	7f 91       	pop	r23
 8dc:	6f 91       	pop	r22
 8de:	5f 91       	pop	r21
 8e0:	4f 91       	pop	r20
 8e2:	3f 91       	pop	r19
 8e4:	2f 91       	pop	r18
 8e6:	0f 90       	pop	r0
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	0f 90       	pop	r0
 8ec:	1f 90       	pop	r1
 8ee:	18 95       	reti

000008f0 <__vector_21>:
 * ISR starts when ADC completes the conversion. Display soil moisture
 * on LCD and send it to UART. high adc value correspond to dry soil and 
 * low value wet soil
 */
ISR(ADC_vect)
{
 8f0:	1f 92       	push	r1
 8f2:	0f 92       	push	r0
 8f4:	0f b6       	in	r0, 0x3f	; 63
 8f6:	0f 92       	push	r0
 8f8:	11 24       	eor	r1, r1
 8fa:	8f 93       	push	r24
 8fc:	9f 93       	push	r25
	uint16_t soil_moisture = 0;
	soil_moisture = ADCW;    // Copy ADC result to 16-bit variable
 8fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 902:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	humidity = soil_moisture;
 906:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <humidity+0x1>
 90a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <humidity>
	
	humid_flag = 1;
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <humid_flag>
 914:	9f 91       	pop	r25
 916:	8f 91       	pop	r24
 918:	0f 90       	pop	r0
 91a:	0f be       	out	0x3f, r0	; 63
 91c:	0f 90       	pop	r0
 91e:	1f 90       	pop	r1
 920:	18 95       	reti

00000922 <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 922:	87 b1       	in	r24, 0x07	; 7
 924:	8f 7c       	andi	r24, 0xCF	; 207
 926:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 928:	88 b1       	in	r24, 0x08	; 8
 92a:	80 63       	ori	r24, 0x30	; 48
 92c:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 92e:	e9 eb       	ldi	r30, 0xB9	; 185
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	80 81       	ld	r24, Z
 934:	8c 7f       	andi	r24, 0xFC	; 252
 936:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 938:	88 e9       	ldi	r24, 0x98	; 152
 93a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 93e:	08 95       	ret

00000940 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 940:	94 ea       	ldi	r25, 0xA4	; 164
 942:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 946:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 94a:	99 23       	and	r25, r25
 94c:	e4 f7       	brge	.-8      	; 0x946 <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 94e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 952:	84 e8       	ldi	r24, 0x84	; 132
 954:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 958:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 95c:	88 23       	and	r24, r24
 95e:	e4 f7       	brge	.-8      	; 0x958 <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 960:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 964:	88 7f       	andi	r24, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 966:	88 31       	cpi	r24, 0x18	; 24
 968:	21 f0       	breq	.+8      	; 0x972 <twi_start+0x32>
 96a:	80 34       	cpi	r24, 0x40	; 64
 96c:	21 f4       	brne	.+8      	; 0x976 <twi_start+0x36>
    {
        return 0;   /* Slave device accessible */
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	08 95       	ret
 972:	80 e0       	ldi	r24, 0x00	; 0
 974:	08 95       	ret
    }
    else
    {
        return 1;   /* Failed to access slave device */
 976:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 978:	08 95       	ret

0000097a <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 97a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 97e:	84 e8       	ldi	r24, 0x84	; 132
 980:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 984:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 988:	88 23       	and	r24, r24
 98a:	e4 f7       	brge	.-8      	; 0x984 <twi_write+0xa>
}
 98c:	08 95       	ret

0000098e <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 98e:	84 ec       	ldi	r24, 0xC4	; 196
 990:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 994:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 998:	88 23       	and	r24, r24
 99a:	e4 f7       	brge	.-8      	; 0x994 <twi_read_ack+0x6>
    return (TWDR);
 99c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 9a0:	08 95       	ret

000009a2 <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 9a2:	84 e8       	ldi	r24, 0x84	; 132
 9a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 9a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 9ac:	88 23       	and	r24, r24
 9ae:	e4 f7       	brge	.-8      	; 0x9a8 <twi_read_nack+0x6>
    return (TWDR);
 9b0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 9b4:	08 95       	ret

000009b6 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 9b6:	84 e9       	ldi	r24, 0x94	; 148
 9b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 9bc:	08 95       	ret

000009be <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 9be:	1f 92       	push	r1
 9c0:	0f 92       	push	r0
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	0f 92       	push	r0
 9c6:	11 24       	eor	r1, r1
 9c8:	2f 93       	push	r18
 9ca:	8f 93       	push	r24
 9cc:	9f 93       	push	r25
 9ce:	ef 93       	push	r30
 9d0:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 9d2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
 9d6:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 9da:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 9dc:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <UART_RxHead>
 9e0:	ef 5f       	subi	r30, 0xFF	; 255
 9e2:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 9e4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <UART_RxTail>
 9e8:	e9 17       	cp	r30, r25
 9ea:	39 f0       	breq	.+14     	; 0x9fa <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 9ec:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	e3 5d       	subi	r30, 0xD3	; 211
 9f4:	fe 4f       	sbci	r31, 0xFE	; 254
 9f6:	20 83       	st	Z, r18
 9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 9fa:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 9fc:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <UART_LastRxError>
 a00:	89 2b       	or	r24, r25
 a02:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <UART_LastRxError>
}
 a06:	ff 91       	pop	r31
 a08:	ef 91       	pop	r30
 a0a:	9f 91       	pop	r25
 a0c:	8f 91       	pop	r24
 a0e:	2f 91       	pop	r18
 a10:	0f 90       	pop	r0
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	0f 90       	pop	r0
 a16:	1f 90       	pop	r1
 a18:	18 95       	reti

00000a1a <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 a1a:	1f 92       	push	r1
 a1c:	0f 92       	push	r0
 a1e:	0f b6       	in	r0, 0x3f	; 63
 a20:	0f 92       	push	r0
 a22:	11 24       	eor	r1, r1
 a24:	8f 93       	push	r24
 a26:	9f 93       	push	r25
 a28:	ef 93       	push	r30
 a2a:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 a2c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <UART_TxHead>
 a30:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <UART_TxTail>
 a34:	98 17       	cp	r25, r24
 a36:	69 f0       	breq	.+26     	; 0xa52 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 a38:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <UART_TxTail>
 a3c:	ef 5f       	subi	r30, 0xFF	; 255
 a3e:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 a40:	e0 93 2b 01 	sts	0x012B, r30	; 0x80012b <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 a44:	f0 e0       	ldi	r31, 0x00	; 0
 a46:	e3 5b       	subi	r30, 0xB3	; 179
 a48:	fe 4f       	sbci	r31, 0xFE	; 254
 a4a:	80 81       	ld	r24, Z
 a4c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 a50:	05 c0       	rjmp	.+10     	; 0xa5c <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 a52:	e1 ec       	ldi	r30, 0xC1	; 193
 a54:	f0 e0       	ldi	r31, 0x00	; 0
 a56:	80 81       	ld	r24, Z
 a58:	8f 7d       	andi	r24, 0xDF	; 223
 a5a:	80 83       	st	Z, r24
    }
}
 a5c:	ff 91       	pop	r31
 a5e:	ef 91       	pop	r30
 a60:	9f 91       	pop	r25
 a62:	8f 91       	pop	r24
 a64:	0f 90       	pop	r0
 a66:	0f be       	out	0x3f, r0	; 63
 a68:	0f 90       	pop	r0
 a6a:	1f 90       	pop	r1
 a6c:	18 95       	reti

00000a6e <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 a6e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <UART_TxHead>
    UART_TxTail = 0;
 a72:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <UART_TxTail>
    UART_RxHead = 0;
 a76:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <UART_RxHead>
    UART_RxTail = 0;
 a7a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 a7e:	28 2f       	mov	r18, r24
 a80:	39 2f       	mov	r19, r25
 a82:	33 23       	and	r19, r19
 a84:	1c f4       	brge	.+6      	; 0xa8c <uart_init+0x1e>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 a86:	22 e0       	ldi	r18, 0x02	; 2
 a88:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 a8c:	90 78       	andi	r25, 0x80	; 128
 a8e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 a92:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 a96:	88 e9       	ldi	r24, 0x98	; 152
 a98:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 a9c:	86 e0       	ldi	r24, 0x06	; 6
 a9e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 aa2:	08 95       	ret

00000aa4 <__divsf3>:
 aa4:	0e 94 66 05 	call	0xacc	; 0xacc <__divsf3x>
 aa8:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__fp_round>
 aac:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_pscB>
 ab0:	58 f0       	brcs	.+22     	; 0xac8 <__divsf3+0x24>
 ab2:	0e 94 39 06 	call	0xc72	; 0xc72 <__fp_pscA>
 ab6:	40 f0       	brcs	.+16     	; 0xac8 <__divsf3+0x24>
 ab8:	29 f4       	brne	.+10     	; 0xac4 <__divsf3+0x20>
 aba:	5f 3f       	cpi	r21, 0xFF	; 255
 abc:	29 f0       	breq	.+10     	; 0xac8 <__divsf3+0x24>
 abe:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_inf>
 ac2:	51 11       	cpse	r21, r1
 ac4:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_szero>
 ac8:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__fp_nan>

00000acc <__divsf3x>:
 acc:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__fp_split3>
 ad0:	68 f3       	brcs	.-38     	; 0xaac <__divsf3+0x8>

00000ad2 <__divsf3_pse>:
 ad2:	99 23       	and	r25, r25
 ad4:	b1 f3       	breq	.-20     	; 0xac2 <__divsf3+0x1e>
 ad6:	55 23       	and	r21, r21
 ad8:	91 f3       	breq	.-28     	; 0xabe <__divsf3+0x1a>
 ada:	95 1b       	sub	r25, r21
 adc:	55 0b       	sbc	r21, r21
 ade:	bb 27       	eor	r27, r27
 ae0:	aa 27       	eor	r26, r26
 ae2:	62 17       	cp	r22, r18
 ae4:	73 07       	cpc	r23, r19
 ae6:	84 07       	cpc	r24, r20
 ae8:	38 f0       	brcs	.+14     	; 0xaf8 <__divsf3_pse+0x26>
 aea:	9f 5f       	subi	r25, 0xFF	; 255
 aec:	5f 4f       	sbci	r21, 0xFF	; 255
 aee:	22 0f       	add	r18, r18
 af0:	33 1f       	adc	r19, r19
 af2:	44 1f       	adc	r20, r20
 af4:	aa 1f       	adc	r26, r26
 af6:	a9 f3       	breq	.-22     	; 0xae2 <__divsf3_pse+0x10>
 af8:	35 d0       	rcall	.+106    	; 0xb64 <__divsf3_pse+0x92>
 afa:	0e 2e       	mov	r0, r30
 afc:	3a f0       	brmi	.+14     	; 0xb0c <__divsf3_pse+0x3a>
 afe:	e0 e8       	ldi	r30, 0x80	; 128
 b00:	32 d0       	rcall	.+100    	; 0xb66 <__divsf3_pse+0x94>
 b02:	91 50       	subi	r25, 0x01	; 1
 b04:	50 40       	sbci	r21, 0x00	; 0
 b06:	e6 95       	lsr	r30
 b08:	00 1c       	adc	r0, r0
 b0a:	ca f7       	brpl	.-14     	; 0xafe <__divsf3_pse+0x2c>
 b0c:	2b d0       	rcall	.+86     	; 0xb64 <__divsf3_pse+0x92>
 b0e:	fe 2f       	mov	r31, r30
 b10:	29 d0       	rcall	.+82     	; 0xb64 <__divsf3_pse+0x92>
 b12:	66 0f       	add	r22, r22
 b14:	77 1f       	adc	r23, r23
 b16:	88 1f       	adc	r24, r24
 b18:	bb 1f       	adc	r27, r27
 b1a:	26 17       	cp	r18, r22
 b1c:	37 07       	cpc	r19, r23
 b1e:	48 07       	cpc	r20, r24
 b20:	ab 07       	cpc	r26, r27
 b22:	b0 e8       	ldi	r27, 0x80	; 128
 b24:	09 f0       	breq	.+2      	; 0xb28 <__divsf3_pse+0x56>
 b26:	bb 0b       	sbc	r27, r27
 b28:	80 2d       	mov	r24, r0
 b2a:	bf 01       	movw	r22, r30
 b2c:	ff 27       	eor	r31, r31
 b2e:	93 58       	subi	r25, 0x83	; 131
 b30:	5f 4f       	sbci	r21, 0xFF	; 255
 b32:	3a f0       	brmi	.+14     	; 0xb42 <__divsf3_pse+0x70>
 b34:	9e 3f       	cpi	r25, 0xFE	; 254
 b36:	51 05       	cpc	r21, r1
 b38:	78 f0       	brcs	.+30     	; 0xb58 <__divsf3_pse+0x86>
 b3a:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_inf>
 b3e:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_szero>
 b42:	5f 3f       	cpi	r21, 0xFF	; 255
 b44:	e4 f3       	brlt	.-8      	; 0xb3e <__divsf3_pse+0x6c>
 b46:	98 3e       	cpi	r25, 0xE8	; 232
 b48:	d4 f3       	brlt	.-12     	; 0xb3e <__divsf3_pse+0x6c>
 b4a:	86 95       	lsr	r24
 b4c:	77 95       	ror	r23
 b4e:	67 95       	ror	r22
 b50:	b7 95       	ror	r27
 b52:	f7 95       	ror	r31
 b54:	9f 5f       	subi	r25, 0xFF	; 255
 b56:	c9 f7       	brne	.-14     	; 0xb4a <__divsf3_pse+0x78>
 b58:	88 0f       	add	r24, r24
 b5a:	91 1d       	adc	r25, r1
 b5c:	96 95       	lsr	r25
 b5e:	87 95       	ror	r24
 b60:	97 f9       	bld	r25, 7
 b62:	08 95       	ret
 b64:	e1 e0       	ldi	r30, 0x01	; 1
 b66:	66 0f       	add	r22, r22
 b68:	77 1f       	adc	r23, r23
 b6a:	88 1f       	adc	r24, r24
 b6c:	bb 1f       	adc	r27, r27
 b6e:	62 17       	cp	r22, r18
 b70:	73 07       	cpc	r23, r19
 b72:	84 07       	cpc	r24, r20
 b74:	ba 07       	cpc	r27, r26
 b76:	20 f0       	brcs	.+8      	; 0xb80 <__divsf3_pse+0xae>
 b78:	62 1b       	sub	r22, r18
 b7a:	73 0b       	sbc	r23, r19
 b7c:	84 0b       	sbc	r24, r20
 b7e:	ba 0b       	sbc	r27, r26
 b80:	ee 1f       	adc	r30, r30
 b82:	88 f7       	brcc	.-30     	; 0xb66 <__divsf3_pse+0x94>
 b84:	e0 95       	com	r30
 b86:	08 95       	ret

00000b88 <__fixunssfsi>:
 b88:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_splitA>
 b8c:	88 f0       	brcs	.+34     	; 0xbb0 <__fixunssfsi+0x28>
 b8e:	9f 57       	subi	r25, 0x7F	; 127
 b90:	98 f0       	brcs	.+38     	; 0xbb8 <__fixunssfsi+0x30>
 b92:	b9 2f       	mov	r27, r25
 b94:	99 27       	eor	r25, r25
 b96:	b7 51       	subi	r27, 0x17	; 23
 b98:	b0 f0       	brcs	.+44     	; 0xbc6 <__fixunssfsi+0x3e>
 b9a:	e1 f0       	breq	.+56     	; 0xbd4 <__fixunssfsi+0x4c>
 b9c:	66 0f       	add	r22, r22
 b9e:	77 1f       	adc	r23, r23
 ba0:	88 1f       	adc	r24, r24
 ba2:	99 1f       	adc	r25, r25
 ba4:	1a f0       	brmi	.+6      	; 0xbac <__fixunssfsi+0x24>
 ba6:	ba 95       	dec	r27
 ba8:	c9 f7       	brne	.-14     	; 0xb9c <__fixunssfsi+0x14>
 baa:	14 c0       	rjmp	.+40     	; 0xbd4 <__fixunssfsi+0x4c>
 bac:	b1 30       	cpi	r27, 0x01	; 1
 bae:	91 f0       	breq	.+36     	; 0xbd4 <__fixunssfsi+0x4c>
 bb0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_zero>
 bb4:	b1 e0       	ldi	r27, 0x01	; 1
 bb6:	08 95       	ret
 bb8:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__fp_zero>
 bbc:	67 2f       	mov	r22, r23
 bbe:	78 2f       	mov	r23, r24
 bc0:	88 27       	eor	r24, r24
 bc2:	b8 5f       	subi	r27, 0xF8	; 248
 bc4:	39 f0       	breq	.+14     	; 0xbd4 <__fixunssfsi+0x4c>
 bc6:	b9 3f       	cpi	r27, 0xF9	; 249
 bc8:	cc f3       	brlt	.-14     	; 0xbbc <__fixunssfsi+0x34>
 bca:	86 95       	lsr	r24
 bcc:	77 95       	ror	r23
 bce:	67 95       	ror	r22
 bd0:	b3 95       	inc	r27
 bd2:	d9 f7       	brne	.-10     	; 0xbca <__fixunssfsi+0x42>
 bd4:	3e f4       	brtc	.+14     	; 0xbe4 <__fixunssfsi+0x5c>
 bd6:	90 95       	com	r25
 bd8:	80 95       	com	r24
 bda:	70 95       	com	r23
 bdc:	61 95       	neg	r22
 bde:	7f 4f       	sbci	r23, 0xFF	; 255
 be0:	8f 4f       	sbci	r24, 0xFF	; 255
 be2:	9f 4f       	sbci	r25, 0xFF	; 255
 be4:	08 95       	ret

00000be6 <__floatunsisf>:
 be6:	e8 94       	clt
 be8:	09 c0       	rjmp	.+18     	; 0xbfc <__floatsisf+0x12>

00000bea <__floatsisf>:
 bea:	97 fb       	bst	r25, 7
 bec:	3e f4       	brtc	.+14     	; 0xbfc <__floatsisf+0x12>
 bee:	90 95       	com	r25
 bf0:	80 95       	com	r24
 bf2:	70 95       	com	r23
 bf4:	61 95       	neg	r22
 bf6:	7f 4f       	sbci	r23, 0xFF	; 255
 bf8:	8f 4f       	sbci	r24, 0xFF	; 255
 bfa:	9f 4f       	sbci	r25, 0xFF	; 255
 bfc:	99 23       	and	r25, r25
 bfe:	a9 f0       	breq	.+42     	; 0xc2a <__floatsisf+0x40>
 c00:	f9 2f       	mov	r31, r25
 c02:	96 e9       	ldi	r25, 0x96	; 150
 c04:	bb 27       	eor	r27, r27
 c06:	93 95       	inc	r25
 c08:	f6 95       	lsr	r31
 c0a:	87 95       	ror	r24
 c0c:	77 95       	ror	r23
 c0e:	67 95       	ror	r22
 c10:	b7 95       	ror	r27
 c12:	f1 11       	cpse	r31, r1
 c14:	f8 cf       	rjmp	.-16     	; 0xc06 <__floatsisf+0x1c>
 c16:	fa f4       	brpl	.+62     	; 0xc56 <__floatsisf+0x6c>
 c18:	bb 0f       	add	r27, r27
 c1a:	11 f4       	brne	.+4      	; 0xc20 <__floatsisf+0x36>
 c1c:	60 ff       	sbrs	r22, 0
 c1e:	1b c0       	rjmp	.+54     	; 0xc56 <__floatsisf+0x6c>
 c20:	6f 5f       	subi	r22, 0xFF	; 255
 c22:	7f 4f       	sbci	r23, 0xFF	; 255
 c24:	8f 4f       	sbci	r24, 0xFF	; 255
 c26:	9f 4f       	sbci	r25, 0xFF	; 255
 c28:	16 c0       	rjmp	.+44     	; 0xc56 <__floatsisf+0x6c>
 c2a:	88 23       	and	r24, r24
 c2c:	11 f0       	breq	.+4      	; 0xc32 <__floatsisf+0x48>
 c2e:	96 e9       	ldi	r25, 0x96	; 150
 c30:	11 c0       	rjmp	.+34     	; 0xc54 <__floatsisf+0x6a>
 c32:	77 23       	and	r23, r23
 c34:	21 f0       	breq	.+8      	; 0xc3e <__floatsisf+0x54>
 c36:	9e e8       	ldi	r25, 0x8E	; 142
 c38:	87 2f       	mov	r24, r23
 c3a:	76 2f       	mov	r23, r22
 c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__floatsisf+0x5e>
 c3e:	66 23       	and	r22, r22
 c40:	71 f0       	breq	.+28     	; 0xc5e <__floatsisf+0x74>
 c42:	96 e8       	ldi	r25, 0x86	; 134
 c44:	86 2f       	mov	r24, r22
 c46:	70 e0       	ldi	r23, 0x00	; 0
 c48:	60 e0       	ldi	r22, 0x00	; 0
 c4a:	2a f0       	brmi	.+10     	; 0xc56 <__floatsisf+0x6c>
 c4c:	9a 95       	dec	r25
 c4e:	66 0f       	add	r22, r22
 c50:	77 1f       	adc	r23, r23
 c52:	88 1f       	adc	r24, r24
 c54:	da f7       	brpl	.-10     	; 0xc4c <__floatsisf+0x62>
 c56:	88 0f       	add	r24, r24
 c58:	96 95       	lsr	r25
 c5a:	87 95       	ror	r24
 c5c:	97 f9       	bld	r25, 7
 c5e:	08 95       	ret

00000c60 <__fp_inf>:
 c60:	97 f9       	bld	r25, 7
 c62:	9f 67       	ori	r25, 0x7F	; 127
 c64:	80 e8       	ldi	r24, 0x80	; 128
 c66:	70 e0       	ldi	r23, 0x00	; 0
 c68:	60 e0       	ldi	r22, 0x00	; 0
 c6a:	08 95       	ret

00000c6c <__fp_nan>:
 c6c:	9f ef       	ldi	r25, 0xFF	; 255
 c6e:	80 ec       	ldi	r24, 0xC0	; 192
 c70:	08 95       	ret

00000c72 <__fp_pscA>:
 c72:	00 24       	eor	r0, r0
 c74:	0a 94       	dec	r0
 c76:	16 16       	cp	r1, r22
 c78:	17 06       	cpc	r1, r23
 c7a:	18 06       	cpc	r1, r24
 c7c:	09 06       	cpc	r0, r25
 c7e:	08 95       	ret

00000c80 <__fp_pscB>:
 c80:	00 24       	eor	r0, r0
 c82:	0a 94       	dec	r0
 c84:	12 16       	cp	r1, r18
 c86:	13 06       	cpc	r1, r19
 c88:	14 06       	cpc	r1, r20
 c8a:	05 06       	cpc	r0, r21
 c8c:	08 95       	ret

00000c8e <__fp_round>:
 c8e:	09 2e       	mov	r0, r25
 c90:	03 94       	inc	r0
 c92:	00 0c       	add	r0, r0
 c94:	11 f4       	brne	.+4      	; 0xc9a <__fp_round+0xc>
 c96:	88 23       	and	r24, r24
 c98:	52 f0       	brmi	.+20     	; 0xcae <__fp_round+0x20>
 c9a:	bb 0f       	add	r27, r27
 c9c:	40 f4       	brcc	.+16     	; 0xcae <__fp_round+0x20>
 c9e:	bf 2b       	or	r27, r31
 ca0:	11 f4       	brne	.+4      	; 0xca6 <__fp_round+0x18>
 ca2:	60 ff       	sbrs	r22, 0
 ca4:	04 c0       	rjmp	.+8      	; 0xcae <__fp_round+0x20>
 ca6:	6f 5f       	subi	r22, 0xFF	; 255
 ca8:	7f 4f       	sbci	r23, 0xFF	; 255
 caa:	8f 4f       	sbci	r24, 0xFF	; 255
 cac:	9f 4f       	sbci	r25, 0xFF	; 255
 cae:	08 95       	ret

00000cb0 <__fp_split3>:
 cb0:	57 fd       	sbrc	r21, 7
 cb2:	90 58       	subi	r25, 0x80	; 128
 cb4:	44 0f       	add	r20, r20
 cb6:	55 1f       	adc	r21, r21
 cb8:	59 f0       	breq	.+22     	; 0xcd0 <__fp_splitA+0x10>
 cba:	5f 3f       	cpi	r21, 0xFF	; 255
 cbc:	71 f0       	breq	.+28     	; 0xcda <__fp_splitA+0x1a>
 cbe:	47 95       	ror	r20

00000cc0 <__fp_splitA>:
 cc0:	88 0f       	add	r24, r24
 cc2:	97 fb       	bst	r25, 7
 cc4:	99 1f       	adc	r25, r25
 cc6:	61 f0       	breq	.+24     	; 0xce0 <__fp_splitA+0x20>
 cc8:	9f 3f       	cpi	r25, 0xFF	; 255
 cca:	79 f0       	breq	.+30     	; 0xcea <__fp_splitA+0x2a>
 ccc:	87 95       	ror	r24
 cce:	08 95       	ret
 cd0:	12 16       	cp	r1, r18
 cd2:	13 06       	cpc	r1, r19
 cd4:	14 06       	cpc	r1, r20
 cd6:	55 1f       	adc	r21, r21
 cd8:	f2 cf       	rjmp	.-28     	; 0xcbe <__fp_split3+0xe>
 cda:	46 95       	lsr	r20
 cdc:	f1 df       	rcall	.-30     	; 0xcc0 <__fp_splitA>
 cde:	08 c0       	rjmp	.+16     	; 0xcf0 <__fp_splitA+0x30>
 ce0:	16 16       	cp	r1, r22
 ce2:	17 06       	cpc	r1, r23
 ce4:	18 06       	cpc	r1, r24
 ce6:	99 1f       	adc	r25, r25
 ce8:	f1 cf       	rjmp	.-30     	; 0xccc <__fp_splitA+0xc>
 cea:	86 95       	lsr	r24
 cec:	71 05       	cpc	r23, r1
 cee:	61 05       	cpc	r22, r1
 cf0:	08 94       	sec
 cf2:	08 95       	ret

00000cf4 <__fp_zero>:
 cf4:	e8 94       	clt

00000cf6 <__fp_szero>:
 cf6:	bb 27       	eor	r27, r27
 cf8:	66 27       	eor	r22, r22
 cfa:	77 27       	eor	r23, r23
 cfc:	cb 01       	movw	r24, r22
 cfe:	97 f9       	bld	r25, 7
 d00:	08 95       	ret

00000d02 <__umulhisi3>:
 d02:	a2 9f       	mul	r26, r18
 d04:	b0 01       	movw	r22, r0
 d06:	b3 9f       	mul	r27, r19
 d08:	c0 01       	movw	r24, r0
 d0a:	a3 9f       	mul	r26, r19
 d0c:	70 0d       	add	r23, r0
 d0e:	81 1d       	adc	r24, r1
 d10:	11 24       	eor	r1, r1
 d12:	91 1d       	adc	r25, r1
 d14:	b2 9f       	mul	r27, r18
 d16:	70 0d       	add	r23, r0
 d18:	81 1d       	adc	r24, r1
 d1a:	11 24       	eor	r1, r1
 d1c:	91 1d       	adc	r25, r1
 d1e:	08 95       	ret

00000d20 <__itoa_ncheck>:
 d20:	bb 27       	eor	r27, r27
 d22:	4a 30       	cpi	r20, 0x0A	; 10
 d24:	31 f4       	brne	.+12     	; 0xd32 <__itoa_ncheck+0x12>
 d26:	99 23       	and	r25, r25
 d28:	22 f4       	brpl	.+8      	; 0xd32 <__itoa_ncheck+0x12>
 d2a:	bd e2       	ldi	r27, 0x2D	; 45
 d2c:	90 95       	com	r25
 d2e:	81 95       	neg	r24
 d30:	9f 4f       	sbci	r25, 0xFF	; 255
 d32:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__utoa_common>

00000d36 <__utoa_ncheck>:
 d36:	bb 27       	eor	r27, r27

00000d38 <__utoa_common>:
 d38:	fb 01       	movw	r30, r22
 d3a:	55 27       	eor	r21, r21
 d3c:	aa 27       	eor	r26, r26
 d3e:	88 0f       	add	r24, r24
 d40:	99 1f       	adc	r25, r25
 d42:	aa 1f       	adc	r26, r26
 d44:	a4 17       	cp	r26, r20
 d46:	10 f0       	brcs	.+4      	; 0xd4c <__utoa_common+0x14>
 d48:	a4 1b       	sub	r26, r20
 d4a:	83 95       	inc	r24
 d4c:	50 51       	subi	r21, 0x10	; 16
 d4e:	b9 f7       	brne	.-18     	; 0xd3e <__utoa_common+0x6>
 d50:	a0 5d       	subi	r26, 0xD0	; 208
 d52:	aa 33       	cpi	r26, 0x3A	; 58
 d54:	08 f0       	brcs	.+2      	; 0xd58 <__utoa_common+0x20>
 d56:	a9 5d       	subi	r26, 0xD9	; 217
 d58:	a1 93       	st	Z+, r26
 d5a:	00 97       	sbiw	r24, 0x00	; 0
 d5c:	79 f7       	brne	.-34     	; 0xd3c <__utoa_common+0x4>
 d5e:	b1 11       	cpse	r27, r1
 d60:	b1 93       	st	Z+, r27
 d62:	11 92       	st	Z+, r1
 d64:	cb 01       	movw	r24, r22
 d66:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <strrev>

00000d6a <strrev>:
 d6a:	dc 01       	movw	r26, r24
 d6c:	fc 01       	movw	r30, r24
 d6e:	67 2f       	mov	r22, r23
 d70:	71 91       	ld	r23, Z+
 d72:	77 23       	and	r23, r23
 d74:	e1 f7       	brne	.-8      	; 0xd6e <strrev+0x4>
 d76:	32 97       	sbiw	r30, 0x02	; 2
 d78:	04 c0       	rjmp	.+8      	; 0xd82 <strrev+0x18>
 d7a:	7c 91       	ld	r23, X
 d7c:	6d 93       	st	X+, r22
 d7e:	70 83       	st	Z, r23
 d80:	62 91       	ld	r22, -Z
 d82:	ae 17       	cp	r26, r30
 d84:	bf 07       	cpc	r27, r31
 d86:	c8 f3       	brcs	.-14     	; 0xd7a <strrev+0x10>
 d88:	08 95       	ret

00000d8a <_exit>:
 d8a:	f8 94       	cli

00000d8c <__stop_program>:
 d8c:	ff cf       	rjmp	.-2      	; 0xd8c <__stop_program>
